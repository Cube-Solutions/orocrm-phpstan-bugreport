<?php

namespace ContainerD6qHxMk;

include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/lib/Doctrine/Persistence/ObjectRepository.php';
include_once \dirname(__DIR__, 4).'/vendor/doctrine/collections/lib/Doctrine/Common/Collections/Selectable.php';
include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityRepository.php';
include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Repository/ServiceEntityRepositoryInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle/Repository/ServiceEntityRepository.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/SearchBundle/Engine/Orm/DBALPersisterInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/SearchBundle/Entity/Repository/SearchIndexRepository.php';

class SearchIndexRepository_57173b6 extends \Oro\Bundle\SearchBundle\Entity\Repository\SearchIndexRepository implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\SearchBundle\Entity\Repository\SearchIndexRepository|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function search(\Oro\Bundle\SearchBundle\Query\Query $query)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'search', array('query' => $query), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->search($query);
    }

    public function getDocumentsCountGroupByEntityFQCN(\Oro\Bundle\SearchBundle\Query\Query $query) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDocumentsCountGroupByEntityFQCN', array('query' => $query), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDocumentsCountGroupByEntityFQCN($query);
    }

    public function getRecordsCount(\Oro\Bundle\SearchBundle\Query\Query $query)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getRecordsCount', array('query' => $query), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getRecordsCount($query);
    }

    public function getAggregatedData(\Oro\Bundle\SearchBundle\Query\Query $query)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAggregatedData', array('query' => $query), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAggregatedData($query);
    }

    public function setDriversClasses($drivers)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setDriversClasses', array('drivers' => $drivers), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setDriversClasses($drivers);
    }

    public function truncateIndex()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'truncateIndex', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->truncateIndex();
    }

    public function writeItem(\Oro\Bundle\SearchBundle\Entity\AbstractItem $item)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'writeItem', array('item' => $item), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->writeItem($item);
    }

    public function flushWrites()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'flushWrites', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->flushWrites();
    }

    public function getItemsForEntities(array $entities)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getItemsForEntities', array('entities' => $entities), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getItemsForEntities($entities);
    }

    public function setRegistry($registry)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setRegistry', array('registry' => $registry), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setRegistry($registry);
    }

    public function removeEntities(array $entityIds, $entityClass, $entityAlias = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'removeEntities', array('entityIds' => $entityIds, 'entityClass' => $entityClass, 'entityAlias' => $entityAlias), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->removeEntities($entityIds, $entityClass, $entityAlias);
    }

    public function createQueryBuilder($alias, $indexBy = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createQueryBuilder', array('alias' => $alias, 'indexBy' => $indexBy), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createQueryBuilder($alias, $indexBy);
    }

    public function createResultSetMappingBuilder($alias)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createResultSetMappingBuilder', array('alias' => $alias), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createResultSetMappingBuilder($alias);
    }

    public function createNamedQuery($queryName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createNamedQuery', array('queryName' => $queryName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createNamedQuery($queryName);
    }

    public function createNativeNamedQuery($queryName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createNativeNamedQuery', array('queryName' => $queryName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createNativeNamedQuery($queryName);
    }

    public function clear()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'clear', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->clear();
    }

    public function find($id, $lockMode = null, $lockVersion = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'find', array('id' => $id, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->find($id, $lockMode, $lockVersion);
    }

    public function findAll()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'findAll', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->findAll();
    }

    public function findBy(array $criteria, ?array $orderBy = null, $limit = null, $offset = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'findBy', array('criteria' => $criteria, 'orderBy' => $orderBy, 'limit' => $limit, 'offset' => $offset), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->findBy($criteria, $orderBy, $limit, $offset);
    }

    public function findOneBy(array $criteria, ?array $orderBy = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'findOneBy', array('criteria' => $criteria, 'orderBy' => $orderBy), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->findOneBy($criteria, $orderBy);
    }

    public function count(array $criteria)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'count', array('criteria' => $criteria), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->count($criteria);
    }

    public function __call($method, $arguments)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__call', array('method' => $method, 'arguments' => $arguments), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->__call($method, $arguments);
    }

    public function getClassName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getClassName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getClassName();
    }

    public function matching(\Doctrine\Common\Collections\Criteria $criteria)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'matching', array('criteria' => $criteria), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->matching($criteria);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->driverRepo, $instance->drivers, $instance->registry, $instance->managers, $instance->_entityName, $instance->_em, $instance->_class);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\Persistence\ManagerRegistry $registry, string $entityClass)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\SearchBundle\\Entity\\Repository\\SearchIndexRepository');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->driverRepo, $this->drivers, $this->registry, $this->managers, $this->_entityName, $this->_em, $this->_class);

        }

        $this->valueHoldere0de0->__construct($registry, $entityClass);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\Entity\\Repository\\SearchIndexRepository');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\Entity\\Repository\\SearchIndexRepository');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\Entity\\Repository\\SearchIndexRepository');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\Entity\\Repository\\SearchIndexRepository');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->driverRepo, $this->drivers, $this->registry, $this->managers, $this->_entityName, $this->_em, $this->_class);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('SearchIndexRepository_57173b6', false)) {
    \class_alias(__NAMESPACE__.'\\SearchIndexRepository_57173b6', 'SearchIndexRepository_57173b6', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Component/Log/LogAndThrowExceptionTrait.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/Download/TranslationDownloader.php';

class TranslationDownloader_7847ac2 extends \Oro\Bundle\TranslationBundle\Download\TranslationDownloader implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\TranslationBundle\Download\TranslationDownloader|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function fetchLanguageMetrics(string $languageCode) : ?array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'fetchLanguageMetrics', array('languageCode' => $languageCode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->fetchLanguageMetrics($languageCode);
    }

    public function downloadAndApplyTranslations(string $languageCode) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'downloadAndApplyTranslations', array('languageCode' => $languageCode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->downloadAndApplyTranslations($languageCode);
return;
    }

    public function downloadTranslationsArchive(string $languageCode, string $filePathToSaveDownloadedArchive) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'downloadTranslationsArchive', array('languageCode' => $languageCode, 'filePathToSaveDownloadedArchive' => $filePathToSaveDownloadedArchive), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->downloadTranslationsArchive($languageCode, $filePathToSaveDownloadedArchive);
return;
    }

    public function loadTranslationsFromArchive(string $pathToArchiveFile, string $languageCode) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'loadTranslationsFromArchive', array('pathToArchiveFile' => $pathToArchiveFile, 'languageCode' => $languageCode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->loadTranslationsFromArchive($pathToArchiveFile, $languageCode);
return;
    }

    public function getTmpDir(string $prefix) : string
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getTmpDir', array('prefix' => $prefix), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getTmpDir($prefix);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\TranslationBundle\Download\TranslationDownloader $instance) {
            unset($instance->translationServiceAdapter, $instance->translationMetricsProvider, $instance->jsTranslationDumper, $instance->translationReader, $instance->databasePersister, $instance->doctrine, $instance->kernelCacheDir, $instance->logger);
        }, $instance, 'Oro\\Bundle\\TranslationBundle\\Download\\TranslationDownloader')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\TranslationBundle\Download\TranslationServiceAdapterInterface $translationServiceAdapter, \Oro\Bundle\TranslationBundle\Download\TranslationMetricsProviderInterface $translationMetricsProvider, \Oro\Bundle\TranslationBundle\Provider\JsTranslationDumper $jsTranslationDumper, \Symfony\Component\Translation\Reader\TranslationReader $translationReader, \Oro\Bundle\TranslationBundle\Translation\DatabasePersister $translationDatabasePersister, \Doctrine\Persistence\ManagerRegistry $doctrine, string $kernelCacheDir, ?\Psr\Log\LoggerInterface $logger = null)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Download\\TranslationDownloader');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\TranslationBundle\Download\TranslationDownloader $instance) {
            unset($instance->translationServiceAdapter, $instance->translationMetricsProvider, $instance->jsTranslationDumper, $instance->translationReader, $instance->databasePersister, $instance->doctrine, $instance->kernelCacheDir, $instance->logger);
        }, $this, 'Oro\\Bundle\\TranslationBundle\\Download\\TranslationDownloader')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($translationServiceAdapter, $translationMetricsProvider, $jsTranslationDumper, $translationReader, $translationDatabasePersister, $doctrine, $kernelCacheDir, $logger);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Download\\TranslationDownloader');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Download\\TranslationDownloader');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Download\\TranslationDownloader');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Download\\TranslationDownloader');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\TranslationBundle\Download\TranslationDownloader $instance) {
            unset($instance->translationServiceAdapter, $instance->translationMetricsProvider, $instance->jsTranslationDumper, $instance->translationReader, $instance->databasePersister, $instance->doctrine, $instance->kernelCacheDir, $instance->logger);
        }, $this, 'Oro\\Bundle\\TranslationBundle\\Download\\TranslationDownloader')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('TranslationDownloader_7847ac2', false)) {
    \class_alias(__NAMESPACE__.'\\TranslationDownloader_7847ac2', 'TranslationDownloader_7847ac2', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/EventListener/Datagrid/LanguageTranslationCompletenessAndAvailabilityListener.php';

class LanguageTranslationCompletenessAndAvailabilityListener_cc7790a extends \Oro\Bundle\TranslationBundle\EventListener\Datagrid\LanguageTranslationCompletenessAndAvailabilityListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\TranslationBundle\EventListener\Datagrid\LanguageTranslationCompletenessAndAvailabilityListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function __invoke(\Oro\Bundle\DataGridBundle\Event\OrmResultAfter $event) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__invoke', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->__invoke($event);
return;
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\TranslationBundle\EventListener\Datagrid\LanguageTranslationCompletenessAndAvailabilityListener $instance) {
            unset($instance->translationMetricsProvider, $instance->doctrine);
        }, $instance, 'Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\LanguageTranslationCompletenessAndAvailabilityListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\TranslationBundle\Download\TranslationMetricsProviderInterface $translationMetricsProvider, \Doctrine\Persistence\ManagerRegistry $doctrine)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\LanguageTranslationCompletenessAndAvailabilityListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\TranslationBundle\EventListener\Datagrid\LanguageTranslationCompletenessAndAvailabilityListener $instance) {
            unset($instance->translationMetricsProvider, $instance->doctrine);
        }, $this, 'Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\LanguageTranslationCompletenessAndAvailabilityListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($translationMetricsProvider, $doctrine);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\LanguageTranslationCompletenessAndAvailabilityListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\LanguageTranslationCompletenessAndAvailabilityListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\LanguageTranslationCompletenessAndAvailabilityListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\LanguageTranslationCompletenessAndAvailabilityListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\TranslationBundle\EventListener\Datagrid\LanguageTranslationCompletenessAndAvailabilityListener $instance) {
            unset($instance->translationMetricsProvider, $instance->doctrine);
        }, $this, 'Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\LanguageTranslationCompletenessAndAvailabilityListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('LanguageTranslationCompletenessAndAvailabilityListener_cc7790a', false)) {
    \class_alias(__NAMESPACE__.'\\LanguageTranslationCompletenessAndAvailabilityListener_cc7790a', 'LanguageTranslationCompletenessAndAvailabilityListener_cc7790a', false);
}
include_once \dirname(__DIR__, 4).'/vendor/knplabs/gaufrette/src/Gaufrette/FilesystemInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/knplabs/gaufrette/src/Gaufrette/Filesystem.php';

class Filesystem_f929d5e extends \Gaufrette\Filesystem implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Gaufrette\Filesystem|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getAdapter()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAdapter', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAdapter();
    }

    public function has($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'has', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->has($key);
    }

    public function rename($sourceKey, $targetKey)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'rename', array('sourceKey' => $sourceKey, 'targetKey' => $targetKey), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->rename($sourceKey, $targetKey);
    }

    public function get($key, $create = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'get', array('key' => $key, 'create' => $create), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->get($key, $create);
    }

    public function write($key, $content, $overwrite = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'write', array('key' => $key, 'content' => $content, 'overwrite' => $overwrite), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->write($key, $content, $overwrite);
    }

    public function read($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'read', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->read($key);
    }

    public function delete($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'delete', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->delete($key);
    }

    public function keys()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'keys', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->keys();
    }

    public function listKeys($prefix = '')
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'listKeys', array('prefix' => $prefix), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->listKeys($prefix);
    }

    public function mtime($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'mtime', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->mtime($key);
    }

    public function checksum($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'checksum', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->checksum($key);
    }

    public function size($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'size', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->size($key);
    }

    public function createStream($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createStream', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createStream($key);
    }

    public function createFile($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createFile', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createFile($key);
    }

    public function mimeType($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'mimeType', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->mimeType($key);
    }

    public function clearFileRegister()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'clearFileRegister', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->clearFileRegister();
    }

    public function removeFromRegister($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'removeFromRegister', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->removeFromRegister($key);
    }

    public function isDirectory($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isDirectory', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isDirectory($key);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->adapter, $instance->fileRegister);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Gaufrette\Adapter $adapter)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Gaufrette\\Filesystem');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->adapter, $this->fileRegister);

        }

        $this->valueHoldere0de0->__construct($adapter);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Gaufrette\\Filesystem');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Gaufrette\\Filesystem');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Gaufrette\\Filesystem');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Gaufrette\\Filesystem');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->adapter, $this->fileRegister);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('Filesystem_f929d5e', false)) {
    \class_alias(__NAMESPACE__.'\\Filesystem_f929d5e', 'Filesystem_f929d5e', false);
}
include_once \dirname(__DIR__, 4).'/vendor/doctrine/persistence/lib/Doctrine/Persistence/ObjectManager.php';
include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManagerInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityBundle/ORM/OroEntityManager.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityBundle/DataCollector/ProfilingEntityManager.php';

class ProfilingEntityManager_ac1c36d extends \Oro\Bundle\EntityBundle\DataCollector\ProfilingEntityManager implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityBundle\DataCollector\ProfilingEntityManager|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function newHydrator($hydrationMode)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'newHydrator', array('hydrationMode' => $hydrationMode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->newHydrator($hydrationMode);
    }

    public function persist($entity)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'persist', array('entity' => $entity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->persist($entity);
    }

    public function detach($entity)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'detach', array('entity' => $entity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->detach($entity);
    }

    public function merge($entity)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'merge', array('entity' => $entity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->merge($entity);
    }

    public function refresh($entity)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'refresh', array('entity' => $entity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->refresh($entity);
    }

    public function remove($entity)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'remove', array('entity' => $entity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->remove($entity);
    }

    public function flush($entity = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'flush', array('entity' => $entity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->flush($entity);
    }

    public function setMetadataFactory(\Doctrine\ORM\Mapping\ClassMetadataFactory $metadataFactory)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setMetadataFactory', array('metadataFactory' => $metadataFactory), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setMetadataFactory($metadataFactory);
    }

    public function close()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'close', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->close();
    }

    public function createQuery($dql = '')
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createQuery', array('dql' => $dql), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createQuery($dql);
    }

    public function clear($entityName = null) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'clear', array('entityName' => $entityName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->clear($entityName);
return;
    }

    public function getConnection()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getConnection', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getConnection();
    }

    public function getMetadataFactory()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getMetadataFactory', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getMetadataFactory();
    }

    public function getExpressionBuilder()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getExpressionBuilder', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getExpressionBuilder();
    }

    public function beginTransaction()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'beginTransaction', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->beginTransaction();
    }

    public function getCache()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getCache', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getCache();
    }

    public function transactional($func)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'transactional', array('func' => $func), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->transactional($func);
    }

    public function wrapInTransaction(callable $func)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'wrapInTransaction', array('func' => $func), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->wrapInTransaction($func);
    }

    public function commit()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'commit', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->commit();
    }

    public function rollback()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'rollback', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->rollback();
    }

    public function getClassMetadata($className)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getClassMetadata', array('className' => $className), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getClassMetadata($className);
    }

    public function createNamedQuery($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createNamedQuery', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createNamedQuery($name);
    }

    public function createNativeQuery($sql, \Doctrine\ORM\Query\ResultSetMapping $rsm)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createNativeQuery', array('sql' => $sql, 'rsm' => $rsm), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createNativeQuery($sql, $rsm);
    }

    public function createNamedNativeQuery($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createNamedNativeQuery', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createNamedNativeQuery($name);
    }

    public function createQueryBuilder()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createQueryBuilder', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createQueryBuilder();
    }

    public function find($className, $id, $lockMode = null, $lockVersion = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'find', array('className' => $className, 'id' => $id, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->find($className, $id, $lockMode, $lockVersion);
    }

    public function getReference($entityName, $id)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getReference', array('entityName' => $entityName, 'id' => $id), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getReference($entityName, $id);
    }

    public function getPartialReference($entityName, $identifier)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getPartialReference', array('entityName' => $entityName, 'identifier' => $identifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getPartialReference($entityName, $identifier);
    }

    public function copy($entity, $deep = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'copy', array('entity' => $entity, 'deep' => $deep), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->copy($entity, $deep);
    }

    public function lock($entity, $lockMode, $lockVersion = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'lock', array('entity' => $entity, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->lock($entity, $lockMode, $lockVersion);
    }

    public function getRepository($entityName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getRepository', array('entityName' => $entityName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getRepository($entityName);
    }

    public function contains($entity)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'contains', array('entity' => $entity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->contains($entity);
    }

    public function getEventManager()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEventManager', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEventManager();
    }

    public function getConfiguration()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getConfiguration', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getConfiguration();
    }

    public function isOpen()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isOpen', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isOpen();
    }

    public function getUnitOfWork()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getUnitOfWork', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getUnitOfWork();
    }

    public function getHydrator($hydrationMode)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getHydrator', array('hydrationMode' => $hydrationMode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getHydrator($hydrationMode);
    }

    public function getProxyFactory()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProxyFactory', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProxyFactory();
    }

    public function initializeObject($obj)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeObject', array('obj' => $obj), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initializeObject($obj);
    }

    public function getFilters()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getFilters', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getFilters();
    }

    public function isFiltersStateClean()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isFiltersStateClean', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isFiltersStateClean();
    }

    public function hasFilters()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'hasFilters', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->hasFilters();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\EntityBundle\DataCollector\ProfilingEntityManager $instance) {
            unset($instance->ormLogger, $instance->loggingHydrators);
        }, $instance, 'Oro\\Bundle\\EntityBundle\\DataCollector\\ProfilingEntityManager')->__invoke($instance);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\ORM\OroEntityManager $instance) {
            unset($instance->defaultQueryCacheLifetime);
        }, $instance, 'Oro\\Bundle\\EntityBundle\\ORM\\OroEntityManager')->__invoke($instance);

        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $instance, 'Doctrine\\ORM\\EntityManager')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    protected function __construct(\Doctrine\DBAL\Connection $conn, \Doctrine\ORM\Configuration $config, \Doctrine\Common\EventManager $eventManager)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityBundle\\DataCollector\\ProfilingEntityManager');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\EntityBundle\DataCollector\ProfilingEntityManager $instance) {
            unset($instance->ormLogger, $instance->loggingHydrators);
        }, $this, 'Oro\\Bundle\\EntityBundle\\DataCollector\\ProfilingEntityManager')->__invoke($this);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\ORM\OroEntityManager $instance) {
            unset($instance->defaultQueryCacheLifetime);
        }, $this, 'Oro\\Bundle\\EntityBundle\\ORM\\OroEntityManager')->__invoke($this);

        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($conn, $config, $eventManager);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\DataCollector\\ProfilingEntityManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\DataCollector\\ProfilingEntityManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\DataCollector\\ProfilingEntityManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\DataCollector\\ProfilingEntityManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\EntityBundle\DataCollector\ProfilingEntityManager $instance) {
            unset($instance->ormLogger, $instance->loggingHydrators);
        }, $this, 'Oro\\Bundle\\EntityBundle\\DataCollector\\ProfilingEntityManager')->__invoke($this);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\ORM\OroEntityManager $instance) {
            unset($instance->defaultQueryCacheLifetime);
        }, $this, 'Oro\\Bundle\\EntityBundle\\ORM\\OroEntityManager')->__invoke($this);

        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ProfilingEntityManager_ac1c36d', false)) {
    \class_alias(__NAMESPACE__.'\\ProfilingEntityManager_ac1c36d', 'ProfilingEntityManager_ac1c36d', false);
}
include_once \dirname(__DIR__, 4).'/vendor/knplabs/knp-menu/src/Knp/Menu/Renderer/RendererInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/knplabs/knp-menu/src/Knp/Menu/Renderer/TwigRenderer.php';

class TwigRenderer_85c1049 extends \Knp\Menu\Renderer\TwigRenderer implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Knp\Menu\Renderer\TwigRenderer|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function render(\Knp\Menu\ItemInterface $item, array $options = []) : string
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'render', array('item' => $item, 'options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->render($item, $options);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Knp\Menu\Renderer\TwigRenderer $instance) {
            unset($instance->environment, $instance->matcher, $instance->defaultOptions);
        }, $instance, 'Knp\\Menu\\Renderer\\TwigRenderer')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Twig\Environment $environment, string $template, \Knp\Menu\Matcher\MatcherInterface $matcher, array $defaultOptions = [])
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Knp\\Menu\\Renderer\\TwigRenderer');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Knp\Menu\Renderer\TwigRenderer $instance) {
            unset($instance->environment, $instance->matcher, $instance->defaultOptions);
        }, $this, 'Knp\\Menu\\Renderer\\TwigRenderer')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($environment, $template, $matcher, $defaultOptions);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Knp\\Menu\\Renderer\\TwigRenderer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Knp\\Menu\\Renderer\\TwigRenderer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Knp\\Menu\\Renderer\\TwigRenderer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Knp\\Menu\\Renderer\\TwigRenderer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Knp\Menu\Renderer\TwigRenderer $instance) {
            unset($instance->environment, $instance->matcher, $instance->defaultOptions);
        }, $this, 'Knp\\Menu\\Renderer\\TwigRenderer')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('TwigRenderer_85c1049', false)) {
    \class_alias(__NAMESPACE__.'\\TwigRenderer_85c1049', 'TwigRenderer_85c1049', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/api-doc-bundle/Nelmio/ApiDocBundle/Extractor/ApiDocExtractor.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/api-doc-bundle/Nelmio/ApiDocBundle/Extractor/CachingApiDocExtractor.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Component/Routing/Resolver/RouteOptionsResolverAwareInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ApiBundle/ApiDoc/RestDocViewDetectorAwareInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ApiBundle/ApiDoc/Extractor/ApiDocExtractorTrait.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ApiBundle/ApiDoc/Extractor/CachingApiDocExtractor.php';

class CachingApiDocExtractor_ee4c584 extends \Oro\Bundle\ApiBundle\ApiDoc\Extractor\CachingApiDocExtractor implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ApiBundle\ApiDoc\Extractor\CachingApiDocExtractor|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getRoutes()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getRoutes', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getRoutes();
    }

    public function all($view = 'default')
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'all', array('view' => $view), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->all($view);
    }

    public function extractAnnotations(array $routes, $view = 'default')
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'extractAnnotations', array('routes' => $routes, 'view' => $view), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->extractAnnotations($routes, $view);
    }

    public function warmUp($view = 'default')
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'warmUp', array('view' => $view), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->warmUp($view);
    }

    public function clear($view = 'default')
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'clear', array('view' => $view), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->clear($view);
    }

    public function getReflectionMethod($controller)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getReflectionMethod', array('controller' => $controller), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getReflectionMethod($controller);
    }

    public function get($controller, $route)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'get', array('controller' => $controller, 'route' => $route), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->get($controller, $route);
    }

    public function addParser(\Nelmio\ApiDocBundle\Parser\ParserInterface $parser)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addParser', array('parser' => $parser), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->addParser($parser);
    }

    public function setRouteOptionsResolver(\Oro\Component\Routing\Resolver\RouteOptionsResolverInterface $routeOptionsResolver)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setRouteOptionsResolver', array('routeOptionsResolver' => $routeOptionsResolver), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setRouteOptionsResolver($routeOptionsResolver);
    }

    public function setRestDocViewDetector(\Oro\Bundle\ApiBundle\ApiDoc\RestDocViewDetector $docViewDetector)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setRestDocViewDetector', array('docViewDetector' => $docViewDetector), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setRestDocViewDetector($docViewDetector);
    }

    public function setApiDocAnnotationHandler(\Oro\Bundle\ApiBundle\ApiDoc\AnnotationHandler\ApiDocAnnotationHandlerInterface $apiDocAnnotationHandler)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setApiDocAnnotationHandler', array('apiDocAnnotationHandler' => $apiDocAnnotationHandler), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setApiDocAnnotationHandler($apiDocAnnotationHandler);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->cacheFile, $instance->debug, $instance->routes, $instance->routeOptionsResolver, $instance->docViewDetector, $instance->apiDocAnnotationHandler, $instance->container, $instance->router, $instance->reader, $instance->parsers, $instance->handlers, $instance->annotationsProviders);

        \Closure::bind(function (\Nelmio\ApiDocBundle\Extractor\CachingApiDocExtractor $instance) {
            unset($instance->cacheFile, $instance->debug);
        }, $instance, 'Nelmio\\ApiDocBundle\\Extractor\\CachingApiDocExtractor')->__invoke($instance);

        \Closure::bind(function (\Nelmio\ApiDocBundle\Extractor\ApiDocExtractor $instance) {
            unset($instance->commentExtractor);
        }, $instance, 'Nelmio\\ApiDocBundle\\Extractor\\ApiDocExtractor')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, \Symfony\Component\Routing\RouterInterface $router, \Doctrine\Common\Annotations\Reader $reader, \Nelmio\ApiDocBundle\Util\DocCommentExtractor $commentExtractor, array $handlers, array $annotationsProviders, $cacheFile, $debug = false)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ApiBundle\\ApiDoc\\Extractor\\CachingApiDocExtractor');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->cacheFile, $this->debug, $this->routes, $this->routeOptionsResolver, $this->docViewDetector, $this->apiDocAnnotationHandler, $this->container, $this->router, $this->reader, $this->parsers, $this->handlers, $this->annotationsProviders);

        \Closure::bind(function (\Nelmio\ApiDocBundle\Extractor\CachingApiDocExtractor $instance) {
            unset($instance->cacheFile, $instance->debug);
        }, $this, 'Nelmio\\ApiDocBundle\\Extractor\\CachingApiDocExtractor')->__invoke($this);

        \Closure::bind(function (\Nelmio\ApiDocBundle\Extractor\ApiDocExtractor $instance) {
            unset($instance->commentExtractor);
        }, $this, 'Nelmio\\ApiDocBundle\\Extractor\\ApiDocExtractor')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($container, $router, $reader, $commentExtractor, $handlers, $annotationsProviders, $cacheFile, $debug);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ApiBundle\\ApiDoc\\Extractor\\CachingApiDocExtractor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ApiBundle\\ApiDoc\\Extractor\\CachingApiDocExtractor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ApiBundle\\ApiDoc\\Extractor\\CachingApiDocExtractor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ApiBundle\\ApiDoc\\Extractor\\CachingApiDocExtractor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->cacheFile, $this->debug, $this->routes, $this->routeOptionsResolver, $this->docViewDetector, $this->apiDocAnnotationHandler, $this->container, $this->router, $this->reader, $this->parsers, $this->handlers, $this->annotationsProviders);

        \Closure::bind(function (\Nelmio\ApiDocBundle\Extractor\CachingApiDocExtractor $instance) {
            unset($instance->cacheFile, $instance->debug);
        }, $this, 'Nelmio\\ApiDocBundle\\Extractor\\CachingApiDocExtractor')->__invoke($this);

        \Closure::bind(function (\Nelmio\ApiDocBundle\Extractor\ApiDocExtractor $instance) {
            unset($instance->commentExtractor);
        }, $this, 'Nelmio\\ApiDocBundle\\Extractor\\ApiDocExtractor')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('CachingApiDocExtractor_ee4c584', false)) {
    \class_alias(__NAMESPACE__.'\\CachingApiDocExtractor_ee4c584', 'CachingApiDocExtractor_ee4c584', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Datagrid/WidgetOwnerListener.php';

class WidgetOwnerListener_c0d98ac extends \Oro\Bundle\UserBundle\Datagrid\WidgetOwnerListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\UserBundle\Datagrid\WidgetOwnerListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onResultBefore(\Oro\Bundle\DataGridBundle\Event\OrmResultBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onResultBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onResultBefore($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->ownerHelper, $instance->widgetConfigs, $instance->ownerField);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\UserBundle\Dashboard\OwnerHelper $ownerHelper, \Oro\Bundle\DashboardBundle\Model\WidgetConfigs $widgetConfigs, $ownerField)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\UserBundle\\Datagrid\\WidgetOwnerListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->ownerHelper, $this->widgetConfigs, $this->ownerField);

        }

        $this->valueHoldere0de0->__construct($ownerHelper, $widgetConfigs, $ownerField);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Datagrid\\WidgetOwnerListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Datagrid\\WidgetOwnerListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Datagrid\\WidgetOwnerListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Datagrid\\WidgetOwnerListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->ownerHelper, $this->widgetConfigs, $this->ownerField);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('WidgetOwnerListener_c0d98ac', false)) {
    \class_alias(__NAMESPACE__.'\\WidgetOwnerListener_c0d98ac', 'WidgetOwnerListener_c0d98ac', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ActivityListBundle/Filter/RelatedActivityDatagridFactory.php';

class RelatedActivityDatagridFactory_57e9779 extends \Oro\Bundle\ActivityListBundle\Filter\RelatedActivityDatagridFactory implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ActivityListBundle\Filter\RelatedActivityDatagridFactory|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function createGrid(\Oro\Bundle\QueryDesignerBundle\Model\AbstractQueryDesigner $source) : \Oro\Bundle\DataGridBundle\Datagrid\DatagridInterface
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createGrid', array('source' => $source), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createGrid($source);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\ActivityListBundle\Filter\RelatedActivityDatagridFactory $instance) {
            unset($instance->datagridConfigurationBuilder, $instance->datagridBuilder, $instance->eventDispatcher);
        }, $instance, 'Oro\\Bundle\\ActivityListBundle\\Filter\\RelatedActivityDatagridFactory')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\QueryDesignerBundle\Grid\DatagridConfigurationBuilder $datagridConfigurationBuilder, \Oro\Bundle\DataGridBundle\Datagrid\Builder $datagridBuilder, \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ActivityListBundle\\Filter\\RelatedActivityDatagridFactory');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\ActivityListBundle\Filter\RelatedActivityDatagridFactory $instance) {
            unset($instance->datagridConfigurationBuilder, $instance->datagridBuilder, $instance->eventDispatcher);
        }, $this, 'Oro\\Bundle\\ActivityListBundle\\Filter\\RelatedActivityDatagridFactory')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($datagridConfigurationBuilder, $datagridBuilder, $eventDispatcher);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ActivityListBundle\\Filter\\RelatedActivityDatagridFactory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ActivityListBundle\\Filter\\RelatedActivityDatagridFactory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ActivityListBundle\\Filter\\RelatedActivityDatagridFactory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ActivityListBundle\\Filter\\RelatedActivityDatagridFactory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\ActivityListBundle\Filter\RelatedActivityDatagridFactory $instance) {
            unset($instance->datagridConfigurationBuilder, $instance->datagridBuilder, $instance->eventDispatcher);
        }, $this, 'Oro\\Bundle\\ActivityListBundle\\Filter\\RelatedActivityDatagridFactory')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('RelatedActivityDatagridFactory_57e9779', false)) {
    \class_alias(__NAMESPACE__.'\\RelatedActivityDatagridFactory_57e9779', 'RelatedActivityDatagridFactory_57e9779', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/AddressBundle/EventListener/TranslatorCatalogueListener.php';

class TranslatorCatalogueListener_d4bb47e extends \Oro\Bundle\AddressBundle\EventListener\TranslatorCatalogueListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\AddressBundle\EventListener\TranslatorCatalogueListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onAfterCatalogueDump(\Oro\Bundle\TranslationBundle\Event\AfterCatalogueDump $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onAfterCatalogueDump', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onAfterCatalogueDump($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\AddressBundle\EventListener\TranslatorCatalogueListener $instance) {
            unset($instance->registry);
        }, $instance, 'Oro\\Bundle\\AddressBundle\\EventListener\\TranslatorCatalogueListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\Persistence\ManagerRegistry $registry)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\AddressBundle\\EventListener\\TranslatorCatalogueListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\AddressBundle\EventListener\TranslatorCatalogueListener $instance) {
            unset($instance->registry);
        }, $this, 'Oro\\Bundle\\AddressBundle\\EventListener\\TranslatorCatalogueListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($registry);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\AddressBundle\\EventListener\\TranslatorCatalogueListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\AddressBundle\\EventListener\\TranslatorCatalogueListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\AddressBundle\\EventListener\\TranslatorCatalogueListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\AddressBundle\\EventListener\\TranslatorCatalogueListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\AddressBundle\EventListener\TranslatorCatalogueListener $instance) {
            unset($instance->registry);
        }, $this, 'Oro\\Bundle\\AddressBundle\\EventListener\\TranslatorCatalogueListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('TranslatorCatalogueListener_d4bb47e', false)) {
    \class_alias(__NAMESPACE__.'\\TranslatorCatalogueListener_d4bb47e', 'TranslatorCatalogueListener_d4bb47e', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/AttachmentBundle/EventListener/AttachmentGridListener.php';

class AttachmentGridListener_a7ce2cf extends \Oro\Bundle\AttachmentBundle\EventListener\AttachmentGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\AttachmentBundle\EventListener\AttachmentGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->paramsToBind);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct($paramsToBind = [])
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\AttachmentBundle\\EventListener\\AttachmentGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->paramsToBind);

        }

        $this->valueHoldere0de0->__construct($paramsToBind);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\AttachmentBundle\\EventListener\\AttachmentGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\AttachmentBundle\\EventListener\\AttachmentGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\AttachmentBundle\\EventListener\\AttachmentGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\AttachmentBundle\\EventListener\\AttachmentGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->paramsToBind);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AttachmentGridListener_a7ce2cf', false)) {
    \class_alias(__NAMESPACE__.'\\AttachmentGridListener_a7ce2cf', 'AttachmentGridListener_a7ce2cf', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/FormBundle/Autocomplete/ConverterInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/FormBundle/Autocomplete/SearchHandlerInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Autocomplete/UserAclHandler.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/calendar-bundle/Autocomplete/UserCalendarHandler.php';

class UserCalendarHandler_fb3e7e3 extends \Oro\Bundle\CalendarBundle\Autocomplete\UserCalendarHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\CalendarBundle\Autocomplete\UserCalendarHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function convertItem($calendar)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertItem', array('calendar' => $calendar), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertItem($calendar);
    }

    public function search($query, $page, $perPage, $searchById = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'search', array('query' => $query, 'page' => $page, 'perPage' => $perPage, 'searchById' => $searchById), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->search($query, $page, $perPage, $searchById);
    }

    public function getProperties()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProperties', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProperties();
    }

    public function getEntityName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName();
    }

    public function setProperties(array $properties)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setProperties', array('properties' => $properties), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setProperties($properties);
    }

    public function setEntityNameResolver(\Oro\Bundle\EntityBundle\Provider\EntityNameResolver $entityNameResolver)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setEntityNameResolver', array('entityNameResolver' => $entityNameResolver), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setEntityNameResolver($entityNameResolver);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->aclHelper, $instance->em, $instance->pictureSourcesProvider, $instance->className, $instance->fields, $instance->entityNameResolver, $instance->entityRoutingHelper, $instance->aclVoter, $instance->builder, $instance->authorizationChecker, $instance->tokenAccessor, $instance->treeProvider);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\ORM\EntityManager $em, \Oro\Bundle\AttachmentBundle\Provider\PictureSourcesProviderInterface $pictureSourcesProvider, $className, \Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface $authorizationChecker, \Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor, \Oro\Bundle\SecurityBundle\Owner\OwnerTreeProvider $treeProvider, \Oro\Bundle\EntityBundle\Tools\EntityRoutingHelper $entityRoutingHelper, \Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper $aclHelper, ?\Oro\Bundle\SecurityBundle\Acl\Voter\AclVoterInterface $aclVoter = null)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\Autocomplete\\UserCalendarHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->aclHelper, $this->em, $this->pictureSourcesProvider, $this->className, $this->fields, $this->entityNameResolver, $this->entityRoutingHelper, $this->aclVoter, $this->builder, $this->authorizationChecker, $this->tokenAccessor, $this->treeProvider);

        }

        $this->valueHoldere0de0->__construct($em, $pictureSourcesProvider, $className, $authorizationChecker, $tokenAccessor, $treeProvider, $entityRoutingHelper, $aclHelper, $aclVoter);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\Autocomplete\\UserCalendarHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\Autocomplete\\UserCalendarHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\Autocomplete\\UserCalendarHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\Autocomplete\\UserCalendarHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->aclHelper, $this->em, $this->pictureSourcesProvider, $this->className, $this->fields, $this->entityNameResolver, $this->entityRoutingHelper, $this->aclVoter, $this->builder, $this->authorizationChecker, $this->tokenAccessor, $this->treeProvider);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('UserCalendarHandler_fb3e7e3', false)) {
    \class_alias(__NAMESPACE__.'\\UserCalendarHandler_fb3e7e3', 'UserCalendarHandler_fb3e7e3', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/calendar-bundle/EventListener/Datagrid/ActivityGridListener.php';

class ActivityGridListener_34272c6 extends \Oro\Bundle\CalendarBundle\EventListener\Datagrid\ActivityGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\CalendarBundle\EventListener\Datagrid\ActivityGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->activityManager, $instance->entityRoutingHelper, $instance->localeSettings);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\ActivityBundle\Manager\ActivityManager $activityManager, \Oro\Bundle\EntityBundle\Tools\EntityRoutingHelper $entityRoutingHelper, \Oro\Bundle\LocaleBundle\Model\LocaleSettings $localeSettings)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\EventListener\\Datagrid\\ActivityGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->activityManager, $this->entityRoutingHelper, $this->localeSettings);

        }

        $this->valueHoldere0de0->__construct($activityManager, $entityRoutingHelper, $localeSettings);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->activityManager, $this->entityRoutingHelper, $this->localeSettings);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ActivityGridListener_34272c6', false)) {
    \class_alias(__NAMESPACE__.'\\ActivityGridListener_34272c6', 'ActivityGridListener_34272c6', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/calendar-bundle/EventListener/Datagrid/SystemCalendarGridListener.php';

class SystemCalendarGridListener_a872953 extends \Oro\Bundle\CalendarBundle\EventListener\Datagrid\SystemCalendarGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\CalendarBundle\EventListener\Datagrid\SystemCalendarGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    public function getActionConfigurationClosure()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getActionConfigurationClosure', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getActionConfigurationClosure();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->authorizationChecker, $instance->tokenAccessor, $instance->calendarConfig);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface $authorizationChecker, \Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor, \Oro\Bundle\CalendarBundle\Provider\SystemCalendarConfig $calendarConfig)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\EventListener\\Datagrid\\SystemCalendarGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->authorizationChecker, $this->tokenAccessor, $this->calendarConfig);

        }

        $this->valueHoldere0de0->__construct($authorizationChecker, $tokenAccessor, $calendarConfig);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\EventListener\\Datagrid\\SystemCalendarGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\EventListener\\Datagrid\\SystemCalendarGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\EventListener\\Datagrid\\SystemCalendarGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CalendarBundle\\EventListener\\Datagrid\\SystemCalendarGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->authorizationChecker, $this->tokenAccessor, $this->calendarConfig);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('SystemCalendarGridListener_a872953', false)) {
    \class_alias(__NAMESPACE__.'\\SystemCalendarGridListener_a872953', 'SystemCalendarGridListener_a872953', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm-call-bundle/EventListener/Datagrid/CallListener.php';

class CallListener_ed0ffb4 extends \Oro\Bundle\CallBundle\EventListener\Datagrid\CallListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\CallBundle\EventListener\Datagrid\CallListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->entityManager);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\ORM\EntityManager $entityManager)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\CallBundle\\EventListener\\Datagrid\\CallListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->entityManager);

        }

        $this->valueHoldere0de0->__construct($entityManager);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CallBundle\\EventListener\\Datagrid\\CallListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CallBundle\\EventListener\\Datagrid\\CallListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CallBundle\\EventListener\\Datagrid\\CallListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CallBundle\\EventListener\\Datagrid\\CallListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->entityManager);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('CallListener_ed0ffb4', false)) {
    \class_alias(__NAMESPACE__.'\\CallListener_ed0ffb4', 'CallListener_ed0ffb4', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm-call-bundle/EventListener/Datagrid/ActivityGridListener.php';

class ActivityGridListener_f3e2c4f extends \Oro\Bundle\CallBundle\EventListener\Datagrid\ActivityGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\CallBundle\EventListener\Datagrid\ActivityGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->activityManager, $instance->entityRoutingHelper);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\ActivityBundle\Manager\ActivityManager $activityManager, \Oro\Bundle\EntityBundle\Tools\EntityRoutingHelper $entityRoutingHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\CallBundle\\EventListener\\Datagrid\\ActivityGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->activityManager, $this->entityRoutingHelper);

        }

        $this->valueHoldere0de0->__construct($activityManager, $entityRoutingHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CallBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CallBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CallBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CallBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->activityManager, $this->entityRoutingHelper);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ActivityGridListener_f3e2c4f', false)) {
    \class_alias(__NAMESPACE__.'\\ActivityGridListener_f3e2c4f', 'ActivityGridListener_f3e2c4f', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Config/ConfigManager.php';

class ConfigManager_0478e9a extends \Oro\Bundle\ConfigBundle\Config\ConfigManager implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ConfigBundle\Config\ConfigManager|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function addManager(string $scope, \Oro\Bundle\ConfigBundle\Config\AbstractScopeManager $manager) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addManager', array('scope' => $scope, 'manager' => $manager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->addManager($scope, $manager);
return;
    }

    public function getScopeId()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getScopeId', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getScopeId();
    }

    public function setScopeIdFromEntity($entity)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setScopeIdFromEntity', array('entity' => $entity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setScopeIdFromEntity($entity);
    }

    public function setScopeId($scopeId)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setScopeId', array('scopeId' => $scopeId), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setScopeId($scopeId);
    }

    public function getScopeEntityName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getScopeEntityName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getScopeEntityName();
    }

    public function getScopeInfo()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getScopeInfo', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getScopeInfo();
    }

    public function get($name, $default = false, $full = false, $scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'get', array('name' => $name, 'default' => $default, 'full' => $full, 'scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->get($name, $default, $full, $scopeIdentifier);
    }

    public function getValues($name, array $scopeIdentifiers, $default = false, $full = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getValues', array('name' => $name, 'scopeIdentifiers' => $scopeIdentifiers, 'default' => $default, 'full' => $full), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getValues($name, $scopeIdentifiers, $default, $full);
    }

    public function getInfo($name, $scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getInfo', array('name' => $name, 'scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getInfo($name, $scopeIdentifier);
    }

    public function set($name, $value, $scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'set', array('name' => $name, 'value' => $value, 'scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->set($name, $value, $scopeIdentifier);
    }

    public function reset($name, $scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'reset', array('name' => $name, 'scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->reset($name, $scopeIdentifier);
    }

    public function deleteScope($scopeIdentifier) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'deleteScope', array('scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->deleteScope($scopeIdentifier);
return;
    }

    public function flush($scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'flush', array('scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->flush($scopeIdentifier);
    }

    public function save($settings, $scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'save', array('settings' => $settings, 'scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->save($settings, $scopeIdentifier);
    }

    public function calculateChangeSet(array $settings, $scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'calculateChangeSet', array('settings' => $settings, 'scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->calculateChangeSet($settings, $scopeIdentifier);
    }

    public function reload($scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'reload', array('scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->reload($scopeIdentifier);
    }

    public function getSettingsByForm(\Symfony\Component\Form\FormInterface $form)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getSettingsByForm', array('form' => $form), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getSettingsByForm($form);
    }

    public function getSettingsDefaults($name, $full = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getSettingsDefaults', array('name' => $name, 'full' => $full), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getSettingsDefaults($name, $full);
    }

    public function getMergedWithParentValue($value, $name, $full = false, $scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getMergedWithParentValue', array('value' => $value, 'name' => $name, 'full' => $full, 'scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getMergedWithParentValue($value, $name, $full, $scopeIdentifier);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->settings, $instance->managers, $instance->defaultManagers, $instance->scope, $instance->eventDispatcher);

        \Closure::bind(function (\Oro\Bundle\ConfigBundle\Config\ConfigManager $instance) {
            unset($instance->memoryCache);
        }, $instance, 'Oro\\Bundle\\ConfigBundle\\Config\\ConfigManager')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(string $scope, \Oro\Bundle\ConfigBundle\Config\ConfigDefinitionImmutableBag $configDefinition, \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher, \Oro\Bundle\CacheBundle\Provider\MemoryCache $memoryCache)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ConfigBundle\\Config\\ConfigManager');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->settings, $this->managers, $this->defaultManagers, $this->scope, $this->eventDispatcher);

        \Closure::bind(function (\Oro\Bundle\ConfigBundle\Config\ConfigManager $instance) {
            unset($instance->memoryCache);
        }, $this, 'Oro\\Bundle\\ConfigBundle\\Config\\ConfigManager')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($scope, $configDefinition, $eventDispatcher, $memoryCache);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ConfigBundle\\Config\\ConfigManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ConfigBundle\\Config\\ConfigManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ConfigBundle\\Config\\ConfigManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ConfigBundle\\Config\\ConfigManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->settings, $this->managers, $this->defaultManagers, $this->scope, $this->eventDispatcher);

        \Closure::bind(function (\Oro\Bundle\ConfigBundle\Config\ConfigManager $instance) {
            unset($instance->memoryCache);
        }, $this, 'Oro\\Bundle\\ConfigBundle\\Config\\ConfigManager')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ConfigManager_0478e9a', false)) {
    \class_alias(__NAMESPACE__.'\\ConfigManager_0478e9a', 'ConfigManager_0478e9a', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Provider/ProviderInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Provider/AbstractProvider.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ConfigBundle/Provider/SystemConfigurationFormProvider.php';

class SystemConfigurationFormProvider_ae7f894 extends \Oro\Bundle\ConfigBundle\Provider\SystemConfigurationFormProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ConfigBundle\Provider\SystemConfigurationFormProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getTree()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getTree', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getTree();
    }

    public function getJsTree()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getJsTree', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getJsTree();
    }

    public function setFeatureChecker(\Oro\Bundle\FeatureToggleBundle\Checker\FeatureChecker $featureChecker)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setFeatureChecker', array('featureChecker' => $featureChecker), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setFeatureChecker($featureChecker);
    }

    public function getApiTree($path = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getApiTree', array('path' => $path), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getApiTree($path);
    }

    public function getSubtree($subtreeRootName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getSubtree', array('subtreeRootName' => $subtreeRootName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getSubtree($subtreeRootName);
    }

    public function buildJsTreeItem($name, $parentName, array $node)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'buildJsTreeItem', array('name' => $name, 'parentName' => $parentName, 'node' => $node), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->buildJsTreeItem($name, $parentName, $node);
    }

    public function getDataTransformer($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDataTransformer', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDataTransformer($key);
    }

    public function getForm($group)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getForm', array('group' => $group), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getForm($group);
    }

    public function chooseActiveGroups($activeGroup, $activeSubGroup)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'chooseActiveGroups', array('activeGroup' => $activeGroup, 'activeSubGroup' => $activeSubGroup), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->chooseActiveGroups($activeGroup, $activeSubGroup);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->configBag, $instance->processedTrees, $instance->processedJsTrees, $instance->processedSubTrees, $instance->featureChecker, $instance->translator, $instance->factory, $instance->authorizationChecker, $instance->searchProvider, $instance->formRegistry);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\ConfigBundle\Config\ConfigBag $configBag, \Symfony\Contracts\Translation\TranslatorInterface $translator, \Symfony\Component\Form\FormFactoryInterface $factory, \Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface $authorizationChecker, \Oro\Bundle\ConfigBundle\Provider\ChainSearchProvider $searchProvider, \Symfony\Component\Form\FormRegistryInterface $formRegistry)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ConfigBundle\\Provider\\SystemConfigurationFormProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->configBag, $this->processedTrees, $this->processedJsTrees, $this->processedSubTrees, $this->featureChecker, $this->translator, $this->factory, $this->authorizationChecker, $this->searchProvider, $this->formRegistry);

        }

        $this->valueHoldere0de0->__construct($configBag, $translator, $factory, $authorizationChecker, $searchProvider, $formRegistry);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ConfigBundle\\Provider\\SystemConfigurationFormProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ConfigBundle\\Provider\\SystemConfigurationFormProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ConfigBundle\\Provider\\SystemConfigurationFormProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ConfigBundle\\Provider\\SystemConfigurationFormProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->configBag, $this->processedTrees, $this->processedJsTrees, $this->processedSubTrees, $this->featureChecker, $this->translator, $this->factory, $this->authorizationChecker, $this->searchProvider, $this->formRegistry);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('SystemConfigurationFormProvider_ae7f894', false)) {
    \class_alias(__NAMESPACE__.'\\SystemConfigurationFormProvider_ae7f894', 'SystemConfigurationFormProvider_ae7f894', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm/src/Oro/Bundle/ContactUsBundle/Autocomplete/ContactReasonSearchHandler.php';

class ContactReasonSearchHandler_b36e739 extends \Oro\Bundle\ContactUsBundle\Autocomplete\ContactReasonSearchHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ContactUsBundle\Autocomplete\ContactReasonSearchHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function search($query, $page, $perPage, $searchById = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'search', array('query' => $query, 'page' => $page, 'perPage' => $perPage, 'searchById' => $searchById), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->search($query, $page, $perPage, $searchById);
    }

    public function getProperties()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProperties', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProperties();
    }

    public function getEntityName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName();
    }

    public function convertItem($item)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertItem', array('item' => $item), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertItem($item);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\ContactUsBundle\Autocomplete\ContactReasonSearchHandler $instance) {
            unset($instance->doctrineHelper, $instance->propertyAccessor, $instance->displayFields);
        }, $instance, 'Oro\\Bundle\\ContactUsBundle\\Autocomplete\\ContactReasonSearchHandler')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityBundle\ORM\DoctrineHelper $doctrineHelper, \Symfony\Component\PropertyAccess\PropertyAccessor $propertyAccessor)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ContactUsBundle\\Autocomplete\\ContactReasonSearchHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\ContactUsBundle\Autocomplete\ContactReasonSearchHandler $instance) {
            unset($instance->doctrineHelper, $instance->propertyAccessor, $instance->displayFields);
        }, $this, 'Oro\\Bundle\\ContactUsBundle\\Autocomplete\\ContactReasonSearchHandler')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($doctrineHelper, $propertyAccessor);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ContactUsBundle\\Autocomplete\\ContactReasonSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ContactUsBundle\\Autocomplete\\ContactReasonSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ContactUsBundle\\Autocomplete\\ContactReasonSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ContactUsBundle\\Autocomplete\\ContactReasonSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\ContactUsBundle\Autocomplete\ContactReasonSearchHandler $instance) {
            unset($instance->doctrineHelper, $instance->propertyAccessor, $instance->displayFields);
        }, $this, 'Oro\\Bundle\\ContactUsBundle\\Autocomplete\\ContactReasonSearchHandler')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ContactReasonSearchHandler_b36e739', false)) {
    \class_alias(__NAMESPACE__.'\\ContactReasonSearchHandler_b36e739', 'ContactReasonSearchHandler_b36e739', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/CurrencyBundle/Provider/CurrencyListProviderInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/CurrencyBundle/Provider/DefaultCurrencyProviderInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/CurrencyBundle/Provider/CurrencyProviderInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/CurrencyBundle/Config/DefaultCurrencyConfigProvider.php';

class DefaultCurrencyConfigProvider_01eb7e5 extends \Oro\Bundle\CurrencyBundle\Config\DefaultCurrencyConfigProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\CurrencyBundle\Config\DefaultCurrencyConfigProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getDefaultCurrency()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDefaultCurrency', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDefaultCurrency();
    }

    public function getCurrencyList()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getCurrencyList', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getCurrencyList();
    }

    public function getCurrencies()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getCurrencies', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getCurrencies();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->configManager);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\ConfigBundle\Config\ConfigManager $configManager)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\CurrencyBundle\\Config\\DefaultCurrencyConfigProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->configManager);

        }

        $this->valueHoldere0de0->__construct($configManager);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CurrencyBundle\\Config\\DefaultCurrencyConfigProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CurrencyBundle\\Config\\DefaultCurrencyConfigProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CurrencyBundle\\Config\\DefaultCurrencyConfigProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CurrencyBundle\\Config\\DefaultCurrencyConfigProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->configManager);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('DefaultCurrencyConfigProvider_01eb7e5', false)) {
    \class_alias(__NAMESPACE__.'\\DefaultCurrencyConfigProvider_01eb7e5', 'DefaultCurrencyConfigProvider_01eb7e5', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/CurrencyBundle/Provider/ViewTypeProviderInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/CurrencyBundle/Provider/ViewTypeConfigProvider.php';

class ViewTypeConfigProvider_7122df5 extends \Oro\Bundle\CurrencyBundle\Provider\ViewTypeConfigProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\CurrencyBundle\Provider\ViewTypeConfigProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getViewType()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getViewType', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getViewType();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->configManager, $instance->viewType);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\ConfigBundle\Config\ConfigManager $configManager)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\CurrencyBundle\\Provider\\ViewTypeConfigProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->configManager, $this->viewType);

        }

        $this->valueHoldere0de0->__construct($configManager);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CurrencyBundle\\Provider\\ViewTypeConfigProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CurrencyBundle\\Provider\\ViewTypeConfigProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CurrencyBundle\\Provider\\ViewTypeConfigProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\CurrencyBundle\\Provider\\ViewTypeConfigProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->configManager, $this->viewType);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ViewTypeConfigProvider_7122df5', false)) {
    \class_alias(__NAMESPACE__.'\\ViewTypeConfigProvider_7122df5', 'ViewTypeConfigProvider_7122df5', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DashboardBundle/Model/Factory.php';

class Factory_58a8560 extends \Oro\Bundle\DashboardBundle\Model\Factory implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DashboardBundle\Model\Factory|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function createDashboardModel(\Oro\Bundle\DashboardBundle\Entity\Dashboard $dashboard)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createDashboardModel', array('dashboard' => $dashboard), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createDashboardModel($dashboard);
    }

    public function createWidgetModel(\Oro\Bundle\DashboardBundle\Entity\Widget $widget)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createWidgetModel', array('widget' => $widget), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createWidgetModel($widget);
    }

    public function createVisibleWidgetModel(\Oro\Bundle\DashboardBundle\Entity\Widget $widget)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createVisibleWidgetModel', array('widget' => $widget), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createVisibleWidgetModel($widget);
    }

    public function createWidgetCollection(\Oro\Bundle\DashboardBundle\Entity\Dashboard $dashboard)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createWidgetCollection', array('dashboard' => $dashboard), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createWidgetCollection($dashboard);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->configProvider, $instance->stateManager, $instance->widgetConfigs);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\DashboardBundle\Model\ConfigProvider $configProvider, \Oro\Bundle\DashboardBundle\Model\StateManager $stateManager, \Oro\Bundle\DashboardBundle\Model\WidgetConfigs $widgetConfigs)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DashboardBundle\\Model\\Factory');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->configProvider, $this->stateManager, $this->widgetConfigs);

        }

        $this->valueHoldere0de0->__construct($configProvider, $stateManager, $widgetConfigs);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DashboardBundle\\Model\\Factory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DashboardBundle\\Model\\Factory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DashboardBundle\\Model\\Factory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DashboardBundle\\Model\\Factory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->configProvider, $this->stateManager, $this->widgetConfigs);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('Factory_58a8560', false)) {
    \class_alias(__NAMESPACE__.'\\Factory_58a8560', 'Factory_58a8560', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/EventListener/AuditGridDataListener.php';

class AuditGridDataListener_235acc2 extends \Oro\Bundle\DataAuditBundle\EventListener\AuditGridDataListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DataAuditBundle\EventListener\AuditGridDataListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function addDataSupport(\Oro\Bundle\DataGridBundle\Event\OrmResultAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addDataSupport', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->addDataSupport($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\DataAuditBundle\EventListener\AuditGridDataListener $instance) {
            unset($instance->doctrineHelper, $instance->fieldsTransformer);
        }, $instance, 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridDataListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityBundle\ORM\DoctrineHelper $doctrineHelper, \Oro\Bundle\DataAuditBundle\Model\FieldsTransformer $fieldsTransformer)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridDataListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\DataAuditBundle\EventListener\AuditGridDataListener $instance) {
            unset($instance->doctrineHelper, $instance->fieldsTransformer);
        }, $this, 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridDataListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($doctrineHelper, $fieldsTransformer);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridDataListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridDataListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridDataListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridDataListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\DataAuditBundle\EventListener\AuditGridDataListener $instance) {
            unset($instance->doctrineHelper, $instance->fieldsTransformer);
        }, $this, 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridDataListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AuditGridDataListener_235acc2', false)) {
    \class_alias(__NAMESPACE__.'\\AuditGridDataListener_235acc2', 'AuditGridDataListener_235acc2', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/EventListener/AuditGridImpersonationListener.php';

class AuditGridImpersonationListener_f7cd90f extends \Oro\Bundle\DataAuditBundle\EventListener\AuditGridImpersonationListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DataAuditBundle\EventListener\AuditGridImpersonationListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function addImpersonationSupport(\Oro\Bundle\DataGridBundle\Event\OrmResultAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addImpersonationSupport', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->addImpersonationSupport($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\DataAuditBundle\EventListener\AuditGridImpersonationListener $instance) {
            unset($instance->doctrineHelper);
        }, $instance, 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridImpersonationListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityBundle\ORM\DoctrineHelper $doctrineHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridImpersonationListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\DataAuditBundle\EventListener\AuditGridImpersonationListener $instance) {
            unset($instance->doctrineHelper);
        }, $this, 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridImpersonationListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($doctrineHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridImpersonationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridImpersonationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridImpersonationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridImpersonationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\DataAuditBundle\EventListener\AuditGridImpersonationListener $instance) {
            unset($instance->doctrineHelper);
        }, $this, 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridImpersonationListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AuditGridImpersonationListener_f7cd90f', false)) {
    \class_alias(__NAMESPACE__.'\\AuditGridImpersonationListener_f7cd90f', 'AuditGridImpersonationListener_f7cd90f', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/EventListener/AuditGridOrganizationListener.php';

class AuditGridOrganizationListener_ac09c08 extends \Oro\Bundle\DataAuditBundle\EventListener\AuditGridOrganizationListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DataAuditBundle\EventListener\AuditGridOrganizationListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function addOrganizationSupport(\Oro\Bundle\DataGridBundle\Event\OrmResultAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addOrganizationSupport', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->addOrganizationSupport($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\DataAuditBundle\EventListener\AuditGridOrganizationListener $instance) {
            unset($instance->doctrineHelper);
        }, $instance, 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridOrganizationListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityBundle\ORM\DoctrineHelper $doctrineHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridOrganizationListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\DataAuditBundle\EventListener\AuditGridOrganizationListener $instance) {
            unset($instance->doctrineHelper);
        }, $this, 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridOrganizationListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($doctrineHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridOrganizationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridOrganizationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridOrganizationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridOrganizationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\DataAuditBundle\EventListener\AuditGridOrganizationListener $instance) {
            unset($instance->doctrineHelper);
        }, $this, 'Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditGridOrganizationListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AuditGridOrganizationListener_ac09c08', false)) {
    \class_alias(__NAMESPACE__.'\\AuditGridOrganizationListener_ac09c08', 'AuditGridOrganizationListener_ac09c08', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataAuditBundle/EventListener/AuditHistoryGridListener.php';

class AuditHistoryGridListener_61ecea7 extends \Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DataAuditBundle\EventListener\AuditHistoryGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->paramsToBind);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct($paramsToBind = [])
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditHistoryGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->paramsToBind);

        }

        $this->valueHoldere0de0->__construct($paramsToBind);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditHistoryGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditHistoryGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditHistoryGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataAuditBundle\\EventListener\\AuditHistoryGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->paramsToBind);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AuditHistoryGridListener_61ecea7', false)) {
    \class_alias(__NAMESPACE__.'\\AuditHistoryGridListener_61ecea7', 'AuditHistoryGridListener_61ecea7', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/CacheBundle/Provider/MemoryCacheProviderAwareInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/CacheBundle/Provider/MemoryCacheProviderAwareTrait.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Datagrid/Builder.php';

class Builder_7487c02 extends \Oro\Bundle\DataGridBundle\Datagrid\Builder implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DataGridBundle\Datagrid\Builder|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function build(\Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration $config, \Oro\Bundle\DataGridBundle\Datagrid\ParameterBag $parameters, array $additionalParameters = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'build', array('config' => $config, 'parameters' => $parameters, 'additionalParameters' => $additionalParameters), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->build($config, $parameters, $additionalParameters);
    }

    public function setMemoryCacheProvider(?\Oro\Bundle\CacheBundle\Provider\MemoryCacheProviderInterface $memoryCacheProvider) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setMemoryCacheProvider', array('memoryCacheProvider' => $memoryCacheProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->setMemoryCacheProvider($memoryCacheProvider);
return;
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Datagrid\Builder $instance) {
            unset($instance->baseDatagridClass, $instance->acceptorClass, $instance->eventDispatcher, $instance->dataSources, $instance->extensions, $instance->memoryCacheProvider);
        }, $instance, 'Oro\\Bundle\\DataGridBundle\\Datagrid\\Builder')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(string $baseDatagridClass, string $acceptorClass, \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher, \Psr\Container\ContainerInterface $dataSources, iterable $extensions)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Datagrid\\Builder');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Datagrid\Builder $instance) {
            unset($instance->baseDatagridClass, $instance->acceptorClass, $instance->eventDispatcher, $instance->dataSources, $instance->extensions, $instance->memoryCacheProvider);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Datagrid\\Builder')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($baseDatagridClass, $acceptorClass, $eventDispatcher, $dataSources, $extensions);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Datagrid\\Builder');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Datagrid\\Builder');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Datagrid\\Builder');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Datagrid\\Builder');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Datagrid\Builder $instance) {
            unset($instance->baseDatagridClass, $instance->acceptorClass, $instance->eventDispatcher, $instance->dataSources, $instance->extensions, $instance->memoryCacheProvider);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Datagrid\\Builder')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('Builder_7487c02', false)) {
    \class_alias(__NAMESPACE__.'\\Builder_7487c02', 'Builder_7487c02', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Converter/DataConverterInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Context/ContextAwareInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/ImportExport/DatagridDataConverter.php';

class DatagridDataConverter_1687c96 extends \Oro\Bundle\DataGridBundle\ImportExport\DatagridDataConverter implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DataGridBundle\ImportExport\DatagridDataConverter|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function convertToExportFormat(array $exportedRecord, $skipNullValues = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertToExportFormat', array('exportedRecord' => $exportedRecord, 'skipNullValues' => $skipNullValues), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertToExportFormat($exportedRecord, $skipNullValues);
    }

    public function convertToImportFormat(array $importedRecord, $skipNullValues = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertToImportFormat', array('importedRecord' => $importedRecord, 'skipNullValues' => $skipNullValues), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertToImportFormat($importedRecord, $skipNullValues);
    }

    public function setImportExportContext(\Oro\Bundle\ImportExportBundle\Context\ContextInterface $context)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setImportExportContext', array('context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setImportExportContext($context);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->translator, $instance->formatterProvider, $instance->context, $instance->formatters);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\ImportExport\DatagridDataConverter $instance) {
            unset($instance->datagridColumnsFromContextProvider, $instance->gridColumns);
        }, $instance, 'Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridDataConverter')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\DataGridBundle\ImportExport\DatagridColumnsFromContextProviderInterface $datagridColumnsFromContextProvider, \Symfony\Contracts\Translation\TranslatorInterface $translator, \Oro\Bundle\ImportExportBundle\Formatter\FormatterProvider $formatterProvider)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridDataConverter');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->translator, $this->formatterProvider, $this->context, $this->formatters);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\ImportExport\DatagridDataConverter $instance) {
            unset($instance->datagridColumnsFromContextProvider, $instance->gridColumns);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridDataConverter')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($datagridColumnsFromContextProvider, $translator, $formatterProvider);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridDataConverter');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridDataConverter');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridDataConverter');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridDataConverter');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->translator, $this->formatterProvider, $this->context, $this->formatters);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\ImportExport\DatagridDataConverter $instance) {
            unset($instance->datagridColumnsFromContextProvider, $instance->gridColumns);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridDataConverter')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('DatagridDataConverter_1687c96', false)) {
    \class_alias(__NAMESPACE__.'\\DatagridDataConverter_1687c96', 'DatagridDataConverter_1687c96', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/ImportExport/DatagridColumnsFromContextProviderInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/ImportExport/DatagridColumnsFromContextProvider.php';

class DatagridColumnsFromContextProvider_ce17b4d extends \Oro\Bundle\DataGridBundle\ImportExport\DatagridColumnsFromContextProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DataGridBundle\ImportExport\DatagridColumnsFromContextProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getColumnsFromContext(\Oro\Bundle\ImportExportBundle\Context\ContextInterface $context) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getColumnsFromContext', array('context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getColumnsFromContext($context);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\ImportExport\DatagridColumnsFromContextProvider $instance) {
            unset($instance->datagridManager, $instance->columnsStateProvider);
        }, $instance, 'Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridColumnsFromContextProvider')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\DataGridBundle\Datagrid\Manager $datagridManager, \Oro\Bundle\DataGridBundle\Provider\State\DatagridStateProviderInterface $columnsStateProvider)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridColumnsFromContextProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\DataGridBundle\ImportExport\DatagridColumnsFromContextProvider $instance) {
            unset($instance->datagridManager, $instance->columnsStateProvider);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridColumnsFromContextProvider')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($datagridManager, $columnsStateProvider);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridColumnsFromContextProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridColumnsFromContextProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridColumnsFromContextProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridColumnsFromContextProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\DataGridBundle\ImportExport\DatagridColumnsFromContextProvider $instance) {
            unset($instance->datagridManager, $instance->columnsStateProvider);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\ImportExport\\DatagridColumnsFromContextProvider')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('DatagridColumnsFromContextProvider_ce17b4d', false)) {
    \class_alias(__NAMESPACE__.'\\DatagridColumnsFromContextProvider_ce17b4d', 'DatagridColumnsFromContextProvider_ce17b4d', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Provider/State/DatagridStateProviderInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Provider/State/AbstractStateProvider.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Provider/State/ColumnsStateProvider.php';

class ColumnsStateProvider_621bf62 extends \Oro\Bundle\DataGridBundle\Provider\State\ColumnsStateProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DataGridBundle\Provider\State\ColumnsStateProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getState(\Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration $datagridConfiguration, \Oro\Bundle\DataGridBundle\Datagrid\ParameterBag $datagridParameters) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getState', array('datagridConfiguration' => $datagridConfiguration, 'datagridParameters' => $datagridParameters), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getState($datagridConfiguration, $datagridParameters);
    }

    public function getStateFromParameters(\Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration $datagridConfiguration, \Oro\Bundle\DataGridBundle\Datagrid\ParameterBag $datagridParameters) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getStateFromParameters', array('datagridConfiguration' => $datagridConfiguration, 'datagridParameters' => $datagridParameters), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getStateFromParameters($datagridConfiguration, $datagridParameters);
    }

    public function getDefaultState(\Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration $datagridConfiguration) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDefaultState', array('datagridConfiguration' => $datagridConfiguration), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDefaultState($datagridConfiguration);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\ColumnsStateProvider $instance) {
            unset($instance->datagridParametersHelper);
        }, $instance, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\ColumnsStateProvider')->__invoke($instance);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\AbstractStateProvider $instance) {
            unset($instance->tokenAccessor, $instance->gridViewManager, $instance->defaultGridView);
        }, $instance, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\AbstractStateProvider')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\DataGridBundle\Entity\Manager\GridViewManager $gridViewManager, \Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor, \Oro\Bundle\DataGridBundle\Tools\DatagridParametersHelper $datagridParametersHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Provider\\State\\ColumnsStateProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\ColumnsStateProvider $instance) {
            unset($instance->datagridParametersHelper);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\ColumnsStateProvider')->__invoke($this);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\AbstractStateProvider $instance) {
            unset($instance->tokenAccessor, $instance->gridViewManager, $instance->defaultGridView);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\AbstractStateProvider')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($gridViewManager, $tokenAccessor, $datagridParametersHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Provider\\State\\ColumnsStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Provider\\State\\ColumnsStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Provider\\State\\ColumnsStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Provider\\State\\ColumnsStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\ColumnsStateProvider $instance) {
            unset($instance->datagridParametersHelper);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\ColumnsStateProvider')->__invoke($this);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\AbstractStateProvider $instance) {
            unset($instance->tokenAccessor, $instance->gridViewManager, $instance->defaultGridView);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\AbstractStateProvider')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ColumnsStateProvider_621bf62', false)) {
    \class_alias(__NAMESPACE__.'\\ColumnsStateProvider_621bf62', 'ColumnsStateProvider_621bf62', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DataGridBundle/Provider/State/SortersStateProvider.php';

class SortersStateProvider_7f73399 extends \Oro\Bundle\DataGridBundle\Provider\State\SortersStateProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DataGridBundle\Provider\State\SortersStateProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getState(\Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration $datagridConfiguration, \Oro\Bundle\DataGridBundle\Datagrid\ParameterBag $datagridParameters) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getState', array('datagridConfiguration' => $datagridConfiguration, 'datagridParameters' => $datagridParameters), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getState($datagridConfiguration, $datagridParameters);
    }

    public function getStateFromParameters(\Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration $datagridConfiguration, \Oro\Bundle\DataGridBundle\Datagrid\ParameterBag $datagridParameters) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getStateFromParameters', array('datagridConfiguration' => $datagridConfiguration, 'datagridParameters' => $datagridParameters), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getStateFromParameters($datagridConfiguration, $datagridParameters);
    }

    public function getDefaultState(\Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration $datagridConfiguration) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDefaultState', array('datagridConfiguration' => $datagridConfiguration), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDefaultState($datagridConfiguration);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\SortersStateProvider $instance) {
            unset($instance->datagridParametersHelper);
        }, $instance, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\SortersStateProvider')->__invoke($instance);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\AbstractStateProvider $instance) {
            unset($instance->tokenAccessor, $instance->gridViewManager, $instance->defaultGridView);
        }, $instance, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\AbstractStateProvider')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\DataGridBundle\Entity\Manager\GridViewManager $gridViewManager, \Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor, \Oro\Bundle\DataGridBundle\Tools\DatagridParametersHelper $datagridParametersHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Provider\\State\\SortersStateProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\SortersStateProvider $instance) {
            unset($instance->datagridParametersHelper);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\SortersStateProvider')->__invoke($this);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\AbstractStateProvider $instance) {
            unset($instance->tokenAccessor, $instance->gridViewManager, $instance->defaultGridView);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\AbstractStateProvider')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($gridViewManager, $tokenAccessor, $datagridParametersHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Provider\\State\\SortersStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Provider\\State\\SortersStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Provider\\State\\SortersStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DataGridBundle\\Provider\\State\\SortersStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\SortersStateProvider $instance) {
            unset($instance->datagridParametersHelper);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\SortersStateProvider')->__invoke($this);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\AbstractStateProvider $instance) {
            unset($instance->tokenAccessor, $instance->gridViewManager, $instance->defaultGridView);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\AbstractStateProvider')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('SortersStateProvider_7f73399', false)) {
    \class_alias(__NAMESPACE__.'\\SortersStateProvider_7f73399', 'SortersStateProvider_7f73399', false);
}
include_once \dirname(__DIR__, 4).'/vendor/composer/composer/src/Composer/Composer.php';

class Composer_4dac97c extends \Composer\Composer implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Composer\Composer|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setPackage(\Composer\Package\RootPackageInterface $package)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setPackage', array('package' => $package), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setPackage($package);
    }

    public function getPackage()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getPackage', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getPackage();
    }

    public function setConfig(\Composer\Config $config)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setConfig', array('config' => $config), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setConfig($config);
    }

    public function getConfig()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getConfig', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getConfig();
    }

    public function setLocker(\Composer\Package\Locker $locker)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLocker', array('locker' => $locker), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLocker($locker);
    }

    public function getLocker()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getLocker', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getLocker();
    }

    public function setLoop(\Composer\Util\Loop $loop)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLoop', array('loop' => $loop), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLoop($loop);
    }

    public function getLoop()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getLoop', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getLoop();
    }

    public function setRepositoryManager(\Composer\Repository\RepositoryManager $manager)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setRepositoryManager', array('manager' => $manager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setRepositoryManager($manager);
    }

    public function getRepositoryManager()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getRepositoryManager', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getRepositoryManager();
    }

    public function setDownloadManager(\Composer\Downloader\DownloadManager $manager)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setDownloadManager', array('manager' => $manager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setDownloadManager($manager);
    }

    public function getDownloadManager()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDownloadManager', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDownloadManager();
    }

    public function setArchiveManager(\Composer\Package\Archiver\ArchiveManager $manager)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setArchiveManager', array('manager' => $manager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setArchiveManager($manager);
    }

    public function getArchiveManager()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getArchiveManager', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getArchiveManager();
    }

    public function setInstallationManager(\Composer\Installer\InstallationManager $manager)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setInstallationManager', array('manager' => $manager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setInstallationManager($manager);
    }

    public function getInstallationManager()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getInstallationManager', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getInstallationManager();
    }

    public function setPluginManager(\Composer\Plugin\PluginManager $manager)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setPluginManager', array('manager' => $manager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setPluginManager($manager);
    }

    public function getPluginManager()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getPluginManager', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getPluginManager();
    }

    public function setEventDispatcher(\Composer\EventDispatcher\EventDispatcher $eventDispatcher)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setEventDispatcher', array('eventDispatcher' => $eventDispatcher), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setEventDispatcher($eventDispatcher);
    }

    public function getEventDispatcher()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEventDispatcher', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEventDispatcher();
    }

    public function setAutoloadGenerator(\Composer\Autoload\AutoloadGenerator $autoloadGenerator)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setAutoloadGenerator', array('autoloadGenerator' => $autoloadGenerator), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setAutoloadGenerator($autoloadGenerator);
    }

    public function getAutoloadGenerator()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAutoloadGenerator', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAutoloadGenerator();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Composer\Composer $instance) {
            unset($instance->package, $instance->locker, $instance->loop, $instance->repositoryManager, $instance->downloadManager, $instance->installationManager, $instance->pluginManager, $instance->config, $instance->eventDispatcher, $instance->autoloadGenerator, $instance->archiveManager);
        }, $instance, 'Composer\\Composer')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct()
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Composer\\Composer');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Composer\Composer $instance) {
            unset($instance->package, $instance->locker, $instance->loop, $instance->repositoryManager, $instance->downloadManager, $instance->installationManager, $instance->pluginManager, $instance->config, $instance->eventDispatcher, $instance->autoloadGenerator, $instance->archiveManager);
        }, $this, 'Composer\\Composer')->__invoke($this);

        }
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Composer\\Composer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Composer\\Composer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Composer\\Composer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Composer\\Composer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Composer\Composer $instance) {
            unset($instance->package, $instance->locker, $instance->loop, $instance->repositoryManager, $instance->downloadManager, $instance->installationManager, $instance->pluginManager, $instance->config, $instance->eventDispatcher, $instance->autoloadGenerator, $instance->archiveManager);
        }, $this, 'Composer\\Composer')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('Composer_4dac97c', false)) {
    \class_alias(__NAMESPACE__.'\\Composer_4dac97c', 'Composer_4dac97c', false);
}
include_once \dirname(__DIR__, 4).'/vendor/composer/composer/src/Composer/Installer/InstallationManager.php';

class InstallationManager_f52d721 extends \Composer\Installer\InstallationManager implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Composer\Installer\InstallationManager|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function reset()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'reset', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->reset();
    }

    public function addInstaller(\Composer\Installer\InstallerInterface $installer)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addInstaller', array('installer' => $installer), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->addInstaller($installer);
    }

    public function removeInstaller(\Composer\Installer\InstallerInterface $installer)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'removeInstaller', array('installer' => $installer), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->removeInstaller($installer);
    }

    public function disablePlugins()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'disablePlugins', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->disablePlugins();
    }

    public function getInstaller($type)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getInstaller', array('type' => $type), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getInstaller($type);
    }

    public function isPackageInstalled(\Composer\Repository\InstalledRepositoryInterface $repo, \Composer\Package\PackageInterface $package)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isPackageInstalled', array('repo' => $repo, 'package' => $package), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isPackageInstalled($repo, $package);
    }

    public function ensureBinariesPresence(\Composer\Package\PackageInterface $package)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'ensureBinariesPresence', array('package' => $package), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->ensureBinariesPresence($package);
    }

    public function execute(\Composer\Repository\InstalledRepositoryInterface $repo, array $operations, $devMode = true, $runScripts = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'execute', array('repo' => $repo, 'operations' => $operations, 'devMode' => $devMode, 'runScripts' => $runScripts), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->execute($repo, $operations, $devMode, $runScripts);
    }

    public function install(\Composer\Repository\InstalledRepositoryInterface $repo, \Composer\DependencyResolver\Operation\InstallOperation $operation)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'install', array('repo' => $repo, 'operation' => $operation), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->install($repo, $operation);
    }

    public function update(\Composer\Repository\InstalledRepositoryInterface $repo, \Composer\DependencyResolver\Operation\UpdateOperation $operation)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'update', array('repo' => $repo, 'operation' => $operation), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->update($repo, $operation);
    }

    public function uninstall(\Composer\Repository\InstalledRepositoryInterface $repo, \Composer\DependencyResolver\Operation\UninstallOperation $operation)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'uninstall', array('repo' => $repo, 'operation' => $operation), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->uninstall($repo, $operation);
    }

    public function markAliasInstalled(\Composer\Repository\InstalledRepositoryInterface $repo, \Composer\DependencyResolver\Operation\MarkAliasInstalledOperation $operation)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'markAliasInstalled', array('repo' => $repo, 'operation' => $operation), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->markAliasInstalled($repo, $operation);
    }

    public function markAliasUninstalled(\Composer\Repository\InstalledRepositoryInterface $repo, \Composer\DependencyResolver\Operation\MarkAliasUninstalledOperation $operation)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'markAliasUninstalled', array('repo' => $repo, 'operation' => $operation), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->markAliasUninstalled($repo, $operation);
    }

    public function getInstallPath(\Composer\Package\PackageInterface $package)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getInstallPath', array('package' => $package), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getInstallPath($package);
    }

    public function setOutputProgress($outputProgress)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setOutputProgress', array('outputProgress' => $outputProgress), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setOutputProgress($outputProgress);
    }

    public function notifyInstalls(\Composer\IO\IOInterface $io)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'notifyInstalls', array('io' => $io), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->notifyInstalls($io);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Composer\Installer\InstallationManager $instance) {
            unset($instance->installers, $instance->cache, $instance->notifiablePackages, $instance->loop, $instance->io, $instance->eventDispatcher, $instance->outputProgress);
        }, $instance, 'Composer\\Installer\\InstallationManager')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Composer\Util\Loop $loop, \Composer\IO\IOInterface $io, ?\Composer\EventDispatcher\EventDispatcher $eventDispatcher = null)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Composer\\Installer\\InstallationManager');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Composer\Installer\InstallationManager $instance) {
            unset($instance->installers, $instance->cache, $instance->notifiablePackages, $instance->loop, $instance->io, $instance->eventDispatcher, $instance->outputProgress);
        }, $this, 'Composer\\Installer\\InstallationManager')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($loop, $io, $eventDispatcher);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Composer\\Installer\\InstallationManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Composer\\Installer\\InstallationManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Composer\\Installer\\InstallationManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Composer\\Installer\\InstallationManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Composer\Installer\InstallationManager $instance) {
            unset($instance->installers, $instance->cache, $instance->notifiablePackages, $instance->loop, $instance->io, $instance->eventDispatcher, $instance->outputProgress);
        }, $this, 'Composer\\Installer\\InstallationManager')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('InstallationManager_f52d721', false)) {
    \class_alias(__NAMESPACE__.'\\InstallationManager_f52d721', 'InstallationManager_f52d721', false);
}
include_once \dirname(__DIR__, 4).'/vendor/psr/log/Psr/Log/LoggerInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/composer/composer/src/Composer/IO/IOInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/composer/composer/src/Composer/IO/BaseIO.php';
include_once \dirname(__DIR__, 4).'/vendor/composer/composer/src/Composer/IO/ConsoleIO.php';
include_once \dirname(__DIR__, 4).'/vendor/composer/composer/src/Composer/IO/BufferIO.php';

class BufferIO_465c9ba extends \Composer\IO\BufferIO implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Composer\IO\BufferIO|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getOutput()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getOutput', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getOutput();
    }

    public function setUserInputs(array $inputs)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setUserInputs', array('inputs' => $inputs), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setUserInputs($inputs);
    }

    public function enableDebugging($startTime)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'enableDebugging', array('startTime' => $startTime), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->enableDebugging($startTime);
    }

    public function isInteractive()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isInteractive', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isInteractive();
    }

    public function isDecorated()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isDecorated', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isDecorated();
    }

    public function isVerbose()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isVerbose', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isVerbose();
    }

    public function isVeryVerbose()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isVeryVerbose', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isVeryVerbose();
    }

    public function isDebug()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isDebug', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isDebug();
    }

    public function write($messages, $newline = true, $verbosity = 2)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'write', array('messages' => $messages, 'newline' => $newline, 'verbosity' => $verbosity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->write($messages, $newline, $verbosity);
    }

    public function writeError($messages, $newline = true, $verbosity = 2)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'writeError', array('messages' => $messages, 'newline' => $newline, 'verbosity' => $verbosity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->writeError($messages, $newline, $verbosity);
    }

    public function writeRaw($messages, $newline = true, $verbosity = 2)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'writeRaw', array('messages' => $messages, 'newline' => $newline, 'verbosity' => $verbosity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->writeRaw($messages, $newline, $verbosity);
    }

    public function writeErrorRaw($messages, $newline = true, $verbosity = 2)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'writeErrorRaw', array('messages' => $messages, 'newline' => $newline, 'verbosity' => $verbosity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->writeErrorRaw($messages, $newline, $verbosity);
    }

    public function overwrite($messages, $newline = true, $size = null, $verbosity = 2)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'overwrite', array('messages' => $messages, 'newline' => $newline, 'size' => $size, 'verbosity' => $verbosity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->overwrite($messages, $newline, $size, $verbosity);
    }

    public function overwriteError($messages, $newline = true, $size = null, $verbosity = 2)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'overwriteError', array('messages' => $messages, 'newline' => $newline, 'size' => $size, 'verbosity' => $verbosity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->overwriteError($messages, $newline, $size, $verbosity);
    }

    public function getProgressBar($max = 0)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProgressBar', array('max' => $max), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProgressBar($max);
    }

    public function ask($question, $default = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'ask', array('question' => $question, 'default' => $default), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->ask($question, $default);
    }

    public function askConfirmation($question, $default = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'askConfirmation', array('question' => $question, 'default' => $default), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->askConfirmation($question, $default);
    }

    public function askAndValidate($question, $validator, $attempts = null, $default = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'askAndValidate', array('question' => $question, 'validator' => $validator, 'attempts' => $attempts, 'default' => $default), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->askAndValidate($question, $validator, $attempts, $default);
    }

    public function askAndHideAnswer($question)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'askAndHideAnswer', array('question' => $question), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->askAndHideAnswer($question);
    }

    public function select($question, $choices, $default, $attempts = false, $errorMessage = 'Value "%s" is invalid', $multiselect = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'select', array('question' => $question, 'choices' => $choices, 'default' => $default, 'attempts' => $attempts, 'errorMessage' => $errorMessage, 'multiselect' => $multiselect), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->select($question, $choices, $default, $attempts, $errorMessage, $multiselect);
    }

    public function getAuthentications()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAuthentications', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAuthentications();
    }

    public function resetAuthentications()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'resetAuthentications', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->resetAuthentications();
    }

    public function hasAuthentication($repositoryName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'hasAuthentication', array('repositoryName' => $repositoryName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->hasAuthentication($repositoryName);
    }

    public function getAuthentication($repositoryName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAuthentication', array('repositoryName' => $repositoryName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAuthentication($repositoryName);
    }

    public function setAuthentication($repositoryName, $username, $password = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setAuthentication', array('repositoryName' => $repositoryName, 'username' => $username, 'password' => $password), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setAuthentication($repositoryName, $username, $password);
    }

    public function loadConfiguration(\Composer\Config $config)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'loadConfiguration', array('config' => $config), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->loadConfiguration($config);
    }

    public function emergency($message, array $context = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'emergency', array('message' => $message, 'context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->emergency($message, $context);
    }

    public function alert($message, array $context = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'alert', array('message' => $message, 'context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->alert($message, $context);
    }

    public function critical($message, array $context = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'critical', array('message' => $message, 'context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->critical($message, $context);
    }

    public function error($message, array $context = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'error', array('message' => $message, 'context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->error($message, $context);
    }

    public function warning($message, array $context = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'warning', array('message' => $message, 'context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->warning($message, $context);
    }

    public function notice($message, array $context = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'notice', array('message' => $message, 'context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->notice($message, $context);
    }

    public function info($message, array $context = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'info', array('message' => $message, 'context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->info($message, $context);
    }

    public function debug($message, array $context = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'debug', array('message' => $message, 'context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->debug($message, $context);
    }

    public function log($level, $message, array $context = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'log', array('level' => $level, 'message' => $message, 'context' => $context), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->log($level, $message, $context);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->input, $instance->output, $instance->helperSet, $instance->lastMessage, $instance->lastMessageErr, $instance->authentications);

        \Closure::bind(function (\Composer\IO\ConsoleIO $instance) {
            unset($instance->startTime, $instance->verbosityMap);
        }, $instance, 'Composer\\IO\\ConsoleIO')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct($input = '', $verbosity = 32, ?\Symfony\Component\Console\Formatter\OutputFormatterInterface $formatter = null)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Composer\\IO\\BufferIO');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->input, $this->output, $this->helperSet, $this->lastMessage, $this->lastMessageErr, $this->authentications);

        \Closure::bind(function (\Composer\IO\ConsoleIO $instance) {
            unset($instance->startTime, $instance->verbosityMap);
        }, $this, 'Composer\\IO\\ConsoleIO')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($input, $verbosity, $formatter);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Composer\\IO\\BufferIO');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Composer\\IO\\BufferIO');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Composer\\IO\\BufferIO');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Composer\\IO\\BufferIO');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->input, $this->output, $this->helperSet, $this->lastMessage, $this->lastMessageErr, $this->authentications);

        \Closure::bind(function (\Composer\IO\ConsoleIO $instance) {
            unset($instance->startTime, $instance->verbosityMap);
        }, $this, 'Composer\\IO\\ConsoleIO')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('BufferIO_465c9ba', false)) {
    \class_alias(__NAMESPACE__.'\\BufferIO_465c9ba', 'BufferIO_465c9ba', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Provider/EntityFieldProvider.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/crm-dotmailer/Provider/FieldProvider.php';

class FieldProvider_e371727 extends \Oro\Bundle\DotmailerBundle\Provider\FieldProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DotmailerBundle\Provider\FieldProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setEntityProvider(\Oro\Bundle\EntityBundle\Provider\EntityProvider $entityProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setEntityProvider', array('entityProvider' => $entityProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setEntityProvider($entityProvider);
    }

    public function setVirtualFieldProvider(\Oro\Bundle\EntityBundle\Provider\VirtualFieldProviderInterface $virtualFieldProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setVirtualFieldProvider', array('virtualFieldProvider' => $virtualFieldProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setVirtualFieldProvider($virtualFieldProvider);
    }

    public function setVirtualRelationProvider($virtualRelationProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setVirtualRelationProvider', array('virtualRelationProvider' => $virtualRelationProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setVirtualRelationProvider($virtualRelationProvider);
    }

    public function setExclusionProvider(\Oro\Bundle\EntityBundle\Provider\ExclusionProviderInterface $exclusionProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setExclusionProvider', array('exclusionProvider' => $exclusionProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setExclusionProvider($exclusionProvider);
    }

    public function enableCaching($enable = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'enableCaching', array('enable' => $enable), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->enableCaching($enable);
    }

    public function getRelations($entityName, $withEntityDetails = false, $applyExclusions = true, $translate = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getRelations', array('entityName' => $entityName, 'withEntityDetails' => $withEntityDetails, 'applyExclusions' => $applyExclusions, 'translate' => $translate), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getRelations($entityName, $withEntityDetails, $applyExclusions, $translate);
    }

    public function getEntityFields(string $entityName, int $options = 192) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityFields', array('entityName' => $entityName, 'options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityFields($entityName, $options);
    }

    public function setLocale($locale)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLocale', array('locale' => $locale), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLocale($locale);
    }

    public function getLocale()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getLocale', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getLocale();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->entityProvider, $instance->virtualFieldProvider, $instance->virtualRelationProvider, $instance->exclusionProvider, $instance->entityConfigProvider, $instance->extendConfigProvider, $instance->entityClassResolver, $instance->fieldTypeHelper, $instance->translator, $instance->doctrine, $instance->hiddenFields, $instance->locale);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Provider\EntityFieldProvider $instance) {
            unset($instance->isCachingEnabled, $instance->metadata, $instance->metadataForEntitiesWithAssociations);
        }, $instance, 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $entityConfigProvider, \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $extendConfigProvider, \Oro\Bundle\EntityBundle\ORM\EntityClassResolver $entityClassResolver, \Oro\Bundle\EntityExtendBundle\Extend\FieldTypeHelper $fieldTypeHelper, \Symfony\Bridge\Doctrine\ManagerRegistry $doctrine, \Symfony\Contracts\Translation\TranslatorInterface $translator, $hiddenFields)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DotmailerBundle\\Provider\\FieldProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->entityProvider, $this->virtualFieldProvider, $this->virtualRelationProvider, $this->exclusionProvider, $this->entityConfigProvider, $this->extendConfigProvider, $this->entityClassResolver, $this->fieldTypeHelper, $this->translator, $this->doctrine, $this->hiddenFields, $this->locale);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Provider\EntityFieldProvider $instance) {
            unset($instance->isCachingEnabled, $instance->metadata, $instance->metadataForEntitiesWithAssociations);
        }, $this, 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($entityConfigProvider, $extendConfigProvider, $entityClassResolver, $fieldTypeHelper, $doctrine, $translator, $hiddenFields);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DotmailerBundle\\Provider\\FieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DotmailerBundle\\Provider\\FieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DotmailerBundle\\Provider\\FieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DotmailerBundle\\Provider\\FieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->entityProvider, $this->virtualFieldProvider, $this->virtualRelationProvider, $this->exclusionProvider, $this->entityConfigProvider, $this->extendConfigProvider, $this->entityClassResolver, $this->fieldTypeHelper, $this->translator, $this->doctrine, $this->hiddenFields, $this->locale);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Provider\EntityFieldProvider $instance) {
            unset($instance->isCachingEnabled, $instance->metadata, $instance->metadataForEntitiesWithAssociations);
        }, $this, 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('FieldProvider_e371727', false)) {
    \class_alias(__NAMESPACE__.'\\FieldProvider_e371727', 'FieldProvider_e371727', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Twig/Sandbox/TemplateRenderer.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/Provider/EmailRenderer.php';

class EmailRenderer_bcb05e5 extends \Oro\Bundle\EmailBundle\Provider\EmailRenderer implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EmailBundle\Provider\EmailRenderer|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setHtmlTagHelper(\Oro\Bundle\UIBundle\Tools\HtmlTagHelper $htmlTagHelper) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setHtmlTagHelper', array('htmlTagHelper' => $htmlTagHelper), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->setHtmlTagHelper($htmlTagHelper);
return;
    }

    public function compileMessage(\Oro\Bundle\EmailBundle\Model\EmailTemplateInterface $template, array $templateParams = []) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'compileMessage', array('template' => $template, 'templateParams' => $templateParams), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->compileMessage($template, $templateParams);
    }

    public function compilePreview(\Oro\Bundle\EmailBundle\Model\EmailTemplateInterface $template) : string
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'compilePreview', array('template' => $template), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->compilePreview($template);
    }

    public function addExtension(\Twig\Extension\ExtensionInterface $extension) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addExtension', array('extension' => $extension), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->addExtension($extension);
return;
    }

    public function addSystemVariableDefaultFilter(string $variable, string $filter) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addSystemVariableDefaultFilter', array('variable' => $variable, 'filter' => $filter), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->addSystemVariableDefaultFilter($variable, $filter);
return;
    }

    public function renderTemplate(string $template, array $templateParams = []) : string
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'renderTemplate', array('template' => $template, 'templateParams' => $templateParams), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->renderTemplate($template, $templateParams);
    }

    public function validateTemplate(string $template) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'validateTemplate', array('template' => $template), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->validateTemplate($template);
return;
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->environment);

        \Closure::bind(function (\Oro\Bundle\EmailBundle\Provider\EmailRenderer $instance) {
            unset($instance->translator, $instance->htmlTagHelper);
        }, $instance, 'Oro\\Bundle\\EmailBundle\\Provider\\EmailRenderer')->__invoke($instance);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Twig\Sandbox\TemplateRenderer $instance) {
            unset($instance->configProvider, $instance->systemVariableDefaultFilters, $instance->sandboxConfigured, $instance->entityVariableComputer, $instance->entityDataAccessor, $instance->inflector);
        }, $instance, 'Oro\\Bundle\\EntityBundle\\Twig\\Sandbox\\TemplateRenderer')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Twig\Environment $environment, \Oro\Bundle\EntityBundle\Twig\Sandbox\TemplateRendererConfigProviderInterface $configProvider, \Oro\Bundle\EntityBundle\Twig\Sandbox\VariableProcessorRegistry $variableProcessors, \Symfony\Contracts\Translation\TranslatorInterface $translator, \Doctrine\Inflector\Inflector $inflector)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EmailBundle\\Provider\\EmailRenderer');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->environment);

        \Closure::bind(function (\Oro\Bundle\EmailBundle\Provider\EmailRenderer $instance) {
            unset($instance->translator, $instance->htmlTagHelper);
        }, $this, 'Oro\\Bundle\\EmailBundle\\Provider\\EmailRenderer')->__invoke($this);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Twig\Sandbox\TemplateRenderer $instance) {
            unset($instance->configProvider, $instance->systemVariableDefaultFilters, $instance->sandboxConfigured, $instance->entityVariableComputer, $instance->entityDataAccessor, $instance->inflector);
        }, $this, 'Oro\\Bundle\\EntityBundle\\Twig\\Sandbox\\TemplateRenderer')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($environment, $configProvider, $variableProcessors, $translator, $inflector);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\Provider\\EmailRenderer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\Provider\\EmailRenderer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\Provider\\EmailRenderer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\Provider\\EmailRenderer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->environment);

        \Closure::bind(function (\Oro\Bundle\EmailBundle\Provider\EmailRenderer $instance) {
            unset($instance->translator, $instance->htmlTagHelper);
        }, $this, 'Oro\\Bundle\\EmailBundle\\Provider\\EmailRenderer')->__invoke($this);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Twig\Sandbox\TemplateRenderer $instance) {
            unset($instance->configProvider, $instance->systemVariableDefaultFilters, $instance->sandboxConfigured, $instance->entityVariableComputer, $instance->entityDataAccessor, $instance->inflector);
        }, $this, 'Oro\\Bundle\\EntityBundle\\Twig\\Sandbox\\TemplateRenderer')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('EmailRenderer_bcb05e5', false)) {
    \class_alias(__NAMESPACE__.'\\EmailRenderer_bcb05e5', 'EmailRenderer_bcb05e5', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/EventListener/Datagrid/ActivityGridListener.php';

class ActivityGridListener_d8cd1b5 extends \Oro\Bundle\EmailBundle\EventListener\Datagrid\ActivityGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EmailBundle\EventListener\Datagrid\ActivityGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->emailGridHelper, $instance->entityRoutingHelper);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EmailBundle\Datagrid\EmailGridHelper $emailGridHelper, \Oro\Bundle\EntityBundle\Tools\EntityRoutingHelper $entityRoutingHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\ActivityGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->emailGridHelper, $this->entityRoutingHelper);

        }

        $this->valueHoldere0de0->__construct($emailGridHelper, $entityRoutingHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->emailGridHelper, $this->entityRoutingHelper);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ActivityGridListener_d8cd1b5', false)) {
    \class_alias(__NAMESPACE__.'\\ActivityGridListener_d8cd1b5', 'ActivityGridListener_d8cd1b5', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/EventListener/Datagrid/EmailGridListener.php';

class EmailGridListener_e33d881 extends \Oro\Bundle\EmailBundle\EventListener\Datagrid\EmailGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EmailBundle\EventListener\Datagrid\EmailGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onResultBeforeQuery(\Oro\Bundle\DataGridBundle\Event\OrmResultBeforeQuery $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onResultBeforeQuery', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onResultBeforeQuery($event);
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    public function onResultAfter(\Oro\Bundle\DataGridBundle\Event\OrmResultAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onResultAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onResultAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->factory, $instance->configManager, $instance->resultHelper, $instance->filterJoins);

        \Closure::bind(function (\Oro\Bundle\EmailBundle\EventListener\Datagrid\EmailGridListener $instance) {
            unset($instance->filtersStateProvider);
        }, $instance, 'Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\EmailGridListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EmailBundle\Datagrid\EmailQueryFactory $factory, \Oro\Bundle\DataGridBundle\Provider\State\DatagridStateProviderInterface $filtersStateProvider, \Oro\Bundle\ConfigBundle\Config\ConfigManager $configManager, \Oro\Bundle\EmailBundle\Datagrid\EmailGridResultHelper $resultHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\EmailGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->factory, $this->configManager, $this->resultHelper, $this->filterJoins);

        \Closure::bind(function (\Oro\Bundle\EmailBundle\EventListener\Datagrid\EmailGridListener $instance) {
            unset($instance->filtersStateProvider);
        }, $this, 'Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\EmailGridListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($factory, $filtersStateProvider, $configManager, $resultHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\EmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\EmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\EmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\EmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->factory, $this->configManager, $this->resultHelper, $this->filterJoins);

        \Closure::bind(function (\Oro\Bundle\EmailBundle\EventListener\Datagrid\EmailGridListener $instance) {
            unset($instance->filtersStateProvider);
        }, $this, 'Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\EmailGridListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('EmailGridListener_e33d881', false)) {
    \class_alias(__NAMESPACE__.'\\EmailGridListener_e33d881', 'EmailGridListener_e33d881', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/FeatureToggleBundle/Checker/FeatureCheckerAwareInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/FeatureToggleBundle/Checker/FeatureToggleableInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/FeatureToggleBundle/Checker/FeatureCheckerHolderTrait.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/EventListener/Datagrid/MailboxGridListener.php';

class MailboxGridListener_6dc7a4b extends \Oro\Bundle\EmailBundle\EventListener\Datagrid\MailboxGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EmailBundle\EventListener\Datagrid\MailboxGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onPreBuild(\Oro\Bundle\DataGridBundle\Event\PreBuild $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onPreBuild', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onPreBuild($event);
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    public function setFeatureChecker(\Oro\Bundle\FeatureToggleBundle\Checker\FeatureChecker $checker)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setFeatureChecker', array('checker' => $checker), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setFeatureChecker($checker);
    }

    public function addFeature($feature)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addFeature', array('feature' => $feature), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->addFeature($feature);
    }

    public function isFeaturesEnabled($scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isFeaturesEnabled', array('scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isFeaturesEnabled($scopeIdentifier);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->doctrine, $instance->aclHelper, $instance->featureChecker, $instance->features);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\Bundle\DoctrineBundle\Registry $doctrine, \Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper $aclHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\MailboxGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->doctrine, $this->aclHelper, $this->featureChecker, $this->features);

        }

        $this->valueHoldere0de0->__construct($doctrine, $aclHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\MailboxGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\MailboxGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\MailboxGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\MailboxGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->doctrine, $this->aclHelper, $this->featureChecker, $this->features);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('MailboxGridListener_6dc7a4b', false)) {
    \class_alias(__NAMESPACE__.'\\MailboxGridListener_6dc7a4b', 'MailboxGridListener_6dc7a4b', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/EventListener/Datagrid/RecentEmailGridListener.php';

class RecentEmailGridListener_1886a69 extends \Oro\Bundle\EmailBundle\EventListener\Datagrid\RecentEmailGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EmailBundle\EventListener\Datagrid\RecentEmailGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->emailGridHelper, $instance->emailQueryFactory);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EmailBundle\Datagrid\EmailGridHelper $emailGridHelper, \Oro\Bundle\EmailBundle\Datagrid\EmailQueryFactory $emailQueryFactory)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\RecentEmailGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->emailGridHelper, $this->emailQueryFactory);

        }

        $this->valueHoldere0de0->__construct($emailGridHelper, $emailQueryFactory);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\RecentEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\RecentEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\RecentEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\RecentEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->emailGridHelper, $this->emailQueryFactory);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('RecentEmailGridListener_1886a69', false)) {
    \class_alias(__NAMESPACE__.'\\RecentEmailGridListener_1886a69', 'RecentEmailGridListener_1886a69', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/EventListener/Datagrid/IncomingEmailGridListener.php';

class IncomingEmailGridListener_50417cd extends \Oro\Bundle\EmailBundle\EventListener\Datagrid\IncomingEmailGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EmailBundle\EventListener\Datagrid\IncomingEmailGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->emailQueryFactory);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EmailBundle\Datagrid\EmailQueryFactory $emailQueryFactory)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\IncomingEmailGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->emailQueryFactory);

        }

        $this->valueHoldere0de0->__construct($emailQueryFactory);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\IncomingEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\IncomingEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\IncomingEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\IncomingEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->emailQueryFactory);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('IncomingEmailGridListener_50417cd', false)) {
    \class_alias(__NAMESPACE__.'\\IncomingEmailGridListener_50417cd', 'IncomingEmailGridListener_50417cd', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/EventListener/Datagrid/OutgoingEmailGridListener.php';

class OutgoingEmailGridListener_2652b91 extends \Oro\Bundle\EmailBundle\EventListener\Datagrid\OutgoingEmailGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EmailBundle\EventListener\Datagrid\OutgoingEmailGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onResultAfter(\Oro\Bundle\DataGridBundle\Event\OrmResultAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onResultAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onResultAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->resultHelper);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EmailBundle\Datagrid\EmailGridResultHelper $resultHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\OutgoingEmailGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->resultHelper);

        }

        $this->valueHoldere0de0->__construct($resultHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\OutgoingEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\OutgoingEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\OutgoingEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\OutgoingEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->resultHelper);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('OutgoingEmailGridListener_2652b91', false)) {
    \class_alias(__NAMESPACE__.'\\OutgoingEmailGridListener_2652b91', 'OutgoingEmailGridListener_2652b91', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EmailBundle/EventListener/Datagrid/UserEmailGridListener.php';

class UserEmailGridListener_8daed58 extends \Oro\Bundle\EmailBundle\EventListener\Datagrid\UserEmailGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EmailBundle\EventListener\Datagrid\UserEmailGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    public function setFeatureChecker(\Oro\Bundle\FeatureToggleBundle\Checker\FeatureChecker $checker)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setFeatureChecker', array('checker' => $checker), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setFeatureChecker($checker);
    }

    public function addFeature($feature)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addFeature', array('feature' => $feature), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->addFeature($feature);
    }

    public function isFeaturesEnabled($scopeIdentifier = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isFeaturesEnabled', array('scopeIdentifier' => $scopeIdentifier), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isFeaturesEnabled($scopeIdentifier);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->emailQueryFactory, $instance->featureChecker, $instance->features);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EmailBundle\Datagrid\EmailQueryFactory $emailQueryFactory)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\UserEmailGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->emailQueryFactory, $this->featureChecker, $this->features);

        }

        $this->valueHoldere0de0->__construct($emailQueryFactory);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\UserEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\UserEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\UserEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EmailBundle\\EventListener\\Datagrid\\UserEmailGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->emailQueryFactory, $this->featureChecker, $this->features);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('UserEmailGridListener_8daed58', false)) {
    \class_alias(__NAMESPACE__.'\\UserEmailGridListener_8daed58', 'UserEmailGridListener_8daed58', false);
}

class EntityFieldProvider_5de77fa extends \Oro\Bundle\EntityBundle\Provider\EntityFieldProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityBundle\Provider\EntityFieldProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setEntityProvider(\Oro\Bundle\EntityBundle\Provider\EntityProvider $entityProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setEntityProvider', array('entityProvider' => $entityProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setEntityProvider($entityProvider);
    }

    public function setVirtualFieldProvider(\Oro\Bundle\EntityBundle\Provider\VirtualFieldProviderInterface $virtualFieldProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setVirtualFieldProvider', array('virtualFieldProvider' => $virtualFieldProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setVirtualFieldProvider($virtualFieldProvider);
    }

    public function setVirtualRelationProvider($virtualRelationProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setVirtualRelationProvider', array('virtualRelationProvider' => $virtualRelationProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setVirtualRelationProvider($virtualRelationProvider);
    }

    public function setExclusionProvider(\Oro\Bundle\EntityBundle\Provider\ExclusionProviderInterface $exclusionProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setExclusionProvider', array('exclusionProvider' => $exclusionProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setExclusionProvider($exclusionProvider);
    }

    public function enableCaching($enable = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'enableCaching', array('enable' => $enable), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->enableCaching($enable);
    }

    public function getRelations($entityName, $withEntityDetails = false, $applyExclusions = true, $translate = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getRelations', array('entityName' => $entityName, 'withEntityDetails' => $withEntityDetails, 'applyExclusions' => $applyExclusions, 'translate' => $translate), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getRelations($entityName, $withEntityDetails, $applyExclusions, $translate);
    }

    public function getEntityFields(string $entityName, int $options = 192) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityFields', array('entityName' => $entityName, 'options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityFields($entityName, $options);
    }

    public function setLocale($locale)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLocale', array('locale' => $locale), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLocale($locale);
    }

    public function getLocale()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getLocale', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getLocale();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->entityProvider, $instance->virtualFieldProvider, $instance->virtualRelationProvider, $instance->exclusionProvider, $instance->entityConfigProvider, $instance->extendConfigProvider, $instance->entityClassResolver, $instance->fieldTypeHelper, $instance->translator, $instance->doctrine, $instance->hiddenFields, $instance->locale);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Provider\EntityFieldProvider $instance) {
            unset($instance->isCachingEnabled, $instance->metadata, $instance->metadataForEntitiesWithAssociations);
        }, $instance, 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $entityConfigProvider, \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $extendConfigProvider, \Oro\Bundle\EntityBundle\ORM\EntityClassResolver $entityClassResolver, \Oro\Bundle\EntityExtendBundle\Extend\FieldTypeHelper $fieldTypeHelper, \Symfony\Bridge\Doctrine\ManagerRegistry $doctrine, \Symfony\Contracts\Translation\TranslatorInterface $translator, $hiddenFields)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->entityProvider, $this->virtualFieldProvider, $this->virtualRelationProvider, $this->exclusionProvider, $this->entityConfigProvider, $this->extendConfigProvider, $this->entityClassResolver, $this->fieldTypeHelper, $this->translator, $this->doctrine, $this->hiddenFields, $this->locale);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Provider\EntityFieldProvider $instance) {
            unset($instance->isCachingEnabled, $instance->metadata, $instance->metadataForEntitiesWithAssociations);
        }, $this, 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($entityConfigProvider, $extendConfigProvider, $entityClassResolver, $fieldTypeHelper, $doctrine, $translator, $hiddenFields);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->entityProvider, $this->virtualFieldProvider, $this->virtualRelationProvider, $this->exclusionProvider, $this->entityConfigProvider, $this->extendConfigProvider, $this->entityClassResolver, $this->fieldTypeHelper, $this->translator, $this->doctrine, $this->hiddenFields, $this->locale);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Provider\EntityFieldProvider $instance) {
            unset($instance->isCachingEnabled, $instance->metadata, $instance->metadataForEntitiesWithAssociations);
        }, $this, 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('EntityFieldProvider_5de77fa', false)) {
    \class_alias(__NAMESPACE__.'\\EntityFieldProvider_5de77fa', 'EntityFieldProvider_5de77fa', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityBundle/Provider/EntityProvider.php';

class EntityProvider_09b1ff0 extends \Oro\Bundle\EntityBundle\Provider\EntityProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityBundle\Provider\EntityProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setExclusionProvider(\Oro\Bundle\EntityBundle\Provider\ExclusionProviderInterface $exclusionProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setExclusionProvider', array('exclusionProvider' => $exclusionProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setExclusionProvider($exclusionProvider);
    }

    public function getEntities($sortByPluralLabel = true, $applyExclusions = true, $translate = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntities', array('sortByPluralLabel' => $sortByPluralLabel, 'applyExclusions' => $applyExclusions, 'translate' => $translate), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntities($sortByPluralLabel, $applyExclusions, $translate);
    }

    public function getEntity($entityName, $translate = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntity', array('entityName' => $entityName, 'translate' => $translate), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntity($entityName, $translate);
    }

    public function getEnabledEntity($entityName, $applyExclusions = true, $translate = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEnabledEntity', array('entityName' => $entityName, 'applyExclusions' => $applyExclusions, 'translate' => $translate), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEnabledEntity($entityName, $applyExclusions, $translate);
    }

    public function isIgnoredEntity($className)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isIgnoredEntity', array('className' => $className), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isIgnoredEntity($className);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->entityConfigProvider, $instance->extendConfigProvider, $instance->entityClassResolver, $instance->translator, $instance->exclusionProvider, $instance->featureChecker);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $entityConfigProvider, \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $extendConfigProvider, \Oro\Bundle\EntityBundle\ORM\EntityClassResolver $entityClassResolver, \Symfony\Contracts\Translation\TranslatorInterface $translator, \Oro\Bundle\FeatureToggleBundle\Checker\FeatureChecker $featureChecker)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityBundle\\Provider\\EntityProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->entityConfigProvider, $this->extendConfigProvider, $this->entityClassResolver, $this->translator, $this->exclusionProvider, $this->featureChecker);

        }

        $this->valueHoldere0de0->__construct($entityConfigProvider, $extendConfigProvider, $entityClassResolver, $translator, $featureChecker);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\Provider\\EntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\Provider\\EntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\Provider\\EntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\Provider\\EntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->entityConfigProvider, $this->extendConfigProvider, $this->entityClassResolver, $this->translator, $this->exclusionProvider, $this->featureChecker);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('EntityProvider_09b1ff0', false)) {
    \class_alias(__NAMESPACE__.'\\EntityProvider_09b1ff0', 'EntityProvider_09b1ff0', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityBundle/EventListener/CustomEntityGridListener.php';

class CustomEntityGridListener_92d25ad extends \Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->onBuildBefore($event);
return;
    }

    public function getLinkProperty(string $gridName, string $keyName, array $node) : callable
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getLinkProperty', array('gridName' => $gridName, 'keyName' => $keyName, 'node' => $node), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getLinkProperty($gridName, $keyName, $node);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener $instance) {
            unset($instance->urlGenerator, $instance->entityClassNameHelper, $instance->visitedDatagrids);
        }, $instance, 'Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Symfony\Component\Routing\Generator\UrlGeneratorInterface $urlGenerator, \Oro\Bundle\EntityBundle\Tools\EntityClassNameHelper $entityClassNameHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener $instance) {
            unset($instance->urlGenerator, $instance->entityClassNameHelper, $instance->visitedDatagrids);
        }, $this, 'Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($urlGenerator, $entityClassNameHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\EntityBundle\EventListener\CustomEntityGridListener $instance) {
            unset($instance->urlGenerator, $instance->entityClassNameHelper, $instance->visitedDatagrids);
        }, $this, 'Oro\\Bundle\\EntityBundle\\EventListener\\CustomEntityGridListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('CustomEntityGridListener_92d25ad', false)) {
    \class_alias(__NAMESPACE__.'\\CustomEntityGridListener_92d25ad', 'CustomEntityGridListener_92d25ad', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityBundle/EventListener/EntityRelationGridListener.php';

class EntityRelationGridListener_768be6b extends \Oro\Bundle\EntityBundle\EventListener\EntityRelationGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityBundle\EventListener\EntityRelationGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->configManager, $instance->doctrineHelper);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\Config\ConfigManager $configManager, \Oro\Bundle\EntityBundle\ORM\DoctrineHelper $doctrineHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityBundle\\EventListener\\EntityRelationGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->configManager, $this->doctrineHelper);

        }

        $this->valueHoldere0de0->__construct($configManager, $doctrineHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\EventListener\\EntityRelationGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\EventListener\\EntityRelationGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\EventListener\\EntityRelationGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityBundle\\EventListener\\EntityRelationGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->configManager, $this->doctrineHelper);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('EntityRelationGridListener_768be6b', false)) {
    \class_alias(__NAMESPACE__.'\\EntityRelationGridListener_768be6b', 'EntityRelationGridListener_768be6b', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/EventListener/AttributeGroupGridListener.php';

class AttributeGroupGridListener_aebfd16 extends \Oro\Bundle\EntityConfigBundle\EventListener\AttributeGroupGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityConfigBundle\EventListener\AttributeGroupGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onResultAfter(\Oro\Bundle\DataGridBundle\Event\OrmResultAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onResultAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onResultAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->attributeManager);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\Manager\AttributeManager $attributeManager)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributeGroupGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->attributeManager);

        }

        $this->valueHoldere0de0->__construct($attributeManager);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributeGroupGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributeGroupGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributeGroupGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributeGroupGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->attributeManager);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AttributeGroupGridListener_aebfd16', false)) {
    \class_alias(__NAMESPACE__.'\\AttributeGroupGridListener_aebfd16', 'AttributeGroupGridListener_aebfd16', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/EventListener/AttributesDatagridListener.php';

class AttributesDatagridListener_01a863b extends \Oro\Bundle\EntityConfigBundle\EventListener\AttributesDatagridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityConfigBundle\EventListener\AttributesDatagridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onResultAfter(\Oro\Bundle\DataGridBundle\Event\OrmResultAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onResultAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onResultAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\EventListener\AttributesDatagridListener $instance) {
            unset($instance->doctrineHelper, $instance->localizationHelper, $instance->aclHelper, $instance->authorizationChecker, $instance->urlGenerator);
        }, $instance, 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesDatagridListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityBundle\ORM\DoctrineHelper $doctrineHelper, \Oro\Bundle\LocaleBundle\Helper\LocalizationHelper $localizationHelper, \Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper $aclHelper, \Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface $authorizationChecker, \Symfony\Component\Routing\Generator\UrlGeneratorInterface $urlGenerator)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesDatagridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\EventListener\AttributesDatagridListener $instance) {
            unset($instance->doctrineHelper, $instance->localizationHelper, $instance->aclHelper, $instance->authorizationChecker, $instance->urlGenerator);
        }, $this, 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesDatagridListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($doctrineHelper, $localizationHelper, $aclHelper, $authorizationChecker, $urlGenerator);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\EventListener\AttributesDatagridListener $instance) {
            unset($instance->doctrineHelper, $instance->localizationHelper, $instance->aclHelper, $instance->authorizationChecker, $instance->urlGenerator);
        }, $this, 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesDatagridListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AttributesDatagridListener_01a863b', false)) {
    \class_alias(__NAMESPACE__.'\\AttributesDatagridListener_01a863b', 'AttributesDatagridListener_01a863b', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/EventListener/AttributesImportFinishNotificationListener.php';

class AttributesImportFinishNotificationListener_156a7b2 extends \Oro\Bundle\EntityConfigBundle\EventListener\AttributesImportFinishNotificationListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityConfigBundle\EventListener\AttributesImportFinishNotificationListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onAfterAttributesImport(\Oro\Bundle\ImportExportBundle\Event\AfterJobExecutionEvent $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onAfterAttributesImport', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onAfterAttributesImport($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\EventListener\AttributesImportFinishNotificationListener $instance) {
            unset($instance->topicSender);
        }, $instance, 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesImportFinishNotificationListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\WebSocket\AttributesImportTopicSender $topicSender)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesImportFinishNotificationListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\EventListener\AttributesImportFinishNotificationListener $instance) {
            unset($instance->topicSender);
        }, $this, 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesImportFinishNotificationListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($topicSender);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesImportFinishNotificationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesImportFinishNotificationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesImportFinishNotificationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesImportFinishNotificationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\EventListener\AttributesImportFinishNotificationListener $instance) {
            unset($instance->topicSender);
        }, $this, 'Oro\\Bundle\\EntityConfigBundle\\EventListener\\AttributesImportFinishNotificationListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AttributesImportFinishNotificationListener_156a7b2', false)) {
    \class_alias(__NAMESPACE__.'\\AttributesImportFinishNotificationListener_156a7b2', 'AttributesImportFinishNotificationListener_156a7b2', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/EventListener/AbstractConfigGridListener.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/EventListener/EntityConfigGridListener.php';

class EntityConfigGridListener_6d0c980 extends \Oro\Bundle\EntityConfigBundle\EventListener\EntityConfigGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityConfigBundle\EventListener\EntityConfigGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    public function getModuleChoices()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getModuleChoices', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getModuleChoices();
    }

    public function doBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event, $alias = null, $itemType = null, $dynamicFirst = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'doBuildBefore', array('event' => $event, 'alias' => $alias, 'itemType' => $itemType, 'dynamicFirst' => $dynamicFirst), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->doBuildBefore($event, $alias, $itemType, $dynamicFirst);
    }

    public function getDynamicSortersAndFilters(array $orderedFields)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDynamicSortersAndFilters', array('orderedFields' => $orderedFields), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDynamicSortersAndFilters($orderedFields);
    }

    public function getActionConfigurationClosure($actions)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getActionConfigurationClosure', array('actions' => $actions), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getActionConfigurationClosure($actions);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->moduleChoices, $instance->configManager, $instance->datagridResolver);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\Config\ConfigManager $configManager, \Oro\Bundle\DataGridBundle\Provider\SystemAwareResolver $datagridResolver)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\EntityConfigGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->moduleChoices, $this->configManager, $this->datagridResolver);

        }

        $this->valueHoldere0de0->__construct($configManager, $datagridResolver);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\EntityConfigGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\EntityConfigGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\EntityConfigGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\EntityConfigGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->moduleChoices, $this->configManager, $this->datagridResolver);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('EntityConfigGridListener_6d0c980', false)) {
    \class_alias(__NAMESPACE__.'\\EntityConfigGridListener_6d0c980', 'EntityConfigGridListener_6d0c980', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/EventListener/FieldConfigGridListener.php';

class FieldConfigGridListener_bcf9f00 extends \Oro\Bundle\EntityConfigBundle\EventListener\FieldConfigGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityConfigBundle\EventListener\FieldConfigGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    public function doBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event, $alias = null, $itemType = null, $dynamicFirst = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'doBuildBefore', array('event' => $event, 'alias' => $alias, 'itemType' => $itemType, 'dynamicFirst' => $dynamicFirst), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->doBuildBefore($event, $alias, $itemType, $dynamicFirst);
    }

    public function getDynamicSortersAndFilters(array $orderedFields)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDynamicSortersAndFilters', array('orderedFields' => $orderedFields), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDynamicSortersAndFilters($orderedFields);
    }

    public function getActionConfigurationClosure($actions)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getActionConfigurationClosure', array('actions' => $actions), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getActionConfigurationClosure($actions);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->parameters, $instance->configManager, $instance->datagridResolver);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\Config\ConfigManager $configManager, \Oro\Bundle\DataGridBundle\Provider\SystemAwareResolver $datagridResolver)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\FieldConfigGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->parameters, $this->configManager, $this->datagridResolver);

        }

        $this->valueHoldere0de0->__construct($configManager, $datagridResolver);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\FieldConfigGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\FieldConfigGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\FieldConfigGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\EventListener\\FieldConfigGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->parameters, $this->configManager, $this->datagridResolver);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('FieldConfigGridListener_bcf9f00', false)) {
    \class_alias(__NAMESPACE__.'\\FieldConfigGridListener_bcf9f00', 'FieldConfigGridListener_bcf9f00', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/Provider/PropertyConfigBag.php';

class PropertyConfigBag_3139417 extends \Oro\Bundle\EntityConfigBundle\Provider\PropertyConfigBag implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityConfigBundle\Provider\PropertyConfigBag|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getPropertyConfig($scope)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getPropertyConfig', array('scope' => $scope), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getPropertyConfig($scope);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\Provider\PropertyConfigBag $instance) {
            unset($instance->config, $instance->configObjects);
        }, $instance, 'Oro\\Bundle\\EntityConfigBundle\\Provider\\PropertyConfigBag')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(array $config)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\Provider\\PropertyConfigBag');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\Provider\PropertyConfigBag $instance) {
            unset($instance->config, $instance->configObjects);
        }, $this, 'Oro\\Bundle\\EntityConfigBundle\\Provider\\PropertyConfigBag')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($config);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\Provider\\PropertyConfigBag');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\Provider\\PropertyConfigBag');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\Provider\\PropertyConfigBag');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\Provider\\PropertyConfigBag');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\Provider\PropertyConfigBag $instance) {
            unset($instance->config, $instance->configObjects);
        }, $this, 'Oro\\Bundle\\EntityConfigBundle\\Provider\\PropertyConfigBag')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('PropertyConfigBag_3139417', false)) {
    \class_alias(__NAMESPACE__.'\\PropertyConfigBag_3139417', 'PropertyConfigBag_3139417', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityConfigBundle/WebSocket/AttributesImportTopicSender.php';

class AttributesImportTopicSender_06deca0 extends \Oro\Bundle\EntityConfigBundle\WebSocket\AttributesImportTopicSender implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityConfigBundle\WebSocket\AttributesImportTopicSender|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getTopic($configModelId)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getTopic', array('configModelId' => $configModelId), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getTopic($configModelId);
    }

    public function send($configModel)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'send', array('configModel' => $configModel), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->send($configModel);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->connectionChecker);

        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\WebSocket\AttributesImportTopicSender $instance) {
            unset($instance->websocketClient, $instance->tokenAccessor);
        }, $instance, 'Oro\\Bundle\\EntityConfigBundle\\WebSocket\\AttributesImportTopicSender')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\SyncBundle\Client\WebsocketClientInterface $websocketClient, \Oro\Bundle\SyncBundle\Client\ConnectionChecker $connectionChecker, \Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\WebSocket\\AttributesImportTopicSender');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->connectionChecker);

        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\WebSocket\AttributesImportTopicSender $instance) {
            unset($instance->websocketClient, $instance->tokenAccessor);
        }, $this, 'Oro\\Bundle\\EntityConfigBundle\\WebSocket\\AttributesImportTopicSender')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($websocketClient, $connectionChecker, $tokenAccessor);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\WebSocket\\AttributesImportTopicSender');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\WebSocket\\AttributesImportTopicSender');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\WebSocket\\AttributesImportTopicSender');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityConfigBundle\\WebSocket\\AttributesImportTopicSender');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->connectionChecker);

        \Closure::bind(function (\Oro\Bundle\EntityConfigBundle\WebSocket\AttributesImportTopicSender $instance) {
            unset($instance->websocketClient, $instance->tokenAccessor);
        }, $this, 'Oro\\Bundle\\EntityConfigBundle\\WebSocket\\AttributesImportTopicSender')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AttributesImportTopicSender_06deca0', false)) {
    \class_alias(__NAMESPACE__.'\\AttributesImportTopicSender_06deca0', 'AttributesImportTopicSender_06deca0', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/EntityExtendBundle/Entity/Manager/AssociationManager.php';

class AssociationManager_e837bf4 extends \Oro\Bundle\EntityExtendBundle\Entity\Manager\AssociationManager implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\EntityExtendBundle\Entity\Manager\AssociationManager|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getAssociationTargets($associationOwnerClass, $filter, $associationType, $associationKind = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAssociationTargets', array('associationOwnerClass' => $associationOwnerClass, 'filter' => $filter, 'associationType' => $associationType, 'associationKind' => $associationKind), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAssociationTargets($associationOwnerClass, $filter, $associationType, $associationKind);
    }

    public function getSingleOwnerFilter($scope, $attribute = 'enabled')
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getSingleOwnerFilter', array('scope' => $scope, 'attribute' => $attribute), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getSingleOwnerFilter($scope, $attribute);
    }

    public function getMultiOwnerFilter($scope, $attribute)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getMultiOwnerFilter', array('scope' => $scope, 'attribute' => $attribute), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getMultiOwnerFilter($scope, $attribute);
    }

    public function getMultiAssociationsQueryBuilder($associationOwnerClass, $filters, $joins, $associationTargets, $limit = null, $page = null, $orderBy = null, $callback = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getMultiAssociationsQueryBuilder', array('associationOwnerClass' => $associationOwnerClass, 'filters' => $filters, 'joins' => $joins, 'associationTargets' => $associationTargets, 'limit' => $limit, 'page' => $page, 'orderBy' => $orderBy, 'callback' => $callback), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getMultiAssociationsQueryBuilder($associationOwnerClass, $filters, $joins, $associationTargets, $limit, $page, $orderBy, $callback);
    }

    public function getAssociationSubQueryBuilder($associationOwnerClass, $targetEntityClass, $targetFieldName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAssociationSubQueryBuilder', array('associationOwnerClass' => $associationOwnerClass, 'targetEntityClass' => $targetEntityClass, 'targetFieldName' => $targetFieldName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAssociationSubQueryBuilder($associationOwnerClass, $targetEntityClass, $targetFieldName);
    }

    public function getMultiAssociationOwnersQueryBuilder($associationTargetClass, $filters, $joins, $associationOwners, $limit = null, $page = null, $orderBy = null, $callback = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getMultiAssociationOwnersQueryBuilder', array('associationTargetClass' => $associationTargetClass, 'filters' => $filters, 'joins' => $joins, 'associationOwners' => $associationOwners, 'limit' => $limit, 'page' => $page, 'orderBy' => $orderBy, 'callback' => $callback), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getMultiAssociationOwnersQueryBuilder($associationTargetClass, $filters, $joins, $associationOwners, $limit, $page, $orderBy, $callback);
    }

    public function getAssociationOwnersSubQueryBuilder($associationOwnerClass, $ownerFieldName, $targetIdFieldName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAssociationOwnersSubQueryBuilder', array('associationOwnerClass' => $associationOwnerClass, 'ownerFieldName' => $ownerFieldName, 'targetIdFieldName' => $targetIdFieldName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAssociationOwnersSubQueryBuilder($associationOwnerClass, $ownerFieldName, $targetIdFieldName);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->configManager, $instance->aclHelperLink, $instance->doctrineHelper, $instance->entityNameResolver, $instance->featureChecker);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\Config\ConfigManager $configManager, \Oro\Component\DependencyInjection\ServiceLink $aclHelperLink, \Oro\Bundle\EntityBundle\ORM\DoctrineHelper $doctrineHelper, \Oro\Bundle\EntityBundle\Provider\EntityNameResolver $entityNameResolver, \Oro\Bundle\FeatureToggleBundle\Checker\FeatureChecker $featureChecker)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\EntityExtendBundle\\Entity\\Manager\\AssociationManager');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->configManager, $this->aclHelperLink, $this->doctrineHelper, $this->entityNameResolver, $this->featureChecker);

        }

        $this->valueHoldere0de0->__construct($configManager, $aclHelperLink, $doctrineHelper, $entityNameResolver, $featureChecker);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityExtendBundle\\Entity\\Manager\\AssociationManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityExtendBundle\\Entity\\Manager\\AssociationManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityExtendBundle\\Entity\\Manager\\AssociationManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\EntityExtendBundle\\Entity\\Manager\\AssociationManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->configManager, $this->aclHelperLink, $this->doctrineHelper, $this->entityNameResolver, $this->featureChecker);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AssociationManager_e837bf4', false)) {
    \class_alias(__NAMESPACE__.'\\AssociationManager_e837bf4', 'AssociationManager_e837bf4', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/FilterBundle/Provider/State/FiltersStateProvider.php';

class FiltersStateProvider_1bdb91e extends \Oro\Bundle\FilterBundle\Provider\State\FiltersStateProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\FilterBundle\Provider\State\FiltersStateProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getState(\Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration $datagridConfiguration, \Oro\Bundle\DataGridBundle\Datagrid\ParameterBag $datagridParameters) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getState', array('datagridConfiguration' => $datagridConfiguration, 'datagridParameters' => $datagridParameters), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getState($datagridConfiguration, $datagridParameters);
    }

    public function getStateFromParameters(\Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration $datagridConfiguration, \Oro\Bundle\DataGridBundle\Datagrid\ParameterBag $datagridParameters) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getStateFromParameters', array('datagridConfiguration' => $datagridConfiguration, 'datagridParameters' => $datagridParameters), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getStateFromParameters($datagridConfiguration, $datagridParameters);
    }

    public function getDefaultState(\Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration $datagridConfiguration) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDefaultState', array('datagridConfiguration' => $datagridConfiguration), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDefaultState($datagridConfiguration);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\FilterBundle\Provider\State\FiltersStateProvider $instance) {
            unset($instance->datagridParametersHelper);
        }, $instance, 'Oro\\Bundle\\FilterBundle\\Provider\\State\\FiltersStateProvider')->__invoke($instance);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\AbstractStateProvider $instance) {
            unset($instance->tokenAccessor, $instance->gridViewManager, $instance->defaultGridView);
        }, $instance, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\AbstractStateProvider')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\DataGridBundle\Entity\Manager\GridViewManager $gridViewManager, \Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor, \Oro\Bundle\DataGridBundle\Tools\DatagridParametersHelper $datagridParametersHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\FilterBundle\\Provider\\State\\FiltersStateProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\FilterBundle\Provider\State\FiltersStateProvider $instance) {
            unset($instance->datagridParametersHelper);
        }, $this, 'Oro\\Bundle\\FilterBundle\\Provider\\State\\FiltersStateProvider')->__invoke($this);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\AbstractStateProvider $instance) {
            unset($instance->tokenAccessor, $instance->gridViewManager, $instance->defaultGridView);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\AbstractStateProvider')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($gridViewManager, $tokenAccessor, $datagridParametersHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\FilterBundle\\Provider\\State\\FiltersStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\FilterBundle\\Provider\\State\\FiltersStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\FilterBundle\\Provider\\State\\FiltersStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\FilterBundle\\Provider\\State\\FiltersStateProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\FilterBundle\Provider\State\FiltersStateProvider $instance) {
            unset($instance->datagridParametersHelper);
        }, $this, 'Oro\\Bundle\\FilterBundle\\Provider\\State\\FiltersStateProvider')->__invoke($this);

        \Closure::bind(function (\Oro\Bundle\DataGridBundle\Provider\State\AbstractStateProvider $instance) {
            unset($instance->tokenAccessor, $instance->gridViewManager, $instance->defaultGridView);
        }, $this, 'Oro\\Bundle\\DataGridBundle\\Provider\\State\\AbstractStateProvider')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('FiltersStateProvider_1bdb91e', false)) {
    \class_alias(__NAMESPACE__.'\\FiltersStateProvider_1bdb91e', 'FiltersStateProvider_1bdb91e', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Component/MessageQueue/Consumption/MessageProcessorInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Async/Import/ImportMessageProcessor.php';

class ImportMessageProcessor_8dd07e7 extends \Oro\Bundle\ImportExportBundle\Async\Import\ImportMessageProcessor implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ImportExportBundle\Async\Import\ImportMessageProcessor|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function process(\Oro\Component\MessageQueue\Transport\MessageInterface $message, \Oro\Component\MessageQueue\Transport\SessionInterface $session)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'process', array('message' => $message, 'session' => $session), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->process($message, $session);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->importHandler, $instance->jobRunner, $instance->logger, $instance->importExportResultSummarizer, $instance->fileManager, $instance->postponedRowsHandler);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Component\MessageQueue\Job\JobRunner $jobRunner, \Oro\Bundle\ImportExportBundle\Async\ImportExportResultSummarizer $importExportResultSummarizer, \Psr\Log\LoggerInterface $logger, \Oro\Bundle\ImportExportBundle\File\FileManager $fileManager, \Oro\Bundle\ImportExportBundle\Handler\ImportHandler $importHandler, \Oro\Bundle\ImportExportBundle\Handler\PostponedRowsHandler $postponedRowsHandler)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Async\\Import\\ImportMessageProcessor');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->importHandler, $this->jobRunner, $this->logger, $this->importExportResultSummarizer, $this->fileManager, $this->postponedRowsHandler);

        }

        $this->valueHoldere0de0->__construct($jobRunner, $importExportResultSummarizer, $logger, $fileManager, $importHandler, $postponedRowsHandler);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Async\\Import\\ImportMessageProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Async\\Import\\ImportMessageProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Async\\Import\\ImportMessageProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Async\\Import\\ImportMessageProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->importHandler, $this->jobRunner, $this->logger, $this->importExportResultSummarizer, $this->fileManager, $this->postponedRowsHandler);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ImportMessageProcessor_8dd07e7', false)) {
    \class_alias(__NAMESPACE__.'\\ImportMessageProcessor_8dd07e7', 'ImportMessageProcessor_8dd07e7', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Handler/AbstractHandler.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Handler/ExportHandler.php';

class ExportHandler_63577cf extends \Oro\Bundle\ImportExportBundle\Handler\ExportHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ImportExportBundle\Handler\ExportHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getExportResult($jobName, $processorAlias, $processorType = 'export', $outputFormat = 'csv', $outputFilePrefix = null, array $options = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getExportResult', array('jobName' => $jobName, 'processorAlias' => $processorAlias, 'processorType' => $processorType, 'outputFormat' => $outputFormat, 'outputFilePrefix' => $outputFilePrefix, 'options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getExportResult($jobName, $processorAlias, $processorType, $outputFormat, $outputFilePrefix, $options);
    }

    public function getExportingEntityIds($jobName, $processorType, $processorAlias, $options)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getExportingEntityIds', array('jobName' => $jobName, 'processorType' => $processorType, 'processorAlias' => $processorAlias, 'options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getExportingEntityIds($jobName, $processorType, $processorAlias, $options);
    }

    public function exportResultFileMerge($jobName, $processorType, $outputFormat, array $files)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'exportResultFileMerge', array('jobName' => $jobName, 'processorType' => $processorType, 'outputFormat' => $outputFormat, 'files' => $files), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->exportResultFileMerge($jobName, $processorType, $outputFormat, $files);
    }

    public function handleExport($jobName, $processorAlias, $exportType = 'export', $outputFormat = 'csv', $outputFilePrefix = null, array $options = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'handleExport', array('jobName' => $jobName, 'processorAlias' => $processorAlias, 'exportType' => $exportType, 'outputFormat' => $outputFormat, 'outputFilePrefix' => $outputFilePrefix, 'options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->handleExport($jobName, $processorAlias, $exportType, $outputFormat, $outputFilePrefix, $options);
    }

    public function handleDownloadExportResult($fileName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'handleDownloadExportResult', array('fileName' => $fileName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->handleDownloadExportResult($fileName);
    }

    public function getEntityName($processorType, $processorAlias) : ?string
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array('processorType' => $processorType, 'processorAlias' => $processorAlias), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName($processorType, $processorAlias);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->jobExecutor, $instance->processorRegistry, $instance->entityConfigProvider, $instance->translator, $instance->writerChain, $instance->readerChain, $instance->batchFileManager, $instance->fileManager);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\ImportExportBundle\Job\JobExecutor $jobExecutor, \Oro\Bundle\ImportExportBundle\Processor\ProcessorRegistry $processorRegistry, \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $entityConfigProvider, \Symfony\Contracts\Translation\TranslatorInterface $translator, \Oro\Bundle\ImportExportBundle\Writer\WriterChain $writerChain, \Oro\Bundle\ImportExportBundle\Reader\ReaderChain $readerChain, \Oro\Bundle\ImportExportBundle\File\BatchFileManager $batchFileManager, \Oro\Bundle\ImportExportBundle\File\FileManager $fileManager)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Handler\\ExportHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->jobExecutor, $this->processorRegistry, $this->entityConfigProvider, $this->translator, $this->writerChain, $this->readerChain, $this->batchFileManager, $this->fileManager);

        }

        $this->valueHoldere0de0->__construct($jobExecutor, $processorRegistry, $entityConfigProvider, $translator, $writerChain, $readerChain, $batchFileManager, $fileManager);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Handler\\ExportHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Handler\\ExportHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Handler\\ExportHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Handler\\ExportHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->jobExecutor, $this->processorRegistry, $this->entityConfigProvider, $this->translator, $this->writerChain, $this->readerChain, $this->batchFileManager, $this->fileManager);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ExportHandler_63577cf', false)) {
    \class_alias(__NAMESPACE__.'\\ExportHandler_63577cf', 'ExportHandler_63577cf', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Handler/ImportHandler.php';

class ImportHandler_eb17db4 extends \Oro\Bundle\ImportExportBundle\Handler\ImportHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ImportExportBundle\Handler\ImportHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function handle(string $process, string $jobName, string $processorAlias, array $options = []) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'handle', array('process' => $process, 'jobName' => $jobName, 'processorAlias' => $processorAlias, 'options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->handle($process, $jobName, $processorAlias, $options);
    }

    public function splitImportFile(string $jobName, string $processorType, \Oro\Bundle\ImportExportBundle\Writer\FileStreamWriter $writer) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'splitImportFile', array('jobName' => $jobName, 'processorType' => $processorType, 'writer' => $writer), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->splitImportFile($jobName, $processorType, $writer);
    }

    public function handleImportValidation(string $jobName, string $processorAlias, array $options = []) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'handleImportValidation', array('jobName' => $jobName, 'processorAlias' => $processorAlias, 'options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->handleImportValidation($jobName, $processorAlias, $options);
    }

    public function handleImport(string $jobName, string $processorAlias, array $options = []) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'handleImport', array('jobName' => $jobName, 'processorAlias' => $processorAlias, 'options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->handleImport($jobName, $processorAlias, $options);
    }

    public function setImportingFileName($fileName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setImportingFileName', array('fileName' => $fileName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setImportingFileName($fileName);
    }

    public function setConfigurationOptions(array $options)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setConfigurationOptions', array('options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setConfigurationOptions($options);
    }

    public function getEntityName($processorType, $processorAlias) : ?string
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array('processorType' => $processorType, 'processorAlias' => $processorAlias), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName($processorType, $processorAlias);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->configurationOptions, $instance->importingFileName, $instance->jobExecutor, $instance->processorRegistry, $instance->entityConfigProvider, $instance->translator, $instance->writerChain, $instance->readerChain, $instance->batchFileManager, $instance->fileManager);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\ImportExportBundle\Job\JobExecutor $jobExecutor, \Oro\Bundle\ImportExportBundle\Processor\ProcessorRegistry $processorRegistry, \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $entityConfigProvider, \Symfony\Contracts\Translation\TranslatorInterface $translator, \Oro\Bundle\ImportExportBundle\Writer\WriterChain $writerChain, \Oro\Bundle\ImportExportBundle\Reader\ReaderChain $readerChain, \Oro\Bundle\ImportExportBundle\File\BatchFileManager $batchFileManager, \Oro\Bundle\ImportExportBundle\File\FileManager $fileManager)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Handler\\ImportHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->configurationOptions, $this->importingFileName, $this->jobExecutor, $this->processorRegistry, $this->entityConfigProvider, $this->translator, $this->writerChain, $this->readerChain, $this->batchFileManager, $this->fileManager);

        }

        $this->valueHoldere0de0->__construct($jobExecutor, $processorRegistry, $entityConfigProvider, $translator, $writerChain, $readerChain, $batchFileManager, $fileManager);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Handler\\ImportHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Handler\\ImportHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Handler\\ImportHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Handler\\ImportHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->configurationOptions, $this->importingFileName, $this->jobExecutor, $this->processorRegistry, $this->entityConfigProvider, $this->translator, $this->writerChain, $this->readerChain, $this->batchFileManager, $this->fileManager);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ImportHandler_eb17db4', false)) {
    \class_alias(__NAMESPACE__.'\\ImportHandler_eb17db4', 'ImportHandler_eb17db4', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/ImportExportBundle/Job/JobExecutor.php';

class JobExecutor_2e691fd extends \Oro\Bundle\ImportExportBundle\Job\JobExecutor implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ImportExportBundle\Job\JobExecutor|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setEventDispatcher($eventDispatcher)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setEventDispatcher', array('eventDispatcher' => $eventDispatcher), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setEventDispatcher($eventDispatcher);
    }

    public function executeJob($jobType, $jobName, array $configuration = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'executeJob', array('jobType' => $jobType, 'jobName' => $jobName, 'configuration' => $configuration), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->executeJob($jobType, $jobName, $configuration);
    }

    public function getJobErrors($jobCode)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getJobErrors', array('jobCode' => $jobCode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getJobErrors($jobCode);
    }

    public function getJobFailureExceptions($jobCode)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getJobFailureExceptions', array('jobCode' => $jobCode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getJobFailureExceptions($jobCode);
    }

    public function getJob($jobType, $jobName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getJob', array('jobType' => $jobType, 'jobName' => $jobName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getJob($jobType, $jobName);
    }

    public function setValidationMode($validationMode)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setValidationMode', array('validationMode' => $validationMode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setValidationMode($validationMode);
    }

    public function isValidationMode()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isValidationMode', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isValidationMode();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->entityManager, $instance->batchJobRegistry, $instance->contextRegistry, $instance->managerRegistry, $instance->batchJobRepository, $instance->eventDispatcher, $instance->validationMode, $instance->contextAggregatorRegistry);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\BatchBundle\Connector\ConnectorRegistry $jobRegistry, \Oro\Bundle\BatchBundle\Job\DoctrineJobRepository $batchJobRepository, \Oro\Bundle\ImportExportBundle\Context\ContextRegistry $contextRegistry, \Symfony\Bridge\Doctrine\ManagerRegistry $managerRegistry, \Oro\Bundle\ImportExportBundle\Job\Context\ContextAggregatorRegistry $contextAggregatorRegistry)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Job\\JobExecutor');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->entityManager, $this->batchJobRegistry, $this->contextRegistry, $this->managerRegistry, $this->batchJobRepository, $this->eventDispatcher, $this->validationMode, $this->contextAggregatorRegistry);

        }

        $this->valueHoldere0de0->__construct($jobRegistry, $batchJobRepository, $contextRegistry, $managerRegistry, $contextAggregatorRegistry);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Job\\JobExecutor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Job\\JobExecutor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Job\\JobExecutor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ImportExportBundle\\Job\\JobExecutor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->entityManager, $this->batchJobRegistry, $this->contextRegistry, $this->managerRegistry, $this->batchJobRepository, $this->eventDispatcher, $this->validationMode, $this->contextAggregatorRegistry);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('JobExecutor_2e691fd', false)) {
    \class_alias(__NAMESPACE__.'\\JobExecutor_2e691fd', 'JobExecutor_2e691fd', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Datagrid/StatusGridHelper.php';

class StatusGridHelper_7ac0cd9 extends \Oro\Bundle\IntegrationBundle\Datagrid\StatusGridHelper implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\IntegrationBundle\Datagrid\StatusGridHelper|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function statusGridBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'statusGridBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->statusGridBuildBefore($event);
    }

    public function statusGridBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'statusGridBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->statusGridBuildAfter($event);
    }

    public function connectorCodeProperty()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'connectorCodeProperty', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->connectorCodeProperty();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->typesRegistry, $instance->translator);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\IntegrationBundle\Manager\TypesRegistry $typesRegistry, \Symfony\Contracts\Translation\TranslatorInterface $translator)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Datagrid\\StatusGridHelper');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->typesRegistry, $this->translator);

        }

        $this->valueHoldere0de0->__construct($typesRegistry, $translator);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Datagrid\\StatusGridHelper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Datagrid\\StatusGridHelper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Datagrid\\StatusGridHelper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Datagrid\\StatusGridHelper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->typesRegistry, $this->translator);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('StatusGridHelper_7ac0cd9', false)) {
    \class_alias(__NAMESPACE__.'\\StatusGridHelper_7ac0cd9', 'StatusGridHelper_7ac0cd9', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/ImportExport/Job/Executor.php';

class Executor_618db2e extends \Oro\Bundle\IntegrationBundle\ImportExport\Job\Executor implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\IntegrationBundle\ImportExport\Job\Executor|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setEventDispatcher($eventDispatcher)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setEventDispatcher', array('eventDispatcher' => $eventDispatcher), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setEventDispatcher($eventDispatcher);
    }

    public function executeJob($jobType, $jobName, array $configuration = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'executeJob', array('jobType' => $jobType, 'jobName' => $jobName, 'configuration' => $configuration), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->executeJob($jobType, $jobName, $configuration);
    }

    public function getJobErrors($jobCode)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getJobErrors', array('jobCode' => $jobCode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getJobErrors($jobCode);
    }

    public function getJobFailureExceptions($jobCode)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getJobFailureExceptions', array('jobCode' => $jobCode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getJobFailureExceptions($jobCode);
    }

    public function getJob($jobType, $jobName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getJob', array('jobType' => $jobType, 'jobName' => $jobName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getJob($jobType, $jobName);
    }

    public function setValidationMode($validationMode)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setValidationMode', array('validationMode' => $validationMode), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setValidationMode($validationMode);
    }

    public function isValidationMode()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isValidationMode', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isValidationMode();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->entityManager, $instance->batchJobRegistry, $instance->contextRegistry, $instance->managerRegistry, $instance->batchJobRepository, $instance->eventDispatcher, $instance->validationMode, $instance->contextAggregatorRegistry);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\BatchBundle\Connector\ConnectorRegistry $jobRegistry, \Oro\Bundle\BatchBundle\Job\DoctrineJobRepository $batchJobRepository, \Oro\Bundle\ImportExportBundle\Context\ContextRegistry $contextRegistry, \Symfony\Bridge\Doctrine\ManagerRegistry $managerRegistry, \Oro\Bundle\ImportExportBundle\Job\Context\ContextAggregatorRegistry $contextAggregatorRegistry)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\ImportExport\\Job\\Executor');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->entityManager, $this->batchJobRegistry, $this->contextRegistry, $this->managerRegistry, $this->batchJobRepository, $this->eventDispatcher, $this->validationMode, $this->contextAggregatorRegistry);

        }

        $this->valueHoldere0de0->__construct($jobRegistry, $batchJobRepository, $contextRegistry, $managerRegistry, $contextAggregatorRegistry);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\ImportExport\\Job\\Executor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\ImportExport\\Job\\Executor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\ImportExport\\Job\\Executor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\ImportExport\\Job\\Executor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->entityManager, $this->batchJobRegistry, $this->contextRegistry, $this->managerRegistry, $this->batchJobRepository, $this->eventDispatcher, $this->validationMode, $this->contextAggregatorRegistry);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('Executor_618db2e', false)) {
    \class_alias(__NAMESPACE__.'\\Executor_618db2e', 'Executor_618db2e', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Manager/TypesRegistry.php';

class TypesRegistry_bf0da67 extends \Oro\Bundle\IntegrationBundle\Manager\TypesRegistry implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\IntegrationBundle\Manager\TypesRegistry|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function addChannelType($typeName, \Oro\Bundle\IntegrationBundle\Provider\ChannelInterface $type)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addChannelType', array('typeName' => $typeName, 'type' => $type), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->addChannelType($typeName, $type);
    }

    public function getRegisteredChannelTypes()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getRegisteredChannelTypes', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getRegisteredChannelTypes();
    }

    public function getIntegrationByType($typeName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getIntegrationByType', array('typeName' => $typeName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getIntegrationByType($typeName);
    }

    public function getAvailableChannelTypesChoiceList()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAvailableChannelTypesChoiceList', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAvailableChannelTypesChoiceList();
    }

    public function getAvailableIntegrationTypesDetailedData()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAvailableIntegrationTypesDetailedData', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAvailableIntegrationTypesDetailedData();
    }

    public function addTransportType($typeName, $integrationTypeName, \Oro\Bundle\IntegrationBundle\Provider\TransportInterface $type)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addTransportType', array('typeName' => $typeName, 'integrationTypeName' => $integrationTypeName, 'type' => $type), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->addTransportType($typeName, $integrationTypeName, $type);
    }

    public function getTransportType($integrationTypeName, $transportType)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getTransportType', array('integrationTypeName' => $integrationTypeName, 'transportType' => $transportType), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getTransportType($integrationTypeName, $transportType);
    }

    public function getRegisteredTransportTypes($integrationType)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getRegisteredTransportTypes', array('integrationType' => $integrationType), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getRegisteredTransportTypes($integrationType);
    }

    public function getAvailableTransportTypesChoiceList($integrationType)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAvailableTransportTypesChoiceList', array('integrationType' => $integrationType), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAvailableTransportTypesChoiceList($integrationType);
    }

    public function getTransportTypeBySettingEntity(\Oro\Bundle\IntegrationBundle\Entity\Transport $transportEntity, $integrationType, $typeNameOnly = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getTransportTypeBySettingEntity', array('transportEntity' => $transportEntity, 'integrationType' => $integrationType, 'typeNameOnly' => $typeNameOnly), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getTransportTypeBySettingEntity($transportEntity, $integrationType, $typeNameOnly);
    }

    public function addConnectorType($typeName, $integrationTypeName, \Oro\Bundle\IntegrationBundle\Provider\ConnectorInterface $type)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addConnectorType', array('typeName' => $typeName, 'integrationTypeName' => $integrationTypeName, 'type' => $type), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->addConnectorType($typeName, $integrationTypeName, $type);
    }

    public function getConnectorType($integrationType, $type)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getConnectorType', array('integrationType' => $integrationType, 'type' => $type), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getConnectorType($integrationType, $type);
    }

    public function getRegisteredConnectorsTypes($integrationType, $filterClosure = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getRegisteredConnectorsTypes', array('integrationType' => $integrationType, 'filterClosure' => $filterClosure), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getRegisteredConnectorsTypes($integrationType, $filterClosure);
    }

    public function getAvailableConnectorsTypesChoiceList($integrationType, $filterClosure = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAvailableConnectorsTypesChoiceList', array('integrationType' => $integrationType, 'filterClosure' => $filterClosure), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAvailableConnectorsTypesChoiceList($integrationType, $filterClosure);
    }

    public function supportsForceSync($integrationType)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'supportsForceSync', array('integrationType' => $integrationType), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->supportsForceSync($integrationType);
    }

    public function supportsSync($integrationType)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'supportsSync', array('integrationType' => $integrationType), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->supportsSync($integrationType);
    }

    public function getDefaultOwnerType($integrationType = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDefaultOwnerType', array('integrationType' => $integrationType), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDefaultOwnerType($integrationType);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->integrationTypes, $instance->transportTypes, $instance->connectorTypes);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct()
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Manager\\TypesRegistry');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->integrationTypes, $this->transportTypes, $this->connectorTypes);

        }

        $this->valueHoldere0de0->__construct();
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Manager\\TypesRegistry');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Manager\\TypesRegistry');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Manager\\TypesRegistry');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Manager\\TypesRegistry');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->integrationTypes, $this->transportTypes, $this->connectorTypes);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('TypesRegistry_bf0da67', false)) {
    \class_alias(__NAMESPACE__.'\\TypesRegistry_bf0da67', 'TypesRegistry_bf0da67', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Provider/SyncProcessorInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/psr/log/Psr/Log/LoggerAwareInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Provider/LoggerStrategyAwareInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/psr/log/Psr/Log/LoggerAwareTrait.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Provider/AbstractSyncProcessor.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Provider/ReverseSyncProcessor.php';

class ReverseSyncProcessor_0ecbb23 extends \Oro\Bundle\IntegrationBundle\Provider\ReverseSyncProcessor implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\IntegrationBundle\Provider\ReverseSyncProcessor|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function process(\Oro\Bundle\IntegrationBundle\Entity\Channel $integration, $connector, array $parameters = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'process', array('integration' => $integration, 'connector' => $connector, 'parameters' => $parameters), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->process($integration, $connector, $parameters);
    }

    public function getLoggerStrategy()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getLoggerStrategy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getLoggerStrategy();
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLogger', array('logger' => $logger), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->doctrineRegistry, $instance->processorRegistry, $instance->jobExecutor, $instance->registry, $instance->eventDispatcher, $instance->logger);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\Persistence\ManagerRegistry $doctrineRegistry, \Oro\Bundle\ImportExportBundle\Processor\ProcessorRegistry $processorRegistry, \Oro\Bundle\IntegrationBundle\ImportExport\Job\Executor $jobExecutor, \Oro\Bundle\IntegrationBundle\Manager\TypesRegistry $registry, \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher, ?\Oro\Bundle\IntegrationBundle\Logger\LoggerStrategy $logger = null)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Provider\\ReverseSyncProcessor');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->doctrineRegistry, $this->processorRegistry, $this->jobExecutor, $this->registry, $this->eventDispatcher, $this->logger);

        }

        $this->valueHoldere0de0->__construct($doctrineRegistry, $processorRegistry, $jobExecutor, $registry, $eventDispatcher, $logger);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Provider\\ReverseSyncProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Provider\\ReverseSyncProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Provider\\ReverseSyncProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Provider\\ReverseSyncProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->doctrineRegistry, $this->processorRegistry, $this->jobExecutor, $this->registry, $this->eventDispatcher, $this->logger);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ReverseSyncProcessor_0ecbb23', false)) {
    \class_alias(__NAMESPACE__.'\\ReverseSyncProcessor_0ecbb23', 'ReverseSyncProcessor_0ecbb23', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/IntegrationBundle/Provider/SyncProcessor.php';

class SyncProcessor_85b423b extends \Oro\Bundle\IntegrationBundle\Provider\SyncProcessor implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\IntegrationBundle\Provider\SyncProcessor|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function process(\Oro\Bundle\IntegrationBundle\Entity\Channel $integration, $connector = null, array $parameters = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'process', array('integration' => $integration, 'connector' => $connector, 'parameters' => $parameters), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->process($integration, $connector, $parameters);
    }

    public function getLoggerStrategy()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getLoggerStrategy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getLoggerStrategy();
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLogger', array('logger' => $logger), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->doctrineRegistry, $instance->processorRegistry, $instance->jobExecutor, $instance->registry, $instance->eventDispatcher, $instance->logger);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\Persistence\ManagerRegistry $doctrineRegistry, \Oro\Bundle\ImportExportBundle\Processor\ProcessorRegistry $processorRegistry, \Oro\Bundle\IntegrationBundle\ImportExport\Job\Executor $jobExecutor, \Oro\Bundle\IntegrationBundle\Manager\TypesRegistry $registry, \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher, ?\Oro\Bundle\IntegrationBundle\Logger\LoggerStrategy $logger = null)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Provider\\SyncProcessor');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->doctrineRegistry, $this->processorRegistry, $this->jobExecutor, $this->registry, $this->eventDispatcher, $this->logger);

        }

        $this->valueHoldere0de0->__construct($doctrineRegistry, $processorRegistry, $jobExecutor, $registry, $eventDispatcher, $logger);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Provider\\SyncProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Provider\\SyncProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Provider\\SyncProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\IntegrationBundle\\Provider\\SyncProcessor');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->doctrineRegistry, $this->processorRegistry, $this->jobExecutor, $this->registry, $this->eventDispatcher, $this->logger);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('SyncProcessor_85b423b', false)) {
    \class_alias(__NAMESPACE__.'\\SyncProcessor_85b423b', 'SyncProcessor_85b423b', false);
}
include_once \dirname(__DIR__, 4).'/vendor/psr/cache/src/CacheItemPoolInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/AdapterInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/CacheInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ResetInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/ResettableInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/ArrayAdapter.php';

class ArrayAdapter_f4a3501 extends \Symfony\Component\Cache\Adapter\ArrayAdapter implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Symfony\Component\Cache\Adapter\ArrayAdapter|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function get(string $key, callable $callback, ?float $beta = null, ?array &$metadata = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'get', array('key' => $key, 'callback' => $callback, 'beta' => $beta, 'metadata' => $metadata), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->get($key, $callback, $beta, $metadata);
    }

    public function delete(string $key) : bool
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'delete', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->delete($key);
    }

    public function hasItem($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'hasItem', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->hasItem($key);
    }

    public function getItem($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getItem', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getItem($key);
    }

    public function getItems(array $keys = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getItems', array('keys' => $keys), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getItems($keys);
    }

    public function deleteItem($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'deleteItem', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->deleteItem($key);
    }

    public function deleteItems(array $keys)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'deleteItems', array('keys' => $keys), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->deleteItems($keys);
    }

    public function save(\Psr\Cache\CacheItemInterface $item)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'save', array('item' => $item), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->save($item);
    }

    public function saveDeferred(\Psr\Cache\CacheItemInterface $item)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'saveDeferred', array('item' => $item), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->saveDeferred($item);
    }

    public function commit()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'commit', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->commit();
    }

    public function clear(string $prefix = '')
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'clear', array('prefix' => $prefix), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->clear($prefix);
    }

    public function getValues()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getValues', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getValues();
    }

    public function reset()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'reset', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->reset();
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLogger', array('logger' => $logger), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\ArrayAdapter $instance) {
            unset($instance->storeSerialized, $instance->values, $instance->expiries, $instance->defaultLifetime, $instance->maxLifetime, $instance->maxItems);
        }, $instance, 'Symfony\\Component\\Cache\\Adapter\\ArrayAdapter')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(int $defaultLifetime = 0, bool $storeSerialized = true, float $maxLifetime = 0, int $maxItems = 0)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Symfony\\Component\\Cache\\Adapter\\ArrayAdapter');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\ArrayAdapter $instance) {
            unset($instance->storeSerialized, $instance->values, $instance->expiries, $instance->defaultLifetime, $instance->maxLifetime, $instance->maxItems);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\ArrayAdapter')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($defaultLifetime, $storeSerialized, $maxLifetime, $maxItems);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Symfony\\Component\\Cache\\Adapter\\ArrayAdapter');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Symfony\\Component\\Cache\\Adapter\\ArrayAdapter');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Symfony\\Component\\Cache\\Adapter\\ArrayAdapter');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Symfony\\Component\\Cache\\Adapter\\ArrayAdapter');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\ArrayAdapter $instance) {
            unset($instance->storeSerialized, $instance->values, $instance->expiries, $instance->defaultLifetime, $instance->maxLifetime, $instance->maxItems);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\ArrayAdapter')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ArrayAdapter_f4a3501', false)) {
    \class_alias(__NAMESPACE__.'\\ArrayAdapter_f4a3501', 'ArrayAdapter_f4a3501', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Component/MessageQueue/Client/MessageProducerInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Component/MessageQueue/Client/MessageProducer.php';

class MessageProducer_ba0b794 extends \Oro\Component\MessageQueue\Client\MessageProducer implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Component\MessageQueue\Client\MessageProducer|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function send($topic, $message) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'send', array('topic' => $topic, 'message' => $message), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->send($topic, $message);
return;
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLogger', array('logger' => $logger), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->logger);

        \Closure::bind(function (\Oro\Component\MessageQueue\Client\MessageProducer $instance) {
            unset($instance->driver, $instance->messageRouter, $instance->debug);
        }, $instance, 'Oro\\Component\\MessageQueue\\Client\\MessageProducer')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Component\MessageQueue\Client\DriverInterface $driver, \Oro\Component\MessageQueue\Client\Router\MessageRouterInterface $messageRouter, bool $debug = false)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Component\\MessageQueue\\Client\\MessageProducer');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->logger);

        \Closure::bind(function (\Oro\Component\MessageQueue\Client\MessageProducer $instance) {
            unset($instance->driver, $instance->messageRouter, $instance->debug);
        }, $this, 'Oro\\Component\\MessageQueue\\Client\\MessageProducer')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($driver, $messageRouter, $debug);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Component\\MessageQueue\\Client\\MessageProducer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Component\\MessageQueue\\Client\\MessageProducer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Component\\MessageQueue\\Client\\MessageProducer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Component\\MessageQueue\\Client\\MessageProducer');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->logger);

        \Closure::bind(function (\Oro\Component\MessageQueue\Client\MessageProducer $instance) {
            unset($instance->driver, $instance->messageRouter, $instance->debug);
        }, $this, 'Oro\\Component\\MessageQueue\\Client\\MessageProducer')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('MessageProducer_ba0b794', false)) {
    \class_alias(__NAMESPACE__.'\\MessageProducer_ba0b794', 'MessageProducer_ba0b794', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Component/MessageQueue/Log/MessageProcessorClassProvider.php';

class MessageProcessorClassProvider_57a37c0 extends \Oro\Component\MessageQueue\Log\MessageProcessorClassProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Component\MessageQueue\Log\MessageProcessorClassProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getMessageProcessorClassByName(string $messageProcessorName) : string
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getMessageProcessorClassByName', array('messageProcessorName' => $messageProcessorName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getMessageProcessorClassByName($messageProcessorName);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Component\MessageQueue\Log\MessageProcessorClassProvider $instance) {
            unset($instance->messageProcessorRegistry, $instance->messageProcessorClassByName);
        }, $instance, 'Oro\\Component\\MessageQueue\\Log\\MessageProcessorClassProvider')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Component\MessageQueue\Client\MessageProcessorRegistryInterface $messageProcessorRegistry)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Component\\MessageQueue\\Log\\MessageProcessorClassProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Component\MessageQueue\Log\MessageProcessorClassProvider $instance) {
            unset($instance->messageProcessorRegistry, $instance->messageProcessorClassByName);
        }, $this, 'Oro\\Component\\MessageQueue\\Log\\MessageProcessorClassProvider')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($messageProcessorRegistry);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Component\\MessageQueue\\Log\\MessageProcessorClassProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Component\\MessageQueue\\Log\\MessageProcessorClassProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Component\\MessageQueue\\Log\\MessageProcessorClassProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Component\\MessageQueue\\Log\\MessageProcessorClassProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Component\MessageQueue\Log\MessageProcessorClassProvider $instance) {
            unset($instance->messageProcessorRegistry, $instance->messageProcessorClassByName);
        }, $this, 'Oro\\Component\\MessageQueue\\Log\\MessageProcessorClassProvider')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('MessageProcessorClassProvider_57a37c0', false)) {
    \class_alias(__NAMESPACE__.'\\MessageProcessorClassProvider_57a37c0', 'MessageProcessorClassProvider_57a37c0', false);
}
include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Visitor/Visitor.php';
include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Visitor/NamespaceVisitor.php';
include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Schema/Visitor/AbstractVisitor.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/MigrationBundle/Tools/SchemaDumper.php';

class SchemaDumper_3b4a9bc extends \Oro\Bundle\MigrationBundle\Tools\SchemaDumper implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\MigrationBundle\Tools\SchemaDumper|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function acceptSchema(\Doctrine\DBAL\Schema\Schema $schema)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'acceptSchema', array('schema' => $schema), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->acceptSchema($schema);
    }

    public function dump(?array $allowedTables = null, $namespace = null, $className = 'AllMigration', $version = 'v1_0', ?array $extendedOptions = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'dump', array('allowedTables' => $allowedTables, 'namespace' => $namespace, 'className' => $className, 'version' => $version, 'extendedOptions' => $extendedOptions), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->dump($allowedTables, $namespace, $className, $version, $extendedOptions);
    }

    public function acceptNamespace($namespaceName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'acceptNamespace', array('namespaceName' => $namespaceName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->acceptNamespace($namespaceName);
    }

    public function acceptTable(\Doctrine\DBAL\Schema\Table $table)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'acceptTable', array('table' => $table), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->acceptTable($table);
    }

    public function acceptColumn(\Doctrine\DBAL\Schema\Table $table, \Doctrine\DBAL\Schema\Column $column)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'acceptColumn', array('table' => $table, 'column' => $column), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->acceptColumn($table, $column);
    }

    public function acceptForeignKey(\Doctrine\DBAL\Schema\Table $localTable, \Doctrine\DBAL\Schema\ForeignKeyConstraint $fkConstraint)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'acceptForeignKey', array('localTable' => $localTable, 'fkConstraint' => $fkConstraint), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->acceptForeignKey($localTable, $fkConstraint);
    }

    public function acceptIndex(\Doctrine\DBAL\Schema\Table $table, \Doctrine\DBAL\Schema\Index $index)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'acceptIndex', array('table' => $table, 'index' => $index), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->acceptIndex($table, $index);
    }

    public function acceptSequence(\Doctrine\DBAL\Schema\Sequence $sequence)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'acceptSequence', array('sequence' => $sequence), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->acceptSequence($sequence);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->schema, $instance->twig);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Twig\Environment $twig)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\MigrationBundle\\Tools\\SchemaDumper');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->schema, $this->twig);

        }

        $this->valueHoldere0de0->__construct($twig);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\MigrationBundle\\Tools\\SchemaDumper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\MigrationBundle\\Tools\\SchemaDumper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\MigrationBundle\\Tools\\SchemaDumper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\MigrationBundle\\Tools\\SchemaDumper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->schema, $this->twig);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('SchemaDumper_3b4a9bc', false)) {
    \class_alias(__NAMESPACE__.'\\SchemaDumper_3b4a9bc', 'SchemaDumper_3b4a9bc', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/NavigationBundle/EventListener/MenuGridListener.php';

class MenuGridListener_447a5f0 extends \Oro\Bundle\NavigationBundle\EventListener\MenuGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\NavigationBundle\EventListener\MenuGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onPreBuild(\Oro\Bundle\DataGridBundle\Event\PreBuild $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onPreBuild', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onPreBuild($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct()
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\NavigationBundle\\EventListener\\MenuGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        }
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\NavigationBundle\\EventListener\\MenuGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\NavigationBundle\\EventListener\\MenuGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\NavigationBundle\\EventListener\\MenuGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\NavigationBundle\\EventListener\\MenuGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('MenuGridListener_447a5f0', false)) {
    \class_alias(__NAMESPACE__.'\\MenuGridListener_447a5f0', 'MenuGridListener_447a5f0', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/NotificationBundle/Provider/EmailNotificationEntityProvider.php';

class EmailNotificationEntityProvider_a2e52bf extends \Oro\Bundle\NotificationBundle\Provider\EmailNotificationEntityProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\NotificationBundle\Provider\EmailNotificationEntityProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setExclusionProvider(\Oro\Bundle\EntityBundle\Provider\ExclusionProviderInterface $exclusionProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setExclusionProvider', array('exclusionProvider' => $exclusionProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setExclusionProvider($exclusionProvider);
    }

    public function getEntities($sortByPluralLabel = true, $applyExclusions = true, $translate = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntities', array('sortByPluralLabel' => $sortByPluralLabel, 'applyExclusions' => $applyExclusions, 'translate' => $translate), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntities($sortByPluralLabel, $applyExclusions, $translate);
    }

    public function getEntity($entityName, $translate = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntity', array('entityName' => $entityName, 'translate' => $translate), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntity($entityName, $translate);
    }

    public function getEnabledEntity($entityName, $applyExclusions = true, $translate = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEnabledEntity', array('entityName' => $entityName, 'applyExclusions' => $applyExclusions, 'translate' => $translate), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEnabledEntity($entityName, $applyExclusions, $translate);
    }

    public function isIgnoredEntity($className)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isIgnoredEntity', array('className' => $className), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isIgnoredEntity($className);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->entityConfigProvider, $instance->extendConfigProvider, $instance->entityClassResolver, $instance->translator, $instance->exclusionProvider, $instance->featureChecker);

        \Closure::bind(function (\Oro\Bundle\NotificationBundle\Provider\EmailNotificationEntityProvider $instance) {
            unset($instance->doctrine);
        }, $instance, 'Oro\\Bundle\\NotificationBundle\\Provider\\EmailNotificationEntityProvider')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $entityConfigProvider, \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $extendConfigProvider, \Oro\Bundle\EntityBundle\ORM\EntityClassResolver $entityClassResolver, \Symfony\Contracts\Translation\TranslatorInterface $translator, \Oro\Bundle\FeatureToggleBundle\Checker\FeatureChecker $featureChecker, \Symfony\Bridge\Doctrine\ManagerRegistry $doctrine)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\NotificationBundle\\Provider\\EmailNotificationEntityProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->entityConfigProvider, $this->extendConfigProvider, $this->entityClassResolver, $this->translator, $this->exclusionProvider, $this->featureChecker);

        \Closure::bind(function (\Oro\Bundle\NotificationBundle\Provider\EmailNotificationEntityProvider $instance) {
            unset($instance->doctrine);
        }, $this, 'Oro\\Bundle\\NotificationBundle\\Provider\\EmailNotificationEntityProvider')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($entityConfigProvider, $extendConfigProvider, $entityClassResolver, $translator, $featureChecker, $doctrine);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\NotificationBundle\\Provider\\EmailNotificationEntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\NotificationBundle\\Provider\\EmailNotificationEntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\NotificationBundle\\Provider\\EmailNotificationEntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\NotificationBundle\\Provider\\EmailNotificationEntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->entityConfigProvider, $this->extendConfigProvider, $this->entityClassResolver, $this->translator, $this->exclusionProvider, $this->featureChecker);

        \Closure::bind(function (\Oro\Bundle\NotificationBundle\Provider\EmailNotificationEntityProvider $instance) {
            unset($instance->doctrine);
        }, $this, 'Oro\\Bundle\\NotificationBundle\\Provider\\EmailNotificationEntityProvider')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('EmailNotificationEntityProvider_a2e52bf', false)) {
    \class_alias(__NAMESPACE__.'\\EmailNotificationEntityProvider_a2e52bf', 'EmailNotificationEntityProvider_a2e52bf', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/oauth2-server/src/Oro/Bundle/OAuth2ServerBundle/Datagrid/EventListener/GrantClientDatagridListener.php';

class GrantClientDatagridListener_e337887 extends \Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\GrantClientDatagridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\GrantClientDatagridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->onBuildBefore($event);
return;
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->onBuildAfter($event);
return;
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct()
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\GrantClientDatagridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        }
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\GrantClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\GrantClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\GrantClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\GrantClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('GrantClientDatagridListener_e337887', false)) {
    \class_alias(__NAMESPACE__.'\\GrantClientDatagridListener_e337887', 'GrantClientDatagridListener_e337887', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/oauth2-server/src/Oro/Bundle/OAuth2ServerBundle/Datagrid/EventListener/OrganizationClientDatagridListener.php';

class OrganizationClientDatagridListener_1dcfb1b extends \Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\OrganizationClientDatagridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\OrganizationClientDatagridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->onBuildBefore($event);
return;
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->onBuildAfter($event);
return;
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\OrganizationClientDatagridListener $instance) {
            unset($instance->organizationsProvider);
        }, $instance, 'Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OrganizationClientDatagridListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\OAuth2ServerBundle\Provider\ClientOwnerOrganizationsProvider $organizationsProvider)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OrganizationClientDatagridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\OrganizationClientDatagridListener $instance) {
            unset($instance->organizationsProvider);
        }, $this, 'Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OrganizationClientDatagridListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($organizationsProvider);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OrganizationClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OrganizationClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OrganizationClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OrganizationClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\OrganizationClientDatagridListener $instance) {
            unset($instance->organizationsProvider);
        }, $this, 'Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OrganizationClientDatagridListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('OrganizationClientDatagridListener_1dcfb1b', false)) {
    \class_alias(__NAMESPACE__.'\\OrganizationClientDatagridListener_1dcfb1b', 'OrganizationClientDatagridListener_1dcfb1b', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/oauth2-server/src/Oro/Bundle/OAuth2ServerBundle/Datagrid/EventListener/OwnerClientDatagridListener.php';

class OwnerClientDatagridListener_8b05306 extends \Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\OwnerClientDatagridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\OwnerClientDatagridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function addOwnerColumn(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addOwnerColumn', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->addOwnerColumn($event);
return;
    }

    public function addOwnerData(\Oro\Bundle\DataGridBundle\Event\OrmResultAfter $event) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'addOwnerData', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->addOwnerData($event);
return;
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\OwnerClientDatagridListener $instance) {
            unset($instance->doctrine);
        }, $instance, 'Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OwnerClientDatagridListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\Persistence\ManagerRegistry $doctrine)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OwnerClientDatagridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\OwnerClientDatagridListener $instance) {
            unset($instance->doctrine);
        }, $this, 'Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OwnerClientDatagridListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($doctrine);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OwnerClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OwnerClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OwnerClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OwnerClientDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\OAuth2ServerBundle\Datagrid\EventListener\OwnerClientDatagridListener $instance) {
            unset($instance->doctrine);
        }, $this, 'Oro\\Bundle\\OAuth2ServerBundle\\Datagrid\\EventListener\\OwnerClientDatagridListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('OwnerClientDatagridListener_8b05306', false)) {
    \class_alias(__NAMESPACE__.'\\OwnerClientDatagridListener_8b05306', 'OwnerClientDatagridListener_8b05306', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/FormBundle/Autocomplete/SearchHandler.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Autocomplete/BusinessUnitOwnerSearchHandler.php';

class BusinessUnitOwnerSearchHandler_ed22092 extends \Oro\Bundle\OrganizationBundle\Autocomplete\BusinessUnitOwnerSearchHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\OrganizationBundle\Autocomplete\BusinessUnitOwnerSearchHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function convertItem($item)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertItem', array('item' => $item), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertItem($item);
    }

    public function getProperties()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProperties', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProperties();
    }

    public function initSearchIndexer(\Oro\Bundle\SearchBundle\Engine\Indexer $indexer, \Oro\Bundle\SearchBundle\Provider\SearchMappingProvider $mappingProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initSearchIndexer', array('indexer' => $indexer, 'mappingProvider' => $mappingProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initSearchIndexer($indexer, $mappingProvider);
    }

    public function initDoctrinePropertiesByManagerRegistry(\Doctrine\Persistence\ManagerRegistry $managerRegistry)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initDoctrinePropertiesByManagerRegistry', array('managerRegistry' => $managerRegistry), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initDoctrinePropertiesByManagerRegistry($managerRegistry);
    }

    public function initDoctrinePropertiesByEntityManager(\Doctrine\Persistence\ObjectManager $objectManager)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initDoctrinePropertiesByEntityManager', array('objectManager' => $objectManager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initDoctrinePropertiesByEntityManager($objectManager);
    }

    public function search($query, $page, $perPage, $searchById = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'search', array('query' => $query, 'page' => $page, 'perPage' => $perPage, 'searchById' => $searchById), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->search($query, $page, $perPage, $searchById);
    }

    public function getEntityName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName();
    }

    public function setAclHelper(\Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper $aclHelper)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setAclHelper', array('aclHelper' => $aclHelper), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setAclHelper($aclHelper);
    }

    public function setPropertyAccessor(\Symfony\Component\PropertyAccess\PropertyAccessorInterface $propertyAccessor)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setPropertyAccessor', array('propertyAccessor' => $propertyAccessor), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setPropertyAccessor($propertyAccessor);
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLogger', array('logger' => $logger), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->doctrine, $instance->indexer, $instance->entityRepository, $instance->entityName, $instance->entitySearchAlias, $instance->idFieldName, $instance->properties, $instance->objectManager, $instance->aclHelper, $instance->propertyAccessor, $instance->logger);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct($entityName, array $properties, \Doctrine\Bundle\DoctrineBundle\Registry $doctrine)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\BusinessUnitOwnerSearchHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->doctrine, $this->indexer, $this->entityRepository, $this->entityName, $this->entitySearchAlias, $this->idFieldName, $this->properties, $this->objectManager, $this->aclHelper, $this->propertyAccessor, $this->logger);

        }

        $this->valueHoldere0de0->__construct($entityName, $properties, $doctrine);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\BusinessUnitOwnerSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\BusinessUnitOwnerSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\BusinessUnitOwnerSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\BusinessUnitOwnerSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->doctrine, $this->indexer, $this->entityRepository, $this->entityName, $this->entitySearchAlias, $this->idFieldName, $this->properties, $this->objectManager, $this->aclHelper, $this->propertyAccessor, $this->logger);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('BusinessUnitOwnerSearchHandler_ed22092', false)) {
    \class_alias(__NAMESPACE__.'\\BusinessUnitOwnerSearchHandler_ed22092', 'BusinessUnitOwnerSearchHandler_ed22092', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Autocomplete/BusinessUnitTreeSearchHandler.php';

class BusinessUnitTreeSearchHandler_8ae81b3 extends \Oro\Bundle\OrganizationBundle\Autocomplete\BusinessUnitTreeSearchHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\OrganizationBundle\Autocomplete\BusinessUnitTreeSearchHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setTokenAccessor(\Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setTokenAccessor', array('tokenAccessor' => $tokenAccessor), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setTokenAccessor($tokenAccessor);
    }

    public function convertItem($item)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertItem', array('item' => $item), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertItem($item);
    }

    public function getProperties()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProperties', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProperties();
    }

    public function initSearchIndexer(\Oro\Bundle\SearchBundle\Engine\Indexer $indexer, \Oro\Bundle\SearchBundle\Provider\SearchMappingProvider $mappingProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initSearchIndexer', array('indexer' => $indexer, 'mappingProvider' => $mappingProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initSearchIndexer($indexer, $mappingProvider);
    }

    public function initDoctrinePropertiesByManagerRegistry(\Doctrine\Persistence\ManagerRegistry $managerRegistry)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initDoctrinePropertiesByManagerRegistry', array('managerRegistry' => $managerRegistry), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initDoctrinePropertiesByManagerRegistry($managerRegistry);
    }

    public function initDoctrinePropertiesByEntityManager(\Doctrine\Persistence\ObjectManager $objectManager)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initDoctrinePropertiesByEntityManager', array('objectManager' => $objectManager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initDoctrinePropertiesByEntityManager($objectManager);
    }

    public function search($query, $page, $perPage, $searchById = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'search', array('query' => $query, 'page' => $page, 'perPage' => $perPage, 'searchById' => $searchById), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->search($query, $page, $perPage, $searchById);
    }

    public function getEntityName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName();
    }

    public function setAclHelper(\Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper $aclHelper)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setAclHelper', array('aclHelper' => $aclHelper), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setAclHelper($aclHelper);
    }

    public function setPropertyAccessor(\Symfony\Component\PropertyAccess\PropertyAccessorInterface $propertyAccessor)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setPropertyAccessor', array('propertyAccessor' => $propertyAccessor), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setPropertyAccessor($propertyAccessor);
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLogger', array('logger' => $logger), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->tokenAccessor, $instance->doctrine, $instance->indexer, $instance->entityRepository, $instance->entityName, $instance->entitySearchAlias, $instance->idFieldName, $instance->properties, $instance->objectManager, $instance->aclHelper, $instance->propertyAccessor, $instance->logger);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct($entityName, array $properties, \Doctrine\Bundle\DoctrineBundle\Registry $doctrine)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\BusinessUnitTreeSearchHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->tokenAccessor, $this->doctrine, $this->indexer, $this->entityRepository, $this->entityName, $this->entitySearchAlias, $this->idFieldName, $this->properties, $this->objectManager, $this->aclHelper, $this->propertyAccessor, $this->logger);

        }

        $this->valueHoldere0de0->__construct($entityName, $properties, $doctrine);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\BusinessUnitTreeSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\BusinessUnitTreeSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\BusinessUnitTreeSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\BusinessUnitTreeSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->tokenAccessor, $this->doctrine, $this->indexer, $this->entityRepository, $this->entityName, $this->entitySearchAlias, $this->idFieldName, $this->properties, $this->objectManager, $this->aclHelper, $this->propertyAccessor, $this->logger);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('BusinessUnitTreeSearchHandler_8ae81b3', false)) {
    \class_alias(__NAMESPACE__.'\\BusinessUnitTreeSearchHandler_8ae81b3', 'BusinessUnitTreeSearchHandler_8ae81b3', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Autocomplete/OrganizationSearchHandler.php';

class OrganizationSearchHandler_bb0b46f extends \Oro\Bundle\OrganizationBundle\Autocomplete\OrganizationSearchHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\OrganizationBundle\Autocomplete\OrganizationSearchHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function search($query, $page, $perPage, $searchById = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'search', array('query' => $query, 'page' => $page, 'perPage' => $perPage, 'searchById' => $searchById), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->search($query, $page, $perPage, $searchById);
    }

    public function getProperties()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProperties', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProperties();
    }

    public function getEntityName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName();
    }

    public function convertItem($item)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertItem', array('item' => $item), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertItem($item);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->className, $instance->fields, $instance->displayFields, $instance->managerRegistry, $instance->tokenAccessor, $instance->accessor);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct($className, $fields, $displayFields, \Doctrine\Persistence\ManagerRegistry $managerRegistry, \Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\OrganizationSearchHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->className, $this->fields, $this->displayFields, $this->managerRegistry, $this->tokenAccessor, $this->accessor);

        }

        $this->valueHoldere0de0->__construct($className, $fields, $displayFields, $managerRegistry, $tokenAccessor);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\OrganizationSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\OrganizationSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\OrganizationSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\OrganizationSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->className, $this->fields, $this->displayFields, $this->managerRegistry, $this->tokenAccessor, $this->accessor);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('OrganizationSearchHandler_bb0b46f', false)) {
    \class_alias(__NAMESPACE__.'\\OrganizationSearchHandler_bb0b46f', 'OrganizationSearchHandler_bb0b46f', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Autocomplete/ParentBusinessUnitSearchHandler.php';

class ParentBusinessUnitSearchHandler_dfa6190 extends \Oro\Bundle\OrganizationBundle\Autocomplete\ParentBusinessUnitSearchHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\OrganizationBundle\Autocomplete\ParentBusinessUnitSearchHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setOwnerTreeProvider(\Oro\Bundle\SecurityBundle\Owner\OwnerTreeProviderInterface $ownerTreeProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setOwnerTreeProvider', array('ownerTreeProvider' => $ownerTreeProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setOwnerTreeProvider($ownerTreeProvider);
    }

    public function convertItem($item)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertItem', array('item' => $item), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertItem($item);
    }

    public function getProperties()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProperties', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProperties();
    }

    public function initSearchIndexer(\Oro\Bundle\SearchBundle\Engine\Indexer $indexer, \Oro\Bundle\SearchBundle\Provider\SearchMappingProvider $mappingProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initSearchIndexer', array('indexer' => $indexer, 'mappingProvider' => $mappingProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initSearchIndexer($indexer, $mappingProvider);
    }

    public function initDoctrinePropertiesByManagerRegistry(\Doctrine\Persistence\ManagerRegistry $managerRegistry)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initDoctrinePropertiesByManagerRegistry', array('managerRegistry' => $managerRegistry), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initDoctrinePropertiesByManagerRegistry($managerRegistry);
    }

    public function initDoctrinePropertiesByEntityManager(\Doctrine\Persistence\ObjectManager $objectManager)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initDoctrinePropertiesByEntityManager', array('objectManager' => $objectManager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initDoctrinePropertiesByEntityManager($objectManager);
    }

    public function search($query, $page, $perPage, $searchById = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'search', array('query' => $query, 'page' => $page, 'perPage' => $perPage, 'searchById' => $searchById), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->search($query, $page, $perPage, $searchById);
    }

    public function getEntityName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName();
    }

    public function setAclHelper(\Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper $aclHelper)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setAclHelper', array('aclHelper' => $aclHelper), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setAclHelper($aclHelper);
    }

    public function setPropertyAccessor(\Symfony\Component\PropertyAccess\PropertyAccessorInterface $propertyAccessor)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setPropertyAccessor', array('propertyAccessor' => $propertyAccessor), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setPropertyAccessor($propertyAccessor);
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLogger', array('logger' => $logger), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->doctrine, $instance->indexer, $instance->entityRepository, $instance->entityName, $instance->entitySearchAlias, $instance->idFieldName, $instance->properties, $instance->objectManager, $instance->aclHelper, $instance->propertyAccessor, $instance->logger);

        \Closure::bind(function (\Oro\Bundle\OrganizationBundle\Autocomplete\ParentBusinessUnitSearchHandler $instance) {
            unset($instance->ownerTreeProvider);
        }, $instance, 'Oro\\Bundle\\OrganizationBundle\\Autocomplete\\ParentBusinessUnitSearchHandler')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct($entityName, array $properties, \Doctrine\Bundle\DoctrineBundle\Registry $doctrine)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\ParentBusinessUnitSearchHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->doctrine, $this->indexer, $this->entityRepository, $this->entityName, $this->entitySearchAlias, $this->idFieldName, $this->properties, $this->objectManager, $this->aclHelper, $this->propertyAccessor, $this->logger);

        \Closure::bind(function (\Oro\Bundle\OrganizationBundle\Autocomplete\ParentBusinessUnitSearchHandler $instance) {
            unset($instance->ownerTreeProvider);
        }, $this, 'Oro\\Bundle\\OrganizationBundle\\Autocomplete\\ParentBusinessUnitSearchHandler')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($entityName, $properties, $doctrine);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\ParentBusinessUnitSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\ParentBusinessUnitSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\ParentBusinessUnitSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Autocomplete\\ParentBusinessUnitSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->doctrine, $this->indexer, $this->entityRepository, $this->entityName, $this->entitySearchAlias, $this->idFieldName, $this->properties, $this->objectManager, $this->aclHelper, $this->propertyAccessor, $this->logger);

        \Closure::bind(function (\Oro\Bundle\OrganizationBundle\Autocomplete\ParentBusinessUnitSearchHandler $instance) {
            unset($instance->ownerTreeProvider);
        }, $this, 'Oro\\Bundle\\OrganizationBundle\\Autocomplete\\ParentBusinessUnitSearchHandler')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ParentBusinessUnitSearchHandler_dfa6190', false)) {
    \class_alias(__NAMESPACE__.'\\ParentBusinessUnitSearchHandler_dfa6190', 'ParentBusinessUnitSearchHandler_dfa6190', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/OrganizationBundle/Event/BusinessUnitGridListener.php';

class BusinessUnitGridListener_02fba21 extends \Oro\Bundle\OrganizationBundle\Event\BusinessUnitGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\OrganizationBundle\Event\BusinessUnitGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->authorizationChecker, $instance->tokenAccessor, $instance->aclVoter, $instance->treeProvider);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface $authorizationChecker, \Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor, \Oro\Bundle\SecurityBundle\Owner\OwnerTreeProvider $treeProvider, ?\Oro\Bundle\SecurityBundle\Acl\Voter\AclVoterInterface $aclVoter = null)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Event\\BusinessUnitGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->authorizationChecker, $this->tokenAccessor, $this->aclVoter, $this->treeProvider);

        }

        $this->valueHoldere0de0->__construct($authorizationChecker, $tokenAccessor, $treeProvider, $aclVoter);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Event\\BusinessUnitGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Event\\BusinessUnitGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Event\\BusinessUnitGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\OrganizationBundle\\Event\\BusinessUnitGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->authorizationChecker, $this->tokenAccessor, $this->aclVoter, $this->treeProvider);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('BusinessUnitGridListener_02fba21', false)) {
    \class_alias(__NAMESPACE__.'\\BusinessUnitGridListener_02fba21', 'BusinessUnitGridListener_02fba21', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/QueryDesignerBundle/QueryDesigner/FunctionProviderInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/QueryDesignerBundle/QueryDesigner/Manager.php';

class Manager_c00c27b extends \Oro\Bundle\QueryDesignerBundle\QueryDesigner\Manager implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\QueryDesignerBundle\QueryDesigner\Manager|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getMetadata($queryType)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getMetadata', array('queryType' => $queryType), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getMetadata($queryType);
    }

    public function createFilter($name, ?array $params = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createFilter', array('name' => $name, 'params' => $params), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createFilter($name, $params);
    }

    public function getFunction($name, $groupName, $groupType)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getFunction', array('name' => $name, 'groupName' => $groupName, 'groupType' => $groupType), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getFunction($name, $groupName, $groupType);
    }

    public function getExcludedProperties(array $filterNames)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getExcludedProperties', array('filterNames' => $filterNames), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getExcludedProperties($filterNames);
    }

    public function getMetadataForGrouping()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getMetadataForGrouping', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getMetadataForGrouping();
    }

    public function getMetadataForFunctions($groupType, $queryType)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getMetadataForFunctions', array('groupType' => $groupType, 'queryType' => $queryType), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getMetadataForFunctions($groupType, $queryType);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\QueryDesignerBundle\QueryDesigner\Manager $instance) {
            unset($instance->configProvider, $instance->configResolver, $instance->entityHierarchyProvider, $instance->translator, $instance->filterBag, $instance->config);
        }, $instance, 'Oro\\Bundle\\QueryDesignerBundle\\QueryDesigner\\Manager')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\QueryDesignerBundle\QueryDesigner\ConfigurationProvider $configProvider, \Oro\Bundle\QueryDesignerBundle\QueryDesigner\ConfigurationResolver $configResolver, \Oro\Bundle\EntityBundle\Provider\EntityHierarchyProviderInterface $entityHierarchyProvider, \Oro\Bundle\FilterBundle\Filter\FilterBagInterface $filterBag, \Symfony\Contracts\Translation\TranslatorInterface $translator)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\QueryDesignerBundle\\QueryDesigner\\Manager');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\QueryDesignerBundle\QueryDesigner\Manager $instance) {
            unset($instance->configProvider, $instance->configResolver, $instance->entityHierarchyProvider, $instance->translator, $instance->filterBag, $instance->config);
        }, $this, 'Oro\\Bundle\\QueryDesignerBundle\\QueryDesigner\\Manager')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($configProvider, $configResolver, $entityHierarchyProvider, $filterBag, $translator);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\QueryDesignerBundle\\QueryDesigner\\Manager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\QueryDesignerBundle\\QueryDesigner\\Manager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\QueryDesignerBundle\\QueryDesigner\\Manager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\QueryDesignerBundle\\QueryDesigner\\Manager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\QueryDesignerBundle\QueryDesigner\Manager $instance) {
            unset($instance->configProvider, $instance->configResolver, $instance->entityHierarchyProvider, $instance->translator, $instance->filterBag, $instance->config);
        }, $this, 'Oro\\Bundle\\QueryDesignerBundle\\QueryDesigner\\Manager')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('Manager_c00c27b', false)) {
    \class_alias(__NAMESPACE__.'\\Manager_c00c27b', 'Manager_c00c27b', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm/src/Oro/Bundle/ReportCRMBundle/EventListener/Datagrid/AccountsByOpportunitiesReportListener.php';

class AccountsByOpportunitiesReportListener_4c3c6b6 extends \Oro\Bundle\ReportCRMBundle\EventListener\Datagrid\AccountsByOpportunitiesReportListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ReportCRMBundle\EventListener\Datagrid\AccountsByOpportunitiesReportListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->allowedFilterStates, $instance->enumProvider);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityExtendBundle\Provider\EnumValueProvider $enumProvider)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\Datagrid\\AccountsByOpportunitiesReportListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->allowedFilterStates, $this->enumProvider);

        }

        $this->valueHoldere0de0->__construct($enumProvider);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\Datagrid\\AccountsByOpportunitiesReportListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\Datagrid\\AccountsByOpportunitiesReportListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\Datagrid\\AccountsByOpportunitiesReportListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\Datagrid\\AccountsByOpportunitiesReportListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->allowedFilterStates, $this->enumProvider);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('AccountsByOpportunitiesReportListener_4c3c6b6', false)) {
    \class_alias(__NAMESPACE__.'\\AccountsByOpportunitiesReportListener_4c3c6b6', 'AccountsByOpportunitiesReportListener_4c3c6b6', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm/src/Oro/Bundle/ReportCRMBundle/EventListener/Datagrid/OpportunitiesByStatusReportListener.php';

class OpportunitiesByStatusReportListener_e2ef4ae extends \Oro\Bundle\ReportCRMBundle\EventListener\Datagrid\OpportunitiesByStatusReportListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ReportCRMBundle\EventListener\Datagrid\OpportunitiesByStatusReportListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->dateFilterModifier, $instance->dateFilterUtility);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\FilterBundle\Utils\DateFilterModifier $dateFilterModifier, \Oro\Bundle\FilterBundle\Filter\DateFilterUtility $dateFilterUtility)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\Datagrid\\OpportunitiesByStatusReportListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->dateFilterModifier, $this->dateFilterUtility);

        }

        $this->valueHoldere0de0->__construct($dateFilterModifier, $dateFilterUtility);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\Datagrid\\OpportunitiesByStatusReportListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\Datagrid\\OpportunitiesByStatusReportListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\Datagrid\\OpportunitiesByStatusReportListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\Datagrid\\OpportunitiesByStatusReportListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->dateFilterModifier, $this->dateFilterUtility);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('OpportunitiesByStatusReportListener_e2ef4ae', false)) {
    \class_alias(__NAMESPACE__.'\\OpportunitiesByStatusReportListener_e2ef4ae', 'OpportunitiesByStatusReportListener_e2ef4ae', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm/src/Oro/Bundle/ReportCRMBundle/EventListener/ReportGridListener.php';

class ReportGridListener_7a323e1 extends \Oro\Bundle\ReportCRMBundle\EventListener\ReportGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ReportCRMBundle\EventListener\ReportGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\ReportCRMBundle\EventListener\ReportGridListener $instance) {
            unset($instance->filtersStateProvider);
        }, $instance, 'Oro\\Bundle\\ReportCRMBundle\\EventListener\\ReportGridListener')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\DataGridBundle\Provider\State\DatagridStateProviderInterface $filtersStateProvider)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\ReportGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\ReportCRMBundle\EventListener\ReportGridListener $instance) {
            unset($instance->filtersStateProvider);
        }, $this, 'Oro\\Bundle\\ReportCRMBundle\\EventListener\\ReportGridListener')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($filtersStateProvider);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\ReportGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\ReportGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\ReportGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ReportCRMBundle\\EventListener\\ReportGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\ReportCRMBundle\EventListener\ReportGridListener $instance) {
            unset($instance->filtersStateProvider);
        }, $this, 'Oro\\Bundle\\ReportCRMBundle\\EventListener\\ReportGridListener')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ReportGridListener_7a323e1', false)) {
    \class_alias(__NAMESPACE__.'\\ReportGridListener_7a323e1', 'ReportGridListener_7a323e1', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm/src/Oro/Bundle/SalesBundle/Datagrid/WidgetExcludedStatusListener.php';

class WidgetExcludedStatusListener_2cb454c extends \Oro\Bundle\SalesBundle\Datagrid\WidgetExcludedStatusListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\SalesBundle\Datagrid\WidgetExcludedStatusListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onResultBefore(\Oro\Bundle\DataGridBundle\Event\OrmResultBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onResultBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onResultBefore($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->widgetConfigs);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\DashboardBundle\Model\WidgetConfigs $widgetConfigs)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\SalesBundle\\Datagrid\\WidgetExcludedStatusListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->widgetConfigs);

        }

        $this->valueHoldere0de0->__construct($widgetConfigs);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SalesBundle\\Datagrid\\WidgetExcludedStatusListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SalesBundle\\Datagrid\\WidgetExcludedStatusListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SalesBundle\\Datagrid\\WidgetExcludedStatusListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SalesBundle\\Datagrid\\WidgetExcludedStatusListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->widgetConfigs);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('WidgetExcludedStatusListener_2cb454c', false)) {
    \class_alias(__NAMESPACE__.'\\WidgetExcludedStatusListener_2cb454c', 'WidgetExcludedStatusListener_2cb454c', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/DashboardBundle/EventListener/WidgetSortByListener.php';

class WidgetSortByListener_1ecfc88 extends \Oro\Bundle\DashboardBundle\EventListener\WidgetSortByListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\DashboardBundle\EventListener\WidgetSortByListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onResultBeforeQuery(\Oro\Bundle\DataGridBundle\Event\OrmResultBeforeQuery $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onResultBeforeQuery', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onResultBeforeQuery($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->widgetconfigs);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\DashboardBundle\Model\WidgetConfigs $widgetconfigs)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\DashboardBundle\\EventListener\\WidgetSortByListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->widgetconfigs);

        }

        $this->valueHoldere0de0->__construct($widgetconfigs);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DashboardBundle\\EventListener\\WidgetSortByListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DashboardBundle\\EventListener\\WidgetSortByListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DashboardBundle\\EventListener\\WidgetSortByListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\DashboardBundle\\EventListener\\WidgetSortByListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->widgetconfigs);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('WidgetSortByListener_1ecfc88', false)) {
    \class_alias(__NAMESPACE__.'\\WidgetSortByListener_1ecfc88', 'WidgetSortByListener_1ecfc88', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm/src/Oro/Bundle/ChannelBundle/Autocomplete/ChannelLimitationHandler.php';
include_once \dirname(__DIR__, 4).'/vendor/oro/crm/src/Oro/Bundle/SalesBundle/Autocomplete/BusinessCustomerSearchHandler.php';

class BusinessCustomerSearchHandler_faa1c10 extends \Oro\Bundle\SalesBundle\Autocomplete\BusinessCustomerSearchHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\SalesBundle\Autocomplete\BusinessCustomerSearchHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function convertItem($item)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertItem', array('item' => $item), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertItem($item);
    }

    public function getProperties()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProperties', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProperties();
    }

    public function initSearchIndexer(\Oro\Bundle\SearchBundle\Engine\Indexer $indexer, \Oro\Bundle\SearchBundle\Provider\SearchMappingProvider $mappingProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initSearchIndexer', array('indexer' => $indexer, 'mappingProvider' => $mappingProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initSearchIndexer($indexer, $mappingProvider);
    }

    public function initDoctrinePropertiesByManagerRegistry(\Doctrine\Persistence\ManagerRegistry $managerRegistry)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initDoctrinePropertiesByManagerRegistry', array('managerRegistry' => $managerRegistry), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initDoctrinePropertiesByManagerRegistry($managerRegistry);
    }

    public function initDoctrinePropertiesByEntityManager(\Doctrine\Persistence\ObjectManager $objectManager)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initDoctrinePropertiesByEntityManager', array('objectManager' => $objectManager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initDoctrinePropertiesByEntityManager($objectManager);
    }

    public function search($query, $page, $perPage, $searchById = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'search', array('query' => $query, 'page' => $page, 'perPage' => $perPage, 'searchById' => $searchById), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->search($query, $page, $perPage, $searchById);
    }

    public function getEntityName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName();
    }

    public function setAclHelper(\Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper $aclHelper)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setAclHelper', array('aclHelper' => $aclHelper), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setAclHelper($aclHelper);
    }

    public function setPropertyAccessor(\Symfony\Component\PropertyAccess\PropertyAccessorInterface $propertyAccessor)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setPropertyAccessor', array('propertyAccessor' => $propertyAccessor), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setPropertyAccessor($propertyAccessor);
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLogger', array('logger' => $logger), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->channelPropertyName, $instance->channelSearchPropertyName, $instance->indexer, $instance->entityRepository, $instance->entityName, $instance->entitySearchAlias, $instance->idFieldName, $instance->properties, $instance->objectManager, $instance->aclHelper, $instance->propertyAccessor, $instance->logger);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct($entityName, array $properties, $channelRelationName = 'dataChannel', $channelSearchPropertyName = 'dataChannelId')
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\SalesBundle\\Autocomplete\\BusinessCustomerSearchHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->channelPropertyName, $this->channelSearchPropertyName, $this->indexer, $this->entityRepository, $this->entityName, $this->entitySearchAlias, $this->idFieldName, $this->properties, $this->objectManager, $this->aclHelper, $this->propertyAccessor, $this->logger);

        }

        $this->valueHoldere0de0->__construct($entityName, $properties, $channelRelationName, $channelSearchPropertyName);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SalesBundle\\Autocomplete\\BusinessCustomerSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SalesBundle\\Autocomplete\\BusinessCustomerSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SalesBundle\\Autocomplete\\BusinessCustomerSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SalesBundle\\Autocomplete\\BusinessCustomerSearchHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->channelPropertyName, $this->channelSearchPropertyName, $this->indexer, $this->entityRepository, $this->entityName, $this->entitySearchAlias, $this->idFieldName, $this->properties, $this->objectManager, $this->aclHelper, $this->propertyAccessor, $this->logger);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('BusinessCustomerSearchHandler_faa1c10', false)) {
    \class_alias(__NAMESPACE__.'\\BusinessCustomerSearchHandler_faa1c10', 'BusinessCustomerSearchHandler_faa1c10', false);
}

class ChannelLimitationHandler_b87b28c extends \Oro\Bundle\ChannelBundle\Autocomplete\ChannelLimitationHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ChannelBundle\Autocomplete\ChannelLimitationHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getProperties()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProperties', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProperties();
    }

    public function initSearchIndexer(\Oro\Bundle\SearchBundle\Engine\Indexer $indexer, \Oro\Bundle\SearchBundle\Provider\SearchMappingProvider $mappingProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initSearchIndexer', array('indexer' => $indexer, 'mappingProvider' => $mappingProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initSearchIndexer($indexer, $mappingProvider);
    }

    public function initDoctrinePropertiesByManagerRegistry(\Doctrine\Persistence\ManagerRegistry $managerRegistry)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initDoctrinePropertiesByManagerRegistry', array('managerRegistry' => $managerRegistry), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initDoctrinePropertiesByManagerRegistry($managerRegistry);
    }

    public function initDoctrinePropertiesByEntityManager(\Doctrine\Persistence\ObjectManager $objectManager)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initDoctrinePropertiesByEntityManager', array('objectManager' => $objectManager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initDoctrinePropertiesByEntityManager($objectManager);
    }

    public function search($query, $page, $perPage, $searchById = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'search', array('query' => $query, 'page' => $page, 'perPage' => $perPage, 'searchById' => $searchById), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->search($query, $page, $perPage, $searchById);
    }

    public function convertItem($item)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertItem', array('item' => $item), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertItem($item);
    }

    public function getEntityName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName();
    }

    public function setAclHelper(\Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper $aclHelper)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setAclHelper', array('aclHelper' => $aclHelper), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setAclHelper($aclHelper);
    }

    public function setPropertyAccessor(\Symfony\Component\PropertyAccess\PropertyAccessorInterface $propertyAccessor)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setPropertyAccessor', array('propertyAccessor' => $propertyAccessor), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setPropertyAccessor($propertyAccessor);
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLogger', array('logger' => $logger), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->channelPropertyName, $instance->channelSearchPropertyName, $instance->indexer, $instance->entityRepository, $instance->entityName, $instance->entitySearchAlias, $instance->idFieldName, $instance->properties, $instance->objectManager, $instance->aclHelper, $instance->propertyAccessor, $instance->logger);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct($entityName, array $properties, $channelRelationName = 'dataChannel', $channelSearchPropertyName = 'dataChannelId')
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ChannelBundle\\Autocomplete\\ChannelLimitationHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->channelPropertyName, $this->channelSearchPropertyName, $this->indexer, $this->entityRepository, $this->entityName, $this->entitySearchAlias, $this->idFieldName, $this->properties, $this->objectManager, $this->aclHelper, $this->propertyAccessor, $this->logger);

        }

        $this->valueHoldere0de0->__construct($entityName, $properties, $channelRelationName, $channelSearchPropertyName);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ChannelBundle\\Autocomplete\\ChannelLimitationHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ChannelBundle\\Autocomplete\\ChannelLimitationHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ChannelBundle\\Autocomplete\\ChannelLimitationHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ChannelBundle\\Autocomplete\\ChannelLimitationHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->channelPropertyName, $this->channelSearchPropertyName, $this->indexer, $this->entityRepository, $this->entityName, $this->entitySearchAlias, $this->idFieldName, $this->properties, $this->objectManager, $this->aclHelper, $this->propertyAccessor, $this->logger);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ChannelLimitationHandler_b87b28c', false)) {
    \class_alias(__NAMESPACE__.'\\ChannelLimitationHandler_b87b28c', 'ChannelLimitationHandler_b87b28c', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/SearchBundle/EventListener/SearchResultsGridListener.php';

class SearchResultsGridListener_4209258 extends \Oro\Bundle\SearchBundle\EventListener\SearchResultsGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\SearchBundle\EventListener\SearchResultsGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->paramName);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct()
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\SearchBundle\\EventListener\\SearchResultsGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->paramName);

        }
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\EventListener\\SearchResultsGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\EventListener\\SearchResultsGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\EventListener\\SearchResultsGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\EventListener\\SearchResultsGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->paramName);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('SearchResultsGridListener_4209258', false)) {
    \class_alias(__NAMESPACE__.'\\SearchResultsGridListener_4209258', 'SearchResultsGridListener_4209258', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/SearchBundle/Provider/ResultStatisticsProvider.php';

class ResultStatisticsProvider_7fb4397 extends \Oro\Bundle\SearchBundle\Provider\ResultStatisticsProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\SearchBundle\Provider\ResultStatisticsProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getGroupedResultsBySearchQuery($string) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getGroupedResultsBySearchQuery', array('string' => $string), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getGroupedResultsBySearchQuery($string);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->indexer, $instance->configManager, $instance->translator);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\SearchBundle\Engine\Indexer $indexer, \Oro\Bundle\EntityConfigBundle\Config\ConfigManager $configManager, \Symfony\Contracts\Translation\TranslatorInterface $translator)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\SearchBundle\\Provider\\ResultStatisticsProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->indexer, $this->configManager, $this->translator);

        }

        $this->valueHoldere0de0->__construct($indexer, $configManager, $translator);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\Provider\\ResultStatisticsProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\Provider\\ResultStatisticsProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\Provider\\ResultStatisticsProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SearchBundle\\Provider\\ResultStatisticsProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->indexer, $this->configManager, $this->translator);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ResultStatisticsProvider_7fb4397', false)) {
    \class_alias(__NAMESPACE__.'\\ResultStatisticsProvider_7fb4397', 'ResultStatisticsProvider_7fb4397', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/SegmentBundle/Query/SegmentQueryConverterFactory.php';

class SegmentQueryConverterFactory_134960d extends \Oro\Bundle\SegmentBundle\Query\SegmentQueryConverterFactory implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\SegmentBundle\Query\SegmentQueryConverterFactory|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function createInstance() : \Oro\Bundle\SegmentBundle\Query\SegmentQueryConverter
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'createInstance', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->createInstance();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\SegmentBundle\Query\SegmentQueryConverterFactory $instance) {
            unset($instance->functionProvider, $instance->virtualFieldProvider, $instance->virtualRelationProvider, $instance->doctrineHelper, $instance->restrictionBuilder, $instance->segmentQueryConverterState);
        }, $instance, 'Oro\\Bundle\\SegmentBundle\\Query\\SegmentQueryConverterFactory')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\QueryDesignerBundle\QueryDesigner\FunctionProviderInterface $functionProvider, \Oro\Bundle\EntityBundle\Provider\VirtualFieldProviderInterface $virtualFieldProvider, \Oro\Bundle\EntityBundle\Provider\VirtualRelationProviderInterface $virtualRelationProvider, \Oro\Bundle\EntityBundle\ORM\DoctrineHelper $doctrineHelper, \Oro\Bundle\QueryDesignerBundle\QueryDesigner\RestrictionBuilderInterface $restrictionBuilder, \Oro\Bundle\SegmentBundle\Query\SegmentQueryConverterState $segmentQueryConverterState)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\SegmentBundle\\Query\\SegmentQueryConverterFactory');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\SegmentBundle\Query\SegmentQueryConverterFactory $instance) {
            unset($instance->functionProvider, $instance->virtualFieldProvider, $instance->virtualRelationProvider, $instance->doctrineHelper, $instance->restrictionBuilder, $instance->segmentQueryConverterState);
        }, $this, 'Oro\\Bundle\\SegmentBundle\\Query\\SegmentQueryConverterFactory')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($functionProvider, $virtualFieldProvider, $virtualRelationProvider, $doctrineHelper, $restrictionBuilder, $segmentQueryConverterState);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SegmentBundle\\Query\\SegmentQueryConverterFactory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SegmentBundle\\Query\\SegmentQueryConverterFactory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SegmentBundle\\Query\\SegmentQueryConverterFactory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SegmentBundle\\Query\\SegmentQueryConverterFactory');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\SegmentBundle\Query\SegmentQueryConverterFactory $instance) {
            unset($instance->functionProvider, $instance->virtualFieldProvider, $instance->virtualRelationProvider, $instance->doctrineHelper, $instance->restrictionBuilder, $instance->segmentQueryConverterState);
        }, $this, 'Oro\\Bundle\\SegmentBundle\\Query\\SegmentQueryConverterFactory')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('SegmentQueryConverterFactory_134960d', false)) {
    \class_alias(__NAMESPACE__.'\\SegmentQueryConverterFactory_134960d', 'SegmentQueryConverterFactory_134960d', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/SegmentBundle/Entity/Manager/SegmentManager.php';

class SegmentManager_8be4ae0 extends \Oro\Bundle\SegmentBundle\Entity\Manager\SegmentManager implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\SegmentBundle\Entity\Manager\SegmentManager|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getSegmentTypeChoices() : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getSegmentTypeChoices', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getSegmentTypeChoices();
    }

    public function getSegmentByEntityName(string $entityName, ?string $term, int $page = 1, ?int $skippedSegmentId = null) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getSegmentByEntityName', array('entityName' => $entityName, 'term' => $term, 'page' => $page, 'skippedSegmentId' => $skippedSegmentId), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getSegmentByEntityName($entityName, $term, $page, $skippedSegmentId);
    }

    public function findById(int $segmentId) : ?\Oro\Bundle\SegmentBundle\Entity\Segment
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'findById', array('segmentId' => $segmentId), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->findById($segmentId);
    }

    public function getSegmentQueryBuilder(\Oro\Bundle\SegmentBundle\Entity\Segment $segment) : ?\Doctrine\ORM\QueryBuilder
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getSegmentQueryBuilder', array('segment' => $segment), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getSegmentQueryBuilder($segment);
    }

    public function filterBySegment(\Doctrine\ORM\QueryBuilder $queryBuilder, \Oro\Bundle\SegmentBundle\Entity\Segment $segment) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'filterBySegment', array('queryBuilder' => $queryBuilder, 'segment' => $segment), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->filterBySegment($queryBuilder, $segment);
return;
    }

    public function getEntityQueryBuilder(\Oro\Bundle\SegmentBundle\Entity\Segment $segment) : ?\Doctrine\ORM\QueryBuilder
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityQueryBuilder', array('segment' => $segment), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityQueryBuilder($segment);
    }

    public function getFilterSubQuery(\Oro\Bundle\SegmentBundle\Entity\Segment $segment, \Doctrine\ORM\QueryBuilder $externalQueryBuilder) : ?string
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getFilterSubQuery', array('segment' => $segment, 'externalQueryBuilder' => $externalQueryBuilder), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getFilterSubQuery($segment, $externalQueryBuilder);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\SegmentBundle\Entity\Manager\SegmentManager $instance) {
            unset($instance->doctrine, $instance->queryBuilderRegistry, $instance->subQueryLimitHelper, $instance->aclHelper, $instance->logger);
        }, $instance, 'Oro\\Bundle\\SegmentBundle\\Entity\\Manager\\SegmentManager')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\Persistence\ManagerRegistry $doctrine, \Oro\Bundle\SegmentBundle\Query\SegmentQueryBuilderRegistry $queryBuilderRegistry, \Oro\Bundle\QueryDesignerBundle\QueryDesigner\SubQueryLimitHelper $subQueryLimitHelper, \Oro\Bundle\SecurityBundle\ORM\Walker\AclHelper $aclHelper, \Psr\Log\LoggerInterface $logger)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\SegmentBundle\\Entity\\Manager\\SegmentManager');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\SegmentBundle\Entity\Manager\SegmentManager $instance) {
            unset($instance->doctrine, $instance->queryBuilderRegistry, $instance->subQueryLimitHelper, $instance->aclHelper, $instance->logger);
        }, $this, 'Oro\\Bundle\\SegmentBundle\\Entity\\Manager\\SegmentManager')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($doctrine, $queryBuilderRegistry, $subQueryLimitHelper, $aclHelper, $logger);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SegmentBundle\\Entity\\Manager\\SegmentManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SegmentBundle\\Entity\\Manager\\SegmentManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SegmentBundle\\Entity\\Manager\\SegmentManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\SegmentBundle\\Entity\\Manager\\SegmentManager');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\SegmentBundle\Entity\Manager\SegmentManager $instance) {
            unset($instance->doctrine, $instance->queryBuilderRegistry, $instance->subQueryLimitHelper, $instance->aclHelper, $instance->logger);
        }, $this, 'Oro\\Bundle\\SegmentBundle\\Entity\\Manager\\SegmentManager')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('SegmentManager_8be4ae0', false)) {
    \class_alias(__NAMESPACE__.'\\SegmentManager_8be4ae0', 'SegmentManager_8be4ae0', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/TagBundle/EventListener/TagSearchResultsGridListener.php';

class TagSearchResultsGridListener_1b500cc extends \Oro\Bundle\TagBundle\EventListener\TagSearchResultsGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\TagBundle\EventListener\TagSearchResultsGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->securityProvider, $instance->entityAliasResolver);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\TagBundle\Security\SecurityProvider $securityProvider, \Oro\Bundle\EntityBundle\ORM\EntityAliasResolver $entityAliasResolver)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\TagBundle\\EventListener\\TagSearchResultsGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->securityProvider, $this->entityAliasResolver);

        }

        $this->valueHoldere0de0->__construct($securityProvider, $entityAliasResolver);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TagBundle\\EventListener\\TagSearchResultsGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TagBundle\\EventListener\\TagSearchResultsGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TagBundle\\EventListener\\TagSearchResultsGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TagBundle\\EventListener\\TagSearchResultsGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->securityProvider, $this->entityAliasResolver);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('TagSearchResultsGridListener_1b500cc', false)) {
    \class_alias(__NAMESPACE__.'\\TagSearchResultsGridListener_1b500cc', 'TagSearchResultsGridListener_1b500cc', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm-task-bundle/EventListener/Datagrid/ActivityGridListener.php';

class ActivityGridListener_e18c35b extends \Oro\Bundle\TaskBundle\EventListener\Datagrid\ActivityGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\TaskBundle\EventListener\Datagrid\ActivityGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->activityManager, $instance->entityRoutingHelper);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\ActivityBundle\Manager\ActivityManager $activityManager, \Oro\Bundle\EntityBundle\Tools\EntityRoutingHelper $entityRoutingHelper)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\TaskBundle\\EventListener\\Datagrid\\ActivityGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->activityManager, $this->entityRoutingHelper);

        }

        $this->valueHoldere0de0->__construct($activityManager, $entityRoutingHelper);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TaskBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TaskBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TaskBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TaskBundle\\EventListener\\Datagrid\\ActivityGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->activityManager, $this->entityRoutingHelper);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ActivityGridListener_e18c35b', false)) {
    \class_alias(__NAMESPACE__.'\\ActivityGridListener_e18c35b', 'ActivityGridListener_e18c35b', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm-task-bundle/EventListener/Datagrid/UserTaskGridListener.php';

class UserTaskGridListener_04f213d extends \Oro\Bundle\TaskBundle\EventListener\Datagrid\UserTaskGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\TaskBundle\EventListener\Datagrid\UserTaskGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    public function onBuildAfter(\Oro\Bundle\DataGridBundle\Event\BuildAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->tokenAccessor);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\TaskBundle\\EventListener\\Datagrid\\UserTaskGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->tokenAccessor);

        }

        $this->valueHoldere0de0->__construct($tokenAccessor);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TaskBundle\\EventListener\\Datagrid\\UserTaskGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TaskBundle\\EventListener\\Datagrid\\UserTaskGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TaskBundle\\EventListener\\Datagrid\\UserTaskGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TaskBundle\\EventListener\\Datagrid\\UserTaskGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->tokenAccessor);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('UserTaskGridListener_04f213d', false)) {
    \class_alias(__NAMESPACE__.'\\UserTaskGridListener_04f213d', 'UserTaskGridListener_04f213d', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/Controller/Controller.php';

class Controller_019a3c7 extends \Oro\Bundle\TranslationBundle\Controller\Controller implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\TranslationBundle\Controller\Controller|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function indexAction(\Symfony\Component\HttpFoundation\Request $request, $_locale)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'indexAction', array('request' => $request, '_locale' => $_locale), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->indexAction($request, $_locale);
    }

    public function renderJsTranslationContent(array $domains, $locale, $debug = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'renderJsTranslationContent', array('domains' => $domains, 'locale' => $locale, 'debug' => $debug), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->renderJsTranslationContent($domains, $locale, $debug);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->translator, $instance->twig, $instance->template, $instance->options);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\TranslationBundle\Translation\Translator $translator, \Twig\Environment $twig, $template, $options)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Controller\\Controller');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->translator, $this->twig, $this->template, $this->options);

        }

        $this->valueHoldere0de0->__construct($translator, $twig, $template, $options);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Controller\\Controller');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Controller\\Controller');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Controller\\Controller');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Controller\\Controller');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->translator, $this->twig, $this->template, $this->options);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('Controller_019a3c7', false)) {
    \class_alias(__NAMESPACE__.'\\Controller_019a3c7', 'Controller_019a3c7', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/EventListener/TranslationListener.php';

class TranslationListener_99c6340 extends \Oro\Bundle\TranslationBundle\EventListener\TranslationListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\TranslationBundle\EventListener\TranslationListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onAfterImportTranslations(\Oro\Bundle\ImportExportBundle\Event\AfterJobExecutionEvent $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onAfterImportTranslations', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onAfterImportTranslations($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->metadataCache, $instance->jobName);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\TranslationBundle\Translation\DynamicTranslationMetadataCache $metadataCache, $jobName)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\TranslationListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->metadataCache, $this->jobName);

        }

        $this->valueHoldere0de0->__construct($metadataCache, $jobName);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\TranslationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\TranslationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\TranslationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\TranslationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->metadataCache, $this->jobName);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('TranslationListener_99c6340', false)) {
    \class_alias(__NAMESPACE__.'\\TranslationListener_99c6340', 'TranslationListener_99c6340', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/Provider/JsTranslationDumper.php';

class JsTranslationDumper_dd6ab5b extends \Oro\Bundle\TranslationBundle\Provider\JsTranslationDumper implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\TranslationBundle\Provider\JsTranslationDumper|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setFileManager(\Oro\Bundle\GaufretteBundle\FileManager $fileManager) : void
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setFileManager', array('fileManager' => $fileManager), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0->setFileManager($fileManager);
return;
    }

    public function dumpTranslations($locales = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'dumpTranslations', array('locales' => $locales), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->dumpTranslations($locales);
    }

    public function isTranslationFileExist(string $locale) : bool
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'isTranslationFileExist', array('locale' => $locale), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->isTranslationFileExist($locale);
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLogger', array('logger' => $logger), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->translationController, $instance->translationDomains, $instance->kernelProjectDir, $instance->languageProvider, $instance->router, $instance->jsTranslationRoute, $instance->logger);

        \Closure::bind(function (\Oro\Bundle\TranslationBundle\Provider\JsTranslationDumper $instance) {
            unset($instance->fileManager);
        }, $instance, 'Oro\\Bundle\\TranslationBundle\\Provider\\JsTranslationDumper')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\TranslationBundle\Controller\Controller $translationController, \Symfony\Component\Routing\RouterInterface $router, $translationDomains, $kernelProjectDir, \Oro\Bundle\TranslationBundle\Provider\LanguageProvider $languageProvider, $jsTranslationRoute = 'oro_translation_jstranslation')
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Provider\\JsTranslationDumper');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->translationController, $this->translationDomains, $this->kernelProjectDir, $this->languageProvider, $this->router, $this->jsTranslationRoute, $this->logger);

        \Closure::bind(function (\Oro\Bundle\TranslationBundle\Provider\JsTranslationDumper $instance) {
            unset($instance->fileManager);
        }, $this, 'Oro\\Bundle\\TranslationBundle\\Provider\\JsTranslationDumper')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($translationController, $router, $translationDomains, $kernelProjectDir, $languageProvider, $jsTranslationRoute);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Provider\\JsTranslationDumper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Provider\\JsTranslationDumper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Provider\\JsTranslationDumper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\Provider\\JsTranslationDumper');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->translationController, $this->translationDomains, $this->kernelProjectDir, $this->languageProvider, $this->router, $this->jsTranslationRoute, $this->logger);

        \Closure::bind(function (\Oro\Bundle\TranslationBundle\Provider\JsTranslationDumper $instance) {
            unset($instance->fileManager);
        }, $this, 'Oro\\Bundle\\TranslationBundle\\Provider\\JsTranslationDumper')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('JsTranslationDumper_dd6ab5b', false)) {
    \class_alias(__NAMESPACE__.'\\JsTranslationDumper_dd6ab5b', 'JsTranslationDumper_dd6ab5b', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/TranslationBundle/EventListener/Datagrid/TranslationListener.php';

class TranslationListener_bdc9fe8 extends \Oro\Bundle\TranslationBundle\EventListener\Datagrid\TranslationListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\TranslationBundle\EventListener\Datagrid\TranslationListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->provider);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\TranslationBundle\Provider\LanguageProvider $provider)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\TranslationListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->provider);

        }

        $this->valueHoldere0de0->__construct($provider);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\TranslationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\TranslationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\TranslationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\TranslationBundle\\EventListener\\Datagrid\\TranslationListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->provider);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('TranslationListener_bdc9fe8', false)) {
    \class_alias(__NAMESPACE__.'\\TranslationListener_bdc9fe8', 'TranslationListener_bdc9fe8', false);
}

class UserAclHandler_624e4e9 extends \Oro\Bundle\UserBundle\Autocomplete\UserAclHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\UserBundle\Autocomplete\UserAclHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function search($query, $page, $perPage, $searchById = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'search', array('query' => $query, 'page' => $page, 'perPage' => $perPage, 'searchById' => $searchById), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->search($query, $page, $perPage, $searchById);
    }

    public function getProperties()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getProperties', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getProperties();
    }

    public function getEntityName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityName();
    }

    public function setProperties(array $properties)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setProperties', array('properties' => $properties), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setProperties($properties);
    }

    public function setEntityNameResolver(\Oro\Bundle\EntityBundle\Provider\EntityNameResolver $entityNameResolver)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setEntityNameResolver', array('entityNameResolver' => $entityNameResolver), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setEntityNameResolver($entityNameResolver);
    }

    public function convertItem($user)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'convertItem', array('user' => $user), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->convertItem($user);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->em, $instance->pictureSourcesProvider, $instance->className, $instance->fields, $instance->entityNameResolver, $instance->entityRoutingHelper, $instance->aclVoter, $instance->builder, $instance->authorizationChecker, $instance->tokenAccessor, $instance->treeProvider);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\ORM\EntityManager $em, \Oro\Bundle\AttachmentBundle\Provider\PictureSourcesProviderInterface $pictureSourcesProvider, $className, \Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface $authorizationChecker, \Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor, \Oro\Bundle\SecurityBundle\Owner\OwnerTreeProvider $treeProvider, \Oro\Bundle\EntityBundle\Tools\EntityRoutingHelper $entityRoutingHelper, ?\Oro\Bundle\SecurityBundle\Acl\Voter\AclVoterInterface $aclVoter = null)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\UserBundle\\Autocomplete\\UserAclHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->em, $this->pictureSourcesProvider, $this->className, $this->fields, $this->entityNameResolver, $this->entityRoutingHelper, $this->aclVoter, $this->builder, $this->authorizationChecker, $this->tokenAccessor, $this->treeProvider);

        }

        $this->valueHoldere0de0->__construct($em, $pictureSourcesProvider, $className, $authorizationChecker, $tokenAccessor, $treeProvider, $entityRoutingHelper, $aclVoter);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Autocomplete\\UserAclHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Autocomplete\\UserAclHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Autocomplete\\UserAclHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Autocomplete\\UserAclHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->em, $this->pictureSourcesProvider, $this->className, $this->fields, $this->entityNameResolver, $this->entityRoutingHelper, $this->aclVoter, $this->builder, $this->authorizationChecker, $this->tokenAccessor, $this->treeProvider);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('UserAclHandler_624e4e9', false)) {
    \class_alias(__NAMESPACE__.'\\UserAclHandler_624e4e9', 'UserAclHandler_624e4e9', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/EventListener/OwnerUserGridListener.php';

class OwnerUserGridListener_662fd99 extends \Oro\Bundle\UserBundle\EventListener\OwnerUserGridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\UserBundle\EventListener\OwnerUserGridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->em, $instance->authorizationChecker, $instance->tokenAccessor, $instance->aclVoter, $instance->treeProvider);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\ORM\EntityManager $em, \Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface $authorizationChecker, \Oro\Bundle\SecurityBundle\Authentication\TokenAccessorInterface $tokenAccessor, \Oro\Bundle\SecurityBundle\Owner\OwnerTreeProvider $treeProvider, ?\Oro\Bundle\SecurityBundle\Acl\Voter\AclVoterInterface $aclVoter = null)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\UserBundle\\EventListener\\OwnerUserGridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->em, $this->authorizationChecker, $this->tokenAccessor, $this->aclVoter, $this->treeProvider);

        }

        $this->valueHoldere0de0->__construct($em, $authorizationChecker, $tokenAccessor, $treeProvider, $aclVoter);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\EventListener\\OwnerUserGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\EventListener\\OwnerUserGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\EventListener\\OwnerUserGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\EventListener\\OwnerUserGridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->em, $this->authorizationChecker, $this->tokenAccessor, $this->aclVoter, $this->treeProvider);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('OwnerUserGridListener_662fd99', false)) {
    \class_alias(__NAMESPACE__.'\\OwnerUserGridListener_662fd99', 'OwnerUserGridListener_662fd99', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Handler/ResetPasswordHandler.php';

class ResetPasswordHandler_04faf98 extends \Oro\Bundle\UserBundle\Handler\ResetPasswordHandler implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\UserBundle\Handler\ResetPasswordHandler|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function resetPasswordAndNotify(\Oro\Bundle\UserBundle\Entity\User $user)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'resetPasswordAndNotify', array('user' => $user), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->resetPasswordAndNotify($user);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->registry);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\NotificationBundle\Manager\EmailNotificationManager $mailManager, \Oro\Bundle\UserBundle\Entity\UserManager $userManager, \Doctrine\Bundle\DoctrineBundle\Registry $registry, \Psr\Log\LoggerInterface $logger)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\UserBundle\\Handler\\ResetPasswordHandler');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->registry);

        }

        $this->valueHoldere0de0->__construct($mailManager, $userManager, $registry, $logger);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Handler\\ResetPasswordHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Handler\\ResetPasswordHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Handler\\ResetPasswordHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Handler\\ResetPasswordHandler');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->registry);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('ResetPasswordHandler_04faf98', false)) {
    \class_alias(__NAMESPACE__.'\\ResetPasswordHandler_04faf98', 'ResetPasswordHandler_04faf98', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Mailer/UserTemplateEmailSender.php';

class UserTemplateEmailSender_bcc95f3 extends \Oro\Bundle\UserBundle\Mailer\UserTemplateEmailSender implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\UserBundle\Mailer\UserTemplateEmailSender|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function sendUserTemplateEmail(\Oro\Bundle\UserBundle\Entity\UserInterface $user, $emailTemplateName, array $emailTemplateParams = [], $scopeEntity = null) : int
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'sendUserTemplateEmail', array('user' => $user, 'emailTemplateName' => $emailTemplateName, 'emailTemplateParams' => $emailTemplateParams, 'scopeEntity' => $scopeEntity), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->sendUserTemplateEmail($user, $emailTemplateName, $emailTemplateParams, $scopeEntity);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Oro\Bundle\UserBundle\Mailer\UserTemplateEmailSender $instance) {
            unset($instance->notificationSettingsModel, $instance->emailTemplateManager);
        }, $instance, 'Oro\\Bundle\\UserBundle\\Mailer\\UserTemplateEmailSender')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\NotificationBundle\Model\NotificationSettings $notificationSettingsModel, \Oro\Bundle\EmailBundle\Manager\EmailTemplateManager $emailTemplateManager)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\UserBundle\\Mailer\\UserTemplateEmailSender');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Oro\Bundle\UserBundle\Mailer\UserTemplateEmailSender $instance) {
            unset($instance->notificationSettingsModel, $instance->emailTemplateManager);
        }, $this, 'Oro\\Bundle\\UserBundle\\Mailer\\UserTemplateEmailSender')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($notificationSettingsModel, $emailTemplateManager);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Mailer\\UserTemplateEmailSender');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Mailer\\UserTemplateEmailSender');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Mailer\\UserTemplateEmailSender');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Mailer\\UserTemplateEmailSender');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Oro\Bundle\UserBundle\Mailer\UserTemplateEmailSender $instance) {
            unset($instance->notificationSettingsModel, $instance->emailTemplateManager);
        }, $this, 'Oro\\Bundle\\UserBundle\\Mailer\\UserTemplateEmailSender')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('UserTemplateEmailSender_bcc95f3', false)) {
    \class_alias(__NAMESPACE__.'\\UserTemplateEmailSender_bcc95f3', 'UserTemplateEmailSender_bcc95f3', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/UserBundle/Provider/UserConfigurationFormProvider.php';

class UserConfigurationFormProvider_6e2dd1e extends \Oro\Bundle\UserBundle\Provider\UserConfigurationFormProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\UserBundle\Provider\UserConfigurationFormProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getTree()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getTree', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getTree();
    }

    public function getJsTree()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getJsTree', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getJsTree();
    }

    public function setParentCheckboxLabel($label)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setParentCheckboxLabel', array('label' => $label), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setParentCheckboxLabel($label);
    }

    public function setFeatureChecker(\Oro\Bundle\FeatureToggleBundle\Checker\FeatureChecker $featureChecker)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setFeatureChecker', array('featureChecker' => $featureChecker), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setFeatureChecker($featureChecker);
    }

    public function getApiTree($path = null)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getApiTree', array('path' => $path), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getApiTree($path);
    }

    public function getSubtree($subtreeRootName)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getSubtree', array('subtreeRootName' => $subtreeRootName), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getSubtree($subtreeRootName);
    }

    public function buildJsTreeItem($name, $parentName, array $node)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'buildJsTreeItem', array('name' => $name, 'parentName' => $parentName, 'node' => $node), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->buildJsTreeItem($name, $parentName, $node);
    }

    public function getDataTransformer($key)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDataTransformer', array('key' => $key), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDataTransformer($key);
    }

    public function getForm($group)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getForm', array('group' => $group), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getForm($group);
    }

    public function chooseActiveGroups($activeGroup, $activeSubGroup)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'chooseActiveGroups', array('activeGroup' => $activeGroup, 'activeSubGroup' => $activeSubGroup), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->chooseActiveGroups($activeGroup, $activeSubGroup);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->parentCheckboxLabel, $instance->configBag, $instance->processedTrees, $instance->processedJsTrees, $instance->processedSubTrees, $instance->featureChecker, $instance->translator, $instance->factory, $instance->authorizationChecker, $instance->searchProvider, $instance->formRegistry);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\ConfigBundle\Config\ConfigBag $configBag, \Symfony\Contracts\Translation\TranslatorInterface $translator, \Symfony\Component\Form\FormFactoryInterface $factory, \Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface $authorizationChecker, \Oro\Bundle\ConfigBundle\Provider\ChainSearchProvider $searchProvider, \Symfony\Component\Form\FormRegistryInterface $formRegistry)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\UserBundle\\Provider\\UserConfigurationFormProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->parentCheckboxLabel, $this->configBag, $this->processedTrees, $this->processedJsTrees, $this->processedSubTrees, $this->featureChecker, $this->translator, $this->factory, $this->authorizationChecker, $this->searchProvider, $this->formRegistry);

        }

        $this->valueHoldere0de0->__construct($configBag, $translator, $factory, $authorizationChecker, $searchProvider, $formRegistry);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Provider\\UserConfigurationFormProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Provider\\UserConfigurationFormProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Provider\\UserConfigurationFormProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\UserBundle\\Provider\\UserConfigurationFormProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->parentCheckboxLabel, $this->configBag, $this->processedTrees, $this->processedJsTrees, $this->processedSubTrees, $this->featureChecker, $this->translator, $this->factory, $this->authorizationChecker, $this->searchProvider, $this->formRegistry);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('UserConfigurationFormProvider_6e2dd1e', false)) {
    \class_alias(__NAMESPACE__.'\\UserConfigurationFormProvider_6e2dd1e', 'UserConfigurationFormProvider_6e2dd1e', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/WorkflowBundle/Datagrid/EmailNotificationDatagridListener.php';

class EmailNotificationDatagridListener_8f40b17 extends \Oro\Bundle\WorkflowBundle\Datagrid\EmailNotificationDatagridListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\WorkflowBundle\Datagrid\EmailNotificationDatagridListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    public function onResultAfter(\Oro\Bundle\DataGridBundle\Event\OrmResultAfter $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onResultAfter', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onResultAfter($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->translator, $instance->generator);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Symfony\Contracts\Translation\TranslatorInterface $translator)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Datagrid\\EmailNotificationDatagridListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->translator, $this->generator);

        }

        $this->valueHoldere0de0->__construct($translator);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Datagrid\\EmailNotificationDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Datagrid\\EmailNotificationDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Datagrid\\EmailNotificationDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Datagrid\\EmailNotificationDatagridListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->translator, $this->generator);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('EmailNotificationDatagridListener_8f40b17', false)) {
    \class_alias(__NAMESPACE__.'\\EmailNotificationDatagridListener_8f40b17', 'EmailNotificationDatagridListener_8f40b17', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/WorkflowBundle/Datagrid/Translation/WorkflowColumnListener.php';

class WorkflowColumnListener_f701be0 extends \Oro\Bundle\WorkflowBundle\Datagrid\Translation\WorkflowColumnListener implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\WorkflowBundle\Datagrid\Translation\WorkflowColumnListener|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function onBuildBefore(\Oro\Bundle\DataGridBundle\Event\BuildBefore $event)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'onBuildBefore', array('event' => $event), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->onBuildBefore($event);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct()
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Datagrid\\Translation\\WorkflowColumnListener');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        }
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Datagrid\\Translation\\WorkflowColumnListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Datagrid\\Translation\\WorkflowColumnListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Datagrid\\Translation\\WorkflowColumnListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Datagrid\\Translation\\WorkflowColumnListener');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('WorkflowColumnListener_f701be0', false)) {
    \class_alias(__NAMESPACE__.'\\WorkflowColumnListener_f701be0', 'WorkflowColumnListener_f701be0', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/platform/src/Oro/Bundle/WorkflowBundle/Field/FieldProvider.php';

class FieldProvider_084be6a extends \Oro\Bundle\WorkflowBundle\Field\FieldProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\WorkflowBundle\Field\FieldProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function setEntityProvider(\Oro\Bundle\EntityBundle\Provider\EntityProvider $entityProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setEntityProvider', array('entityProvider' => $entityProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setEntityProvider($entityProvider);
    }

    public function setVirtualFieldProvider(\Oro\Bundle\EntityBundle\Provider\VirtualFieldProviderInterface $virtualFieldProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setVirtualFieldProvider', array('virtualFieldProvider' => $virtualFieldProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setVirtualFieldProvider($virtualFieldProvider);
    }

    public function setVirtualRelationProvider($virtualRelationProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setVirtualRelationProvider', array('virtualRelationProvider' => $virtualRelationProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setVirtualRelationProvider($virtualRelationProvider);
    }

    public function setExclusionProvider(\Oro\Bundle\EntityBundle\Provider\ExclusionProviderInterface $exclusionProvider)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setExclusionProvider', array('exclusionProvider' => $exclusionProvider), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setExclusionProvider($exclusionProvider);
    }

    public function enableCaching($enable = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'enableCaching', array('enable' => $enable), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->enableCaching($enable);
    }

    public function getRelations($entityName, $withEntityDetails = false, $applyExclusions = true, $translate = true)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getRelations', array('entityName' => $entityName, 'withEntityDetails' => $withEntityDetails, 'applyExclusions' => $applyExclusions, 'translate' => $translate), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getRelations($entityName, $withEntityDetails, $applyExclusions, $translate);
    }

    public function getEntityFields(string $entityName, int $options = 192) : array
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEntityFields', array('entityName' => $entityName, 'options' => $options), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEntityFields($entityName, $options);
    }

    public function setLocale($locale)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setLocale', array('locale' => $locale), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setLocale($locale);
    }

    public function getLocale()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getLocale', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getLocale();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->entityProvider, $instance->virtualFieldProvider, $instance->virtualRelationProvider, $instance->exclusionProvider, $instance->entityConfigProvider, $instance->extendConfigProvider, $instance->entityClassResolver, $instance->fieldTypeHelper, $instance->translator, $instance->doctrine, $instance->hiddenFields, $instance->locale);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Provider\EntityFieldProvider $instance) {
            unset($instance->isCachingEnabled, $instance->metadata, $instance->metadataForEntitiesWithAssociations);
        }, $instance, 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $entityConfigProvider, \Oro\Bundle\EntityConfigBundle\Provider\ConfigProvider $extendConfigProvider, \Oro\Bundle\EntityBundle\ORM\EntityClassResolver $entityClassResolver, \Oro\Bundle\EntityExtendBundle\Extend\FieldTypeHelper $fieldTypeHelper, \Symfony\Bridge\Doctrine\ManagerRegistry $doctrine, \Symfony\Contracts\Translation\TranslatorInterface $translator, $hiddenFields)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Field\\FieldProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->entityProvider, $this->virtualFieldProvider, $this->virtualRelationProvider, $this->exclusionProvider, $this->entityConfigProvider, $this->extendConfigProvider, $this->entityClassResolver, $this->fieldTypeHelper, $this->translator, $this->doctrine, $this->hiddenFields, $this->locale);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Provider\EntityFieldProvider $instance) {
            unset($instance->isCachingEnabled, $instance->metadata, $instance->metadataForEntitiesWithAssociations);
        }, $this, 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($entityConfigProvider, $extendConfigProvider, $entityClassResolver, $fieldTypeHelper, $doctrine, $translator, $hiddenFields);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Field\\FieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Field\\FieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Field\\FieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\WorkflowBundle\\Field\\FieldProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->entityProvider, $this->virtualFieldProvider, $this->virtualRelationProvider, $this->exclusionProvider, $this->entityConfigProvider, $this->extendConfigProvider, $this->entityClassResolver, $this->fieldTypeHelper, $this->translator, $this->doctrine, $this->hiddenFields, $this->locale);

        \Closure::bind(function (\Oro\Bundle\EntityBundle\Provider\EntityFieldProvider $instance) {
            unset($instance->isCachingEnabled, $instance->metadata, $instance->metadataForEntitiesWithAssociations);
        }, $this, 'Oro\\Bundle\\EntityBundle\\Provider\\EntityFieldProvider')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('FieldProvider_084be6a', false)) {
    \class_alias(__NAMESPACE__.'\\FieldProvider_084be6a', 'FieldProvider_084be6a', false);
}
include_once \dirname(__DIR__, 4).'/vendor/oro/crm-zendesk/Model/EntityProvider/OroEntityProvider.php';

class OroEntityProvider_ae209d7 extends \Oro\Bundle\ZendeskBundle\Model\EntityProvider\OroEntityProvider implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Oro\Bundle\ZendeskBundle\Model\EntityProvider\OroEntityProvider|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getDefaultUser(\Oro\Bundle\IntegrationBundle\Entity\Channel $channel)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getDefaultUser', array('channel' => $channel), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getDefaultUser($channel);
    }

    public function getUser(\Oro\Bundle\ZendeskBundle\Entity\User $user, $defaultIfNotExist = false)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getUser', array('user' => $user, 'defaultIfNotExist' => $defaultIfNotExist), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getUser($user, $defaultIfNotExist);
    }

    public function getContact(\Oro\Bundle\ZendeskBundle\Entity\User $user)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getContact', array('user' => $user), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getContact($user);
    }

    public function getChannelById($channelId)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getChannelById', array('channelId' => $channelId), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getChannelById($channelId);
    }

    public function getEnabledChannels()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEnabledChannels', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEnabledChannels();
    }

    public function getEnabledTwoWaySyncChannels()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getEnabledTwoWaySyncChannels', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getEnabledTwoWaySyncChannels();
    }

    public function getAccountByContact(\Oro\Bundle\ContactBundle\Entity\Contact $contact)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getAccountByContact', array('contact' => $contact), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getAccountByContact($contact);
    }

    public function getCaseById($id)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getCaseById', array('id' => $id), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getCaseById($id);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        unset($instance->registry, $instance->namePrefixes, $instance->nameSuffixes);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(\Doctrine\Persistence\ManagerRegistry $registry, array $namePrefixes, array $nameSuffixes)
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Oro\\Bundle\\ZendeskBundle\\Model\\EntityProvider\\OroEntityProvider');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        unset($this->registry, $this->namePrefixes, $this->nameSuffixes);

        }

        $this->valueHoldere0de0->__construct($registry, $namePrefixes, $nameSuffixes);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ZendeskBundle\\Model\\EntityProvider\\OroEntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ZendeskBundle\\Model\\EntityProvider\\OroEntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ZendeskBundle\\Model\\EntityProvider\\OroEntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Oro\\Bundle\\ZendeskBundle\\Model\\EntityProvider\\OroEntityProvider');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        unset($this->registry, $this->namePrefixes, $this->nameSuffixes);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('OroEntityProvider_ae209d7', false)) {
    \class_alias(__NAMESPACE__.'\\OroEntityProvider_ae209d7', 'OroEntityProvider_ae209d7', false);
}
include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/SessionBagInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Flash/FlashBagInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Flash/FlashBag.php';

class FlashBag_4fa968b extends \Symfony\Component\HttpFoundation\Session\Flash\FlashBag implements \ProxyManager\Proxy\VirtualProxyInterface
{
    /**
     * @var \Symfony\Component\HttpFoundation\Session\Flash\FlashBag|null wrapped object, if the proxy is initialized
     */
    private $valueHoldere0de0 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer7dab9 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiescb9e8 = [
        
    ];

    public function getName()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getName', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getName();
    }

    public function setName(string $name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setName', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setName($name);
    }

    public function initialize(array &$flashes)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initialize', array('flashes' => $flashes), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->initialize($flashes);
    }

    public function add(string $type, $message)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'add', array('type' => $type, 'message' => $message), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->add($type, $message);
    }

    public function peek(string $type, array $default = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'peek', array('type' => $type, 'default' => $default), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->peek($type, $default);
    }

    public function peekAll()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'peekAll', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->peekAll();
    }

    public function get(string $type, array $default = [])
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'get', array('type' => $type, 'default' => $default), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->get($type, $default);
    }

    public function all()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'all', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->all();
    }

    public function set(string $type, $messages)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'set', array('type' => $type, 'messages' => $messages), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->set($type, $messages);
    }

    public function setAll(array $messages)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'setAll', array('messages' => $messages), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->setAll($messages);
    }

    public function has(string $type)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'has', array('type' => $type), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->has($type);
    }

    public function keys()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'keys', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->keys();
    }

    public function getStorageKey()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'getStorageKey', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->getStorageKey();
    }

    public function clear()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'clear', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return $this->valueHoldere0de0->clear();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? new \ReflectionClass(__CLASS__);
        $instance   = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Symfony\Component\HttpFoundation\Session\Flash\FlashBag $instance) {
            unset($instance->name, $instance->flashes, $instance->storageKey);
        }, $instance, 'Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag')->__invoke($instance);

        $instance->initializer7dab9 = $initializer;

        return $instance;
    }

    public function __construct(string $storageKey = '_symfony_flashes')
    {
        static $reflection;

        if (! $this->valueHoldere0de0) {
            $reflection = $reflection ?? new \ReflectionClass('Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag');
            $this->valueHoldere0de0 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Symfony\Component\HttpFoundation\Session\Flash\FlashBag $instance) {
            unset($instance->name, $instance->flashes, $instance->storageKey);
        }, $this, 'Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag')->__invoke($this);

        }

        $this->valueHoldere0de0->__construct($storageKey);
    }

    public function & __get($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__get', ['name' => $name], $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        if (isset(self::$publicPropertiescb9e8[$name])) {
            return $this->valueHoldere0de0->$name;
        }

        $realInstanceReflection = new \ReflectionClass('Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $backtrace = debug_backtrace(false, 1);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    $realInstanceReflection->getName(),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            $targetObject->$name = $value;

            return $targetObject->$name;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function & () use ($targetObject, $name, $value) {
            $targetObject->$name = $value;

            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__isset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            return isset($targetObject->$name);
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__unset', array('name' => $name), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $realInstanceReflection = new \ReflectionClass('Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag');

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHoldere0de0;

            unset($targetObject->$name);

            return;
        }

        $targetObject = $this->valueHoldere0de0;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);

            return;
        };
        $backtrace = debug_backtrace(true, 2);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $accessor();
    }

    public function __clone()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__clone', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        $this->valueHoldere0de0 = clone $this->valueHoldere0de0;
    }

    public function __sleep()
    {
        $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, '__sleep', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;

        return array('valueHoldere0de0');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Symfony\Component\HttpFoundation\Session\Flash\FlashBag $instance) {
            unset($instance->name, $instance->flashes, $instance->storageKey);
        }, $this, 'Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null) : void
    {
        $this->initializer7dab9 = $initializer;
    }

    public function getProxyInitializer() : ?\Closure
    {
        return $this->initializer7dab9;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer7dab9 && ($this->initializer7dab9->__invoke($valueHoldere0de0, $this, 'initializeProxy', array(), $this->initializer7dab9) || 1) && $this->valueHoldere0de0 = $valueHoldere0de0;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHoldere0de0;
    }

    public function getWrappedValueHolderValue()
    {
        return $this->valueHoldere0de0;
    }
}

if (!\class_exists('FlashBag_4fa968b', false)) {
    \class_alias(__NAMESPACE__.'\\FlashBag_4fa968b', 'FlashBag_4fa968b', false);
}
